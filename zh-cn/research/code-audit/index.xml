<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>代码审计 on chestnut&#39;s blog</title>
        <link>https://www.ch35tnut.com/zh-cn/research/code-audit/</link>
        <description>Recent content in 代码审计 on chestnut&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 05 Sep 2022 18:36:05 +0800</lastBuildDate>
    
        <atom:link href="https://www.ch35tnut.com/zh-cn/research/code-audit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>Codeql</title>
<link>https://www.ch35tnut.com/zh-cn/research/code-audit/codeql/</link>
<pubDate>Sun, 10 Dec 2023 00:17:23 +0800</pubDate>
      
      <guid>https://www.ch35tnut.com/zh-cn/research/code-audit/codeql/</guid>
<description>&lt;h3 id=&#34;codeql-相关&#34;&gt;CODEQL 相关&lt;/h3&gt;
&lt;h1 id=&#34;记录codeql-学习&#34;&gt;记录codeql 学习&lt;/h1&gt;
&lt;p&gt;记录codeql 学习&lt;/p&gt;
</description>

</item>
    
    <item>
<title>Wireshark 1.8.5代码审计</title>
<link>https://www.ch35tnut.com/zh-cn/research/code-audit/wireshark-185/</link>
<pubDate>Thu, 08 Sep 2022 18:13:59 +0800</pubDate>
      
      <guid>https://www.ch35tnut.com/zh-cn/research/code-audit/wireshark-185/</guid>
<description>&lt;p&gt;通过爬取wireshark的漏洞公告页面，筛选1.8.6修复的漏洞可以得到如下结果：&lt;/p&gt;
&lt;p&gt;1.8.6/1.8.7修复的漏洞&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-31. ETCH dissector large loop. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The ETCH dissector could go into a large loop. Discovered by Moshe 
&lt;a href=&#34;http://kaplan.it/&#34; target=&#34;_blank&#34;&gt;Kaplan.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-30. MySQL dissector infinite loop. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The MySQL dissector could go into an infinite loop. Discovered by Moshe 
&lt;a href=&#34;http://kaplan.it/&#34; target=&#34;_blank&#34;&gt;Kaplan.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-29. Websocket dissector crash. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The Websocket dissector could crash. Discovered by Moshe 
&lt;a href=&#34;http://kaplan.it/&#34; target=&#34;_blank&#34;&gt;Kaplan.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-28. MPEG DSM-CC dissector crash. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The MPEG DSM-CC dissector could 
&lt;a href=&#34;http://crash.it/&#34; target=&#34;_blank&#34;&gt;crash.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-27. DCP ETSI dissector crash. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The DCP ETSI dissector could crash. Discovered by Evan 
&lt;a href=&#34;http://jensen.it/&#34; target=&#34;_blank&#34;&gt;Jensen.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-26. PPP CCP dissector crash. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The PPP CCP dissector could 
&lt;a href=&#34;http://crash.it/&#34; target=&#34;_blank&#34;&gt;crash.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-25. ASN.1 BER dissector crash. Fixed in 1.8.7, 1.6.15.&lt;/p&gt;
&lt;p&gt;The ASN.1 BER dissector could 
&lt;a href=&#34;http://crash.it/&#34; target=&#34;_blank&#34;&gt;crash.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-24. GTPv2 dissector crash. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The GTPv2 dissector could 
&lt;a href=&#34;http://crash.it/&#34; target=&#34;_blank&#34;&gt;crash.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-23. RELOAD dissector infinite loop. Fixed in 1.8.7.&lt;/p&gt;
&lt;p&gt;The RELOAD dissector could go into an infinite loop. Discovered by Evan 
&lt;a href=&#34;http://jensen.it/&#34; target=&#34;_blank&#34;&gt;Jensen.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-22. DTLS dissector crash. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The DTLS dissector could crash. Discovered by Laurent 
&lt;a href=&#34;http://butti.it/&#34; target=&#34;_blank&#34;&gt;Butti.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-21. RELOAD dissector infinite loop. Fixed in 1.8.6.&lt;/p&gt;
&lt;p&gt;The RELOAD dissector could go into an infinite loop. Discovered by Even 
&lt;a href=&#34;http://jensen.it/&#34; target=&#34;_blank&#34;&gt;Jensen.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-20. FCSP dissector infinite loop. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The FCSP dissector could go into an infinite loop. Discovered by Moshe 
&lt;a href=&#34;http://kaplan.it/&#34; target=&#34;_blank&#34;&gt;Kaplan.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-19. CIMD dissector crash. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The CIMD dissector could crash. Discovered by Moshe 
&lt;a href=&#34;http://kaplan.it/&#34; target=&#34;_blank&#34;&gt;Kaplan.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-18. ACN dissector divide by zero. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The ACN dissector could attempt to divide by zero. Discovered by Alyssa 
&lt;a href=&#34;http://milburn.it/&#34; target=&#34;_blank&#34;&gt;Milburn.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-17. AMPQ dissector infinite loop. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The AMPQ dissector could go into an infinite loop. Discovered by Moshe 
&lt;a href=&#34;http://kaplan.it/&#34; target=&#34;_blank&#34;&gt;Kaplan.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-16. Mount dissector crash. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The Mount dissector could crash. Discovered by Alyssa 
&lt;a href=&#34;http://milburn.it/&#34; target=&#34;_blank&#34;&gt;Milburn.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-15. RTPS and RTPS2 dissector crash. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The RTPS and RTPS2 dissectors could crash. Discovered by Alyssa 
&lt;a href=&#34;http://milburn.it/&#34; target=&#34;_blank&#34;&gt;Milburn.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-14. MPLS Echo dissector infinite loop. Fixed in 1.8.6.&lt;/p&gt;
&lt;p&gt;The MPLS Echo dissector could go into an infinite loop. Discovered by Laurent 
&lt;a href=&#34;http://butti.it/&#34; target=&#34;_blank&#34;&gt;Butti.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-13. MS-MMS dissector crash. Fixed in 1.8.6, 1.6.14.&lt;/p&gt;
&lt;p&gt;The MS-MMS dissector could crash. Discovered by Laurent 
&lt;a href=&#34;http://butti.it/&#34; target=&#34;_blank&#34;&gt;Butti.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-12. CSN.1 dissector crash. Fixed in 1.8.6.&lt;/p&gt;
&lt;p&gt;The CSN.1 dissector could crash. Discovered by Laurent 
&lt;a href=&#34;http://butti.it/&#34; target=&#34;_blank&#34;&gt;Butti.It&lt;/a&gt; may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-11. HART/IP dissector infinite loop. Fixed in 1.8.6.&lt;/p&gt;
&lt;p&gt;The HART/IP dissectory could go into an infinite 
&lt;a href=&#34;http://loop.it/&#34; target=&#34;_blank&#34;&gt;loop.It&lt;/a&gt; may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wnpa-sec-2013-10. TCP dissector crash. Fixed in 1.8.6.&lt;/p&gt;
&lt;p&gt;The TCP dissector could crashIt may be possible to make Wireshark crash by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Created att 2022-09-08T18:13:59+08:00&lt;/strong&gt;&lt;/p&gt;
</description>

</item>
    
    <item>
<title>News Server审计</title>
<link>https://www.ch35tnut.com/zh-cn/research/code-audit/news-server/</link>
<pubDate>Tue, 06 Sep 2022 00:52:28 +0800</pubDate>
      
      <guid>https://www.ch35tnut.com/zh-cn/research/code-audit/news-server/</guid>
<description>&lt;p&gt;代码地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&#34;https://trailofbits.github.io/ctf/vulnerabilities/source_workshop/news_install.sh&#34; target=&#34;_blank&#34;&gt;https://trailofbits.github.io/ctf/vulnerabilities/source_workshop/news_install.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://trailofbits.github.io/ctf/vulnerabilities/source_workshop/news_server.c&#34; target=&#34;_blank&#34;&gt;https://trailofbits.github.io/ctf/vulnerabilities/source_workshop/news_server.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://trailofbits.github.io/ctf/vulnerabilities/source.html&#34; target=&#34;_blank&#34;&gt;https://trailofbits.github.io/ctf/vulnerabilities/source.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译：&lt;code&gt;gcc -m32 -g -o news_server news_server.c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;目标：找出10个bug和漏洞&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;news_server默认工作在根目录，没有通过chdir切换工作目录（不知道算不算bug）&lt;/p&gt;
&lt;p&gt;修复：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleConnection&lt;/span&gt;(FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logfile, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sock) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;chdir&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/root/code/c/news_server/&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在authenticate函数存在admin后门&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;memcmp&lt;/span&gt;(pass, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;baCkDoOr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;authenticate 中直接拼接用户输入到命令，命令注入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logfile, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;user, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pass)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; search[&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; path[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; userfile[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ret;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(path, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* FIXME: hard coded admin backdoor for password recovery */&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;memcmp&lt;/span&gt;(pass, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;baCkDoOr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* look up user by checking user files: done via system() to /bin/ls|grep user */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;logData&lt;/span&gt;(logfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;performing lookup for user via system()!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;snprintf&lt;/span&gt;(userfile, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(userfile)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s.txt&amp;#34;&lt;/span&gt;, user);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;snprintf&lt;/span&gt;(search, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(userfile)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stat %s`ls %s | grep %s`&amp;#34;&lt;/span&gt;, USERPATH, USERPATH, userfile);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(search);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈溢出、任意文件读（目录穿越）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readArticle&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sock, FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logfile, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;action)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; path[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;logData&lt;/span&gt;(logfile, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;action[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;strcpy&lt;/span&gt;(path, ARTICLEPATH);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;strcat&lt;/span&gt;(path, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;action[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;logData&lt;/span&gt;(logfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user request to read article: %s&amp;#34;&lt;/span&gt;, path);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;(path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;writeSock&lt;/span&gt;(sock, FILENOTAVAIL, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(FILENOTAVAIL));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* fgets for the size of the buffer (100), from the file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    writing the article to the user each time! */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fgets&lt;/span&gt;(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, file))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件写（目录穿越）、栈溢出11字节&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;writeArticle&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sock, FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logfile, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;action)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; x, y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; complete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; path[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;strcpy&lt;/span&gt;(path, ARTICLEPATH);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;strncat&lt;/span&gt;(path, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;action[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(path));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;logData&lt;/span&gt;(logfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user writing article: %s&amp;#34;&lt;/span&gt;, path);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;action[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;writeSock&lt;/span&gt;(sock, FILENOTAVAIL, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(FILENOTAVAIL));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;writeSock&lt;/span&gt;(sock, BEGINFILE, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(BEGINFILE));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>

</item>
    
  </channel>
</rss>
