<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>代码审计 on 可可的博客</title><link>https://www.ch35tnut.site/zh-cn/research/code-audit/</link><description>Recent content in 代码审计 on 可可的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Sep 2022 18:36:05 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/research/code-audit/index.xml" rel="self" type="application/rss+xml"/><item><title>Wireshark 1.8.5代码审计</title><link>https://www.ch35tnut.site/zh-cn/research/code-audit/wireshark-185/</link><pubDate>Thu, 08 Sep 2022 18:13:59 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/code-audit/wireshark-185/</guid><description>通过爬取wireshark的漏洞公告页面，筛选1.8.6修复的漏洞可以得到如下结果：
1.8.6/1.8.7修复的漏洞
wnpa-sec-2013-31. ETCH dissector large loop. Fixed in 1.8.7.
The ETCH dissector could go into a large loop. Discovered by Moshe Kaplan.It may be possible to make Wireshark consume excessive CPU resources by injecting a malformed packet onto the wire or by convincing someone to read a malformed packet trace file.
wnpa-sec-2013-30. MySQL dissector infinite loop. Fixed in 1.8.7.
The MySQL dissector could go into an infinite loop. Discovered by Moshe Kaplan.</description></item><item><title>News Server审计</title><link>https://www.ch35tnut.site/zh-cn/research/code-audit/news-server/</link><pubDate>Tue, 06 Sep 2022 00:52:28 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/code-audit/news-server/</guid><description>代码地址
https://trailofbits.github.io/ctf/vulnerabilities/source_workshop/news_install.sh
https://trailofbits.github.io/ctf/vulnerabilities/source_workshop/news_server.c
https://trailofbits.github.io/ctf/vulnerabilities/source.html
编译：gcc -m32 -g -o news_server news_server.c
目标：找出10个bug和漏洞
news_server默认工作在根目录，没有通过chdir切换工作目录（不知道算不算bug）
修复：
void handleConnection(FILE *logfile, int sock) { chdir(&amp;#34;/root/code/c/news_server/&amp;#34;); 在authenticate函数存在admin后门
if (memcmp(pass, &amp;#34;baCkDoOr&amp;#34;, 9) == 0) { return 1; } authenticate 中直接拼接用户输入到命令，命令注入
int authenticate(FILE *logfile, char *user, char *pass) { char search[512]; char path[1024]; char userfile[1024]; char data[1024]; FILE *file; int ret; memset(path, 0, sizeof(1024)); /* FIXME: hard coded admin backdoor for password recovery */ if (memcmp(pass, &amp;#34;baCkDoOr&amp;#34;, 9) == 0) { return 1; } /* look up user by checking user files: done via system() to /bin/ls|grep user */ logData(logfile, &amp;#34;performing lookup for user via system()!</description></item></channel></rss>