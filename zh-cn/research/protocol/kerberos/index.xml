<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kerberos 协议 on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/research/protocol/kerberos/</link><description>Recent content in Kerberos 协议 on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 05 Jan 2022 16:28:43 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/research/protocol/kerberos/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows中的kerberos协议</title><link>https://www.ch35tnut.site/zh-cn/research/protocol/kerberos/kerberos-in-windows/</link><pubDate>Wed, 05 Jan 2022 16:32:54 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/protocol/kerberos/kerberos-in-windows/</guid><description><h3 id="windows中的kerberos协议">Windows中的Kerberos协议</h3></description></item><item><title>认证原理</title><link>https://www.ch35tnut.site/zh-cn/research/protocol/kerberos/authentication-principle.zh.cn/</link><pubDate>Wed, 05 Jan 2022 16:29:37 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/protocol/kerberos/authentication-principle.zh.cn/</guid><description><h1 id="认证原理">认证原理</h1><hr><h3 id="一kerberos概念">一、Kerberos概念</h3><p><strong>Kerberos</strong>是计算机网络授权协议，用于在非安全网络中，对个人通信过程中用安全的手段进行身份认证。其中客户端和服务端能够相互认证，识别对方身份。Kerberos是第三方认证，依赖于第三方服务器对彼此进行身份验证，Kerberos服务器本身成为KDC。
由三部分组成：</p><ul><li>Kerberos知道用户和集群内服务以及各自的密码数据库</li><li>AS验证用户身份，验证通过就会返回给Client端一个TGT</li><li>Client通过TGT向TGS获取ST</li><li>服务验证ST有效性，如果有效则Client可以访问服务</li></ul><h3 id="二kerberos名词解释">二、Kerberos名词解释</h3><ul><li>AS（Authentication Server）认证服务器</li><li>KDC（Key Distribution Center）密钥分发中心</li><li>TGT（Ticket Granting Ticket）票据授权票据，给票据授权的票据</li><li>TGS（Ticket Granting Service）票据授权服务</li><li>SS（Service Server）服务提供服务器</li><li>ST（Server Ticket）服务端票据</li></ul><p><strong>一般KDC同时包含AS和TGS</strong></p><h3 id="三kerberos验证过程">三、Kerberos验证过程</h3><ol><li><p>Client登录，用户输入用户名和密码，会用单向函数根据密码生成客户端密钥（Client Secret Key）</p></li><li><p>Client向AS发送A消息请求TGT</p><ol><li>A消息内容<ul><li>用户名</li><li>请求服务名称，这里是TGS</li><li>网络地址</li><li>请求TGT的生命周期</li></ul></li><li>该消息不会加密，也不会发送密码或者密码生成的密钥</li></ol></li><li><p>AS检查用户名是否存在AS用户名数据库内，并使用数据库中用户密码生成的NTLM哈希解密客户端消息</p></li><li><p>如果数据库内有该用户名则随机生成TGS会话密钥（TGS Session Key），同时给Client端发送两条消息</p><ol><li>B消息内容<strong>用客户端密钥加密</strong><ul><li>TGS名称</li><li>时间戳</li><li>生命周期</li><li>TGS会话密钥（TGS Session Key）</li></ul></li><li>C消息内容（TGT）<strong>用TGS密钥（TGS Secret Key）加密</strong><ul><li>用户名</li><li>TGS名称</li><li>时间戳</li><li>用户网络地址</li><li>生命周期</li><li>TGS会话密钥（TGS Session Key）</li></ul></li></ol></li><li><p>Client用通过密码生成的客户端密钥解密B消息，如果密码正确则可以得到TGS会话密钥（TGS Session Key），将C消息（<strong>TGT</strong>）存储在本地凭据缓存内。</p></li><li><p>Client向TGS请求ST，期间需要向TGS发送两条消息<strong>明文</strong></p><ol><li>D消息内容<ul><li>想要请求的服务ID即SS</li><li>生命周期</li><li>TGT</li></ul></li><li>E消息内容<strong>使用TGS会话密钥（TGS Session Key）加密</strong>即身份验证器<ul><li>用户名</li><li>时间戳</li></ul></li></ol></li><li><p>TGS验证Client请求服务是否存在，存在则进入下一步。</p></li><li><p>TGS提取D消息内的TGT，用TGS密钥解密（TGS Secret Key），从中提取TGS会话密钥（TGS Session Key），再用TGS会话密钥解密E得到用户名和时间戳，现在TGS得到了用户名和消息E的时间戳，以及消息C的用户名和时间戳</p><ul><li>比较两个用户名和时间戳</li><li>检查TGT生命周期是否过期</li><li>检查身份验证器（E消息）是否在缓存内(存疑)</li></ul></li><li><p>TGS生成随机服务会话（service session key）密钥，并发送两条消息给Client</p><ol><li>F消息内容<strong>用服务密钥(Service Secret Key)加密</strong><ul><li>用户名</li><li>服务名</li><li>时间戳</li><li>网络地址</li><li>生命周期</li><li>服务会话密钥</li></ul></li><li>G消息内容<strong>用TGS会话密钥加密</strong><ul><li>服务名</li><li>时间戳</li><li>生命周期</li><li>服务会话密钥</li></ul></li></ol></li><li><p>因为Client有TGS会话密钥所以可以解密消息G得到服务会话密钥（service session key）</p></li><li><p>客户端和SS连接，发送两条消息</p><ol><li>消息H<strong>用服务会话密钥加密</strong>内容<strong>身份验证器</strong>：<ul><li>用户名</li><li>时间戳</li></ul></li><li>消息L<ul><li>即消息F</li></ul></li></ol></li><li><p>SS收到请求，用服务密钥解密消息I即<strong>消息F</strong>得到服务会话密钥及用户名时间戳等信息，再用服务会话密钥解密消息H得到用户名和时间戳</p></li><li><p>SS进行身份验证</p><ul><li>比较消息H内用户名和消息F内的用户名</li><li>比较消息H和消息F内的是时间戳</li><li>检查消息F内生命周期</li><li>检查身份验证器是否在缓存内</li></ul></li><li><p>SS向Client验证身份，向其发送消息</p><ol><li>消息J<strong>使用服务会话密钥加密</strong>身份验证器<ol><li>服务ID</li><li>时间戳（在消息H内的时间戳）</li></ol></li></ol></li><li><p>客户端收到SS的身份验证器消息（J），使用缓存内的服务会话密钥进行解密得到服务ID及时间戳，并验证是否有效</p></li></ol><p>参考链接</p><blockquote><p><a href="https://www.vanimpe.eu/2017/05/26/kerberos-made-easy/" target="_blank">https://www.vanimpe.eu/2017/05/26/kerberos-made-easy/</a><a href="https://zh.wikipedia.org/wiki/Kerberos" target="_blank">https://zh.wikipedia.org/wiki/Kerberos</a><a href="http://www.nosqlnotes.com/technotes/kerberos-protocol/" target="_blank">http://www.nosqlnotes.com/technotes/kerberos-protocol/</a><a href="https://juejin.im/post/6844903955416219661" target="_blank">https://juejin.im/post/6844903955416219661</a></p></blockquote><hr><h3 id="简化模型">简化模型</h3><ol><li>Client向AS发送明文消息，申请访问的服务</li><li>AS检查用户名是否存在本地数据库中，存在则返回两条消息<ol><li>A：Client/TGS会话密钥(Client/TGS Session Key)用于Client和TGS通信，通过用户密钥加密</li><li>B：TGT（包含Client/TGS会话密钥、用户、用户网络地址、TGT有效期），通过TGS密钥加密</li></ol></li><li>Client收到消息AB，用自己的用户密钥解密消息A得到和TGS通信的密钥TGS会话密钥</li><li>Client向TGS请求服务，发送两条消息<ol><li>C：消息B和申请的服务ID（明文）</li><li>D：认证符（包括用户ID、时间戳）通过(Client/TGS Session Key)加密</li></ol></li><li>TGS拿到服务ID检查是否有该服务，如果有该服务则用TGS密钥解密消息B得到(Client/TGS Session Key)再用TGS会话密钥解密消息D得到用户ID、时间戳，与TGT内的用户ID和时间戳比对验证有效性。</li><li>通过之后TGS返回两条消息给Client<ol><li>E：ST（SS会话密钥、用户ID、用户网络地址、有效期）通过SS密钥加密</li><li>F：SS会话密钥，通过TGS会话密钥加密</li></ol></li><li>Client通过TGS会话密钥解密消息F得到SS会话密钥</li><li>Client给SS发送两条消息<ol><li>G：即消息E</li><li>H：认证符，包含用户ID，时间戳，通过SS会话密钥加密</li></ol></li><li>SS收到两条消息之后用SS密钥解密消息G（E）得到SS会话密钥，在通过会话密钥解密消息H得到用户ID、时间戳等信息，如果和消息G（E）内的时间戳和用户ID比对，通过则返回消息给Client<ol><li>I：消息H内的时间戳，通过SS会话密钥加密</li></ol></li><li>Client收到消息之后用SS会话密钥解密得到时间戳，并验证，通过则可以向SS发送请求。</li></ol><hr/></item></channel></rss>