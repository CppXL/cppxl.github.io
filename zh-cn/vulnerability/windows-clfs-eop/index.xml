<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Windows CLFS EoP on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/</link><description>Recent content in Windows CLFS EoP on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 31 Jan 2024 08:22:24 +0000</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/index.xml" rel="self" type="application/rss+xml"/><item><title>CVE-2023-28252</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2023-28252/</link><pubDate>Wed, 31 May 2023 19:44:15 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2023-28252/</guid><description>基本信息 clfs中存在权限提升漏洞。
影响版本 略
环境搭建 windows 10 21h2 19044.2728 windbg x64dbg 技术分析&amp;amp;调试 静态分析
样本加了Themida的壳，参考https://github.com/VenTaz/Themidie对其进行绕过。
脱壳之后dump出原始样本进行分析，如下。核心逻辑在InitAndHeapSpray函数中：
int __cdecl main(int argc, const char **argv, const char **envp) { ..... v3 = InitAndHeapSpray(); if ( !sub_7FF662B24F98() ) goto LABEL_20; if ( !v4 ) sub_7FF662B28D3C(); LOBYTE(v10) = 1; sub_7FF662B24CA4(v10, 0i64); return v3; } 该函数首先清空工作目录，而后通过查询注册表获取系统版本，在通过NtQuerySystemInformation函数并传入SystemExtendedHandleInformation参数来获取System及自身token地址，其逻辑和CVE-2022-37969基本一样
sub_7FF662B265E4((int)NtCurrentTeb()-&amp;gt;NtTib.FiberData + v0); system(&amp;#34;del /f C:\\\\Users\\\\Public\\\\.contain* 2&amp;gt; nul 1&amp;gt; nul&amp;#34;);// 删除文件 system(&amp;#34;del /f C:\\\\Users\\\\Public\\\\MyLog* 2&amp;gt; nul 1&amp;gt; nul&amp;#34;); system(&amp;#34;del /f C:\\\\Users\\\\Public\\\\p_* 2&amp;gt; nul 1&amp;gt; nul&amp;#34;); *(_QWORD *)&amp;amp;dwProcessId = GetCurrentProcessId(); if ( !</description></item><item><title>CVE-2022-37969</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2022-37969/</link><pubDate>Fri, 26 May 2023 10:56:00 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2022-37969/</guid><description>基本信息 blf日志文件结构
基本日志块存储了基本日志文件关联的客户端和容器上下文信息
基本日志块由6个meta数据块组成，分别是控制块、基本块、截断块以及对应的shadow块，每个块由日志块头开始，大小为0x70 bytes
日志块头定义：
typedef struct _CLFS_LOG_BLOCK_HEADER { UCHAR MajorVersion; UCHAR MinorVersion; UCHAR Usn; CLFS_CLIENT_ID ClientId; USHORT TotalSectorCount; USHORT ValidSectorCount; ULONG Padding; ULONG Checksum; ULONG Flags; CLFS_LSN CurrentLsn; CLFS_LSN NextLsn; ULONG RecordOffsets[16]; ULONG SignaturesOffset; } CLFS_LOG_BLOCK_HEADER, *PCLFS_LOG_BLOCK_HEADER; 内存布局
SignatureOffset是了在内存中存储每个扇区签名的数组的偏移。扇区签名位于每个扇区的末尾，大小两个字节，由扇区块类型（1 字节）和 USN（1 字节）组成。每个扇区大小为0x200。
在BLF文件中，基本块从偏移0x800开始，到0x81FF，以日志块头开始，然后是基本记录头
基本记录头定义如下,大小为1338，到偏移1BA8处
typedef struct _CLFS_METADATA_RECORD_HEADER { ULONGLONG ullDumpCount; } CLFS_METADATA_RECORD_HEADER, * PCLFS_METADATA_RECORD_HEADER; typedef struct _CLFS_BASE_RECORD_HEADER { CLFS_METADATA_RECORD_HEADER hdrBaseRecord; CLFS_LOG_ID cidLog; ULONGLONG rgClientSymTbl[CLIENT_SYMTBL_SIZE]; ULONGLONG rgContainerSymTbl[CONTAINER_SYMTBL_SIZE]; ULONGLONG rgSecuritySymTbl[SHARED_SECURITY_SYMTBL_SIZE]; ULONG cNextContainer; CLFS_CLIENT_ID cNextClient; ULONG cFreeContainers; ULONG cActiveContainers; ULONG cbFreeContainers; ULONG cbBusyContainers; ULONG rgClients[MAX_CLIENTS_DEFAULT]; ULONG rgContainers[MAX_CONTAINERS_DEFAULT]; ULONG cbSymbolZone; ULONG cbSector; USHORT bUnused; CLFS_LOG_STATE eLogState; UCHAR cUsn; UCHAR cClients; } CLFS_BASE_RECORD_HEADER, * PCLFS_BASE_RECORD_HEADER; 内存布局：</description></item></channel></rss>