<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/tags/linux/</link><description>Recent content in linux on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 08 Dec 2023 10:30:07 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Suid</title><link>https://www.ch35tnut.site/zh-cn/research/linux/suid/</link><pubDate>Fri, 08 Dec 2023 10:30:07 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/linux/suid/</guid><description>&lt;h3 id="简介">简介&lt;/h3>
&lt;p>SUID全称&lt;strong>S&lt;/strong>et owner &lt;strong>U&lt;/strong>ser &lt;strong>ID&lt;/strong> up on execution，是Linux给可执行文件的一个属性，设置了s位的程序在运行时其&lt;strong>Effective UID&lt;/strong>将会设置为这个程序的所有者。比如，&lt;code>/bin/ping&lt;/code>这个程序的所有者是0（root），它设置了s位，那么普通用户在运行ping时其&lt;strong>Effective UID&lt;/strong>就是0，等同于拥有了root权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">➜ c ls -ldb &lt;span style="color:#66d9ef">$(&lt;/span>which pkexec&lt;span style="color:#66d9ef">)&lt;/span>
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">30872&lt;/span> 2023年 2月13日 /usr/bin/pkexec
&lt;/code>&lt;/pre>&lt;/div>&lt;p>SUID文件的出现是为了解决一些操作只能由root权限进行，但普通权限用户也需要能通过某种方式进行调用，比如passwd，/etc/shadow只有root可写，但用户自己显然需要可以修改密码，所以passwd被设置为SUID程序，使得普通用户能通过passwd临时获取到修改shadow文件的能力。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">-rw-r----- &lt;span style="color:#ae81ff">1&lt;/span> root shadow &lt;span style="color:#ae81ff">1411&lt;/span> 2023年 5月10日 /etc/shadow
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">68248&lt;/span> 2022年11月11日 /usr/bin/passwd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux中每个用户都有独一无二的ID，称为UserID。
为进程定义了三个ID：&lt;/p>
&lt;ul>
&lt;li>Real UserID&lt;/li>
&lt;li>Effective UserID&lt;/li>
&lt;li>Saved UserID&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Real UserID：对于一个进程，这个ID是启动这个进程的用户的用户ID，这个ID定义了这个进程有权访问那些文件。&lt;/li>
&lt;li>Effective UserID：通常这个ID和Real UserID相同，但有时会不一样，来允许非特权用户访问只能由特权用户访问的文件。
当非特权的用户运行此文件时，euid是文件所属的用户id，ruid才是当前用户的id
&lt;pre tabindex="0">&lt;code>-rwsr-xr-x 1 root root 68248 2022年11月11日 /usr/bin/passwd
┌──(chestnut㉿chestnut)-[/root/code/c]
└─$ passwd
为 chestnut 更改 STRESS 密码。
➜ c ps -eo pid,euid,ruid | grep 1692693
1692693 0 1000
&lt;/code>&lt;/pre>``&lt;/li>
&lt;li>Saved UserID，当进程以提升权限运行时，需要做一些非特权的操作，可以通过临时切换到非特权账户来实现。
在执行低权限工作时，将Effective UID 更改为某个较低的权限值，并将 euid 保存到Saved userID（suid），以便在任务完成时用于切换回特权帐户。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>
&lt;a href="https://www.geeksforgeeks.org/real-effective-and-saved-userid-in-linux/" target="_blank">https://www.geeksforgeeks.org/real-effective-and-saved-userid-in-linux/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>查找SUID程序&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">find / -perm -4000 -type f -exec ls -ldb &lt;span style="color:#f92672">{}&lt;/span> &lt;span style="color:#ae81ff">\;&lt;/span>
-perm -4000 查找权限为4000
-type f 只查找普通文件,过滤掉目录等其他类型
-&lt;span style="color:#f92672">[&lt;/span>/root/code/c/suid.c
/root/code/c/CMakeLists.txt&lt;span style="color:#f92672">](&lt;/span>vscode-remote://ssh-remote%2B192.168.59.211/root/code/c/suid.c&lt;span style="color:#f92672">)&lt;/span>exec ls -ldb &lt;span style="color:#f92672">{}&lt;/span> ; 对找到的文件执行ls -ldb命令,显示文件详细信息。 &lt;span style="color:#f92672">{}&lt;/span>表示find找到的文件名,会逐个代入。 ;表示-exec选项命令结束。
; 的作用就是隔离 find 命令行和 -exec 指定的命令,避免解析错误。
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">30872&lt;/span> 2023年 2月13日 /usr/bin/pkexec
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">14888&lt;/span> 2023年 1月 3日 /usr/bin/vmware-user-suid-wrapper
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">146216&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_nxp_kw41z
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">142120&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_nrf_51822
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">59704&lt;/span> 2023年 2月13日 /usr/bin/mount
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">216392&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_linux_wifi
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">142120&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_ubertooth_one
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">146216&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_rz_killerbee
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">68248&lt;/span> 2022年11月11日 /usr/bin/passwd
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">146216&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_nrf_mousejack
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">142120&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_nrf_52840
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">88496&lt;/span> 2022年11月11日 /usr/bin/gpasswd
-rwsr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">35128&lt;/span> 2023年 2月13日 /usr/bin/umount
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">154408&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_linux_bluetooth
-rwsr-xr-- &lt;span style="color:#ae81ff">1&lt;/span> root kismet &lt;span style="color:#ae81ff">146216&lt;/span> 2022年12月27日 /usr/bin/kismet_cap_ti_cc_2531
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shell中的suid细节">shell中的SUID细节&lt;/h3>
&lt;p>在
&lt;a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html&lt;/a>中提到Ubuntu对dash进行了patch。
找到patch地址为
&lt;a href="https://launchpadlibrarian.net/240241543/dash_0.5.8-2.1ubuntu2.diff.gz" target="_blank">https://launchpadlibrarian.net/240241543/dash_0.5.8-2.1ubuntu2.diff.gz&lt;/a>，代码如下，当on=1时会略过权限检查，当on不为1时，会通过geteuid和getegid获取当前进程的effective user ID和effective group ID，并与通过getuid和getgid获取的real user ID和real group ID进行比较。
如果当前进程对应的可执行文件为SUID文件且当前运行这个文件的用户不是文件属主时，会重新通过setuid和setgid将当前进程的权限设置为real ID，即运行这个可执行文件的用户的权限。
当文件不是SUID文件时rid和eid相等，不会进入if内，或者文件是SUID文件并且运行这个文件的用户是文件属主rid和eid也会相等，不会进入if内。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#f92672">+&lt;/span>diff &lt;span style="color:#f92672">-&lt;/span>Naurp dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>.ori&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>main.c dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>main.c
&lt;span style="color:#f92672">+---&lt;/span> dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>.ori&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>main.c &lt;span style="color:#ae81ff">2015&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">06&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">45&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">22.766472281&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0400&lt;/span>
&lt;span style="color:#f92672">++++&lt;/span> dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>main.c &lt;span style="color:#ae81ff">2015&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">06&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">58&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">56.484258181&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0400&lt;/span>
&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@@&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">97&lt;/span>,&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">97&lt;/span>,&lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@@&lt;/span> main(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv)
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> jmploc jmploc;
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> stackmark smark;
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> login;
&lt;span style="color:#f92672">++&lt;/span> uid_t uid;
&lt;span style="color:#f92672">++&lt;/span> gid_t gid;
&lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>ifdef __GLIBC__
&lt;span style="color:#f92672">+&lt;/span> dash_errno &lt;span style="color:#f92672">=&lt;/span> __errno_location();
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>endif
&lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#f92672">++&lt;/span> uid &lt;span style="color:#f92672">=&lt;/span> getuid();
&lt;span style="color:#f92672">++&lt;/span> gid &lt;span style="color:#f92672">=&lt;/span> getgid();
&lt;span style="color:#f92672">+&lt;/span>diff &lt;span style="color:#f92672">-&lt;/span>Naurp dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>.ori&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>priv.c dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>priv.c
&lt;span style="color:#f92672">+---&lt;/span> dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>.ori&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>priv.c &lt;span style="color:#ae81ff">1969&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">00.000000000&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0500&lt;/span>
&lt;span style="color:#f92672">++++&lt;/span> dash&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5.7&lt;/span>&lt;span style="color:#f92672">/&lt;/span>src&lt;span style="color:#f92672">/&lt;/span>priv.c &lt;span style="color:#ae81ff">2015&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">06&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">31.097386153&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0400&lt;/span>
&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@@&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">27&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@@&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>unistd.h&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#e6db74">&amp;#34;priv.h&amp;#34;&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#e6db74">&amp;#34;var.h&amp;#34;&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>uid_t uid;
&lt;span style="color:#f92672">++&lt;/span>gid_t gid;
&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> setprivileged(&lt;span style="color:#66d9ef">int&lt;/span> on)
&lt;span style="color:#f92672">++&lt;/span>{
&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> is_privileged &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (is_privileged &lt;span style="color:#f92672">==&lt;/span> on)
&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#f92672">++&lt;/span> is_privileged &lt;span style="color:#f92672">=&lt;/span> on;
&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">++ * To limit bogus system(3) or popen(3) calls in setuid binaries, require
&lt;/span>&lt;span style="color:#75715e">++ * -p flag to work in this situation.
&lt;/span>&lt;span style="color:#75715e">++ */&lt;/span>
&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>on &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (uid &lt;span style="color:#f92672">!=&lt;/span> geteuid() &lt;span style="color:#f92672">||&lt;/span> gid &lt;span style="color:#f92672">!=&lt;/span> getegid())) {
&lt;span style="color:#f92672">++&lt;/span> setuid(uid);
&lt;span style="color:#f92672">++&lt;/span> setgid(gid);
&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#75715e">/* PS1 might need to be changed accordingly. */&lt;/span>
&lt;span style="color:#f92672">++&lt;/span> choose_ps1();
&lt;span style="color:#f92672">++&lt;/span> }
&lt;span style="color:#f92672">++&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么为什么要这样实现呢？为什么如果需要继承默认的effective user ID和effective group ID需要显式的使用-p参数呢？
假设我们有如下suid程序，并且该程序由www-data用户启动：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[]) {
printf(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, argv[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;span style="color:#66d9ef">return&lt;/span> system(argv[&lt;span style="color:#ae81ff">1&lt;/span>]);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中通过system函数执行用户传入的命令，system实现可以
&lt;a href="https://codebrowser.dev/glibc/glibc/sysdeps/posix/system.c.html" target="_blank">在这找到&lt;/a>，可以看到实际执行的是&lt;code>/bin/sh -c command&lt;/code>，加入攻击者传入恶意命令，尝试通过该程序以root权限执行命令，最终以&lt;code>/bin/sh -c command&lt;/code>的形式执行命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#define SHELL_PATH &amp;#34;/bin/sh&amp;#34; &lt;/span>&lt;span style="color:#75715e">/* Path of the shell. */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#define SHELL_NAME &amp;#34;sh&amp;#34; &lt;/span>&lt;span style="color:#75715e">/* Name to give it. */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>do_system (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>line)
{
&lt;span style="color:#66d9ef">int&lt;/span> status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> ret;
pid_t pid;
&lt;span style="color:#66d9ef">struct&lt;/span> sigaction sa;
&lt;span style="color:#75715e">#ifndef _LIBC_REENTRANT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> sigaction intr, quit;
&lt;span style="color:#75715e">#endif
&lt;/span>&lt;span style="color:#75715e">&lt;/span> .....
__posix_spawnattr_init (&lt;span style="color:#f92672">&amp;amp;&lt;/span>spawn_attr);
__posix_spawnattr_setsigmask (&lt;span style="color:#f92672">&amp;amp;&lt;/span>spawn_attr, &lt;span style="color:#f92672">&amp;amp;&lt;/span>omask);
__posix_spawnattr_setsigdefault (&lt;span style="color:#f92672">&amp;amp;&lt;/span>spawn_attr, &lt;span style="color:#f92672">&amp;amp;&lt;/span>reset);
__posix_spawnattr_setflags (&lt;span style="color:#f92672">&amp;amp;&lt;/span>spawn_attr,
POSIX_SPAWN_SETSIGDEF &lt;span style="color:#f92672">|&lt;/span> POSIX_SPAWN_SETSIGMASK);
ret &lt;span style="color:#f92672">=&lt;/span> __posix_spawn (&lt;span style="color:#f92672">&amp;amp;&lt;/span>pid, SHELL_PATH, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>spawn_attr,
(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span>[]){ (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) SHELL_NAME,
(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>,
(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) line, NULL },
__environ);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果没有前面说的措施，那么攻击者可以成功以root权限执行恶意命令，但通过上面的措施，则会出现如下：因为进程的rid为www-data，eid为root，而通过system函数执行命令不能显式设置-p参数，导致在执行命令时，不能通过if判断，命令的权限会被降为www-data权限，从而一定程度上缓解了攻击。&lt;/p>
&lt;p>参考资料&lt;/p>
&lt;blockquote>
&lt;p>
&lt;a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Created at 2023-12-08T10:30:07+08:00&lt;/strong>&lt;/p></description></item></channel></rss>